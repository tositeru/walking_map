(window.webpackJsonp=window.webpackJsonp||[]).push([[11,4],[,,,,,,,function(t,e,i){"use strict";function n(t,e,i){for(var n,o,s=i||r,a=0,h=t.length,u=!1;a<h;)(o=+s(t[n=a+(h-a>>1)],e))<0?a=n+1:(h=n,u=!o);return u?a:~a}function r(t,e){return t>e?1:t<e?-1:0}function o(t,e){return t.indexOf(e)>=0}function s(t,e,i){var n,r=t.length;if(t[0]<=e)return 0;if(e<=t[r-1])return r-1;if(i>0){for(n=1;n<r;++n)if(t[n]<e)return n-1}else if(i<0){for(n=1;n<r;++n)if(t[n]<=e)return n}else for(n=1;n<r;++n){if(t[n]==e)return n;if(t[n]<e)return t[n-1]-e<e-t[n]?n-1:n}return r-1}function a(t,e,i){for(;e<i;){var n=t[e];t[e]=t[i],t[i]=n,++e,--i}}function h(t,e){for(var i=Array.isArray(e)?e:[e],n=i.length,r=0;r<n;r++)t[t.length]=i[r]}function u(t,e){var i=t.indexOf(e),n=i>-1;return n&&t.splice(i,1),n}function c(t,e){for(var i,n=t.length>>>0,r=0;r<n;r++)if(e(i=t[r],r,t))return i;return null}function l(t,e){var i=t.length;if(i!==e.length)return!1;for(var n=0;n<i;n++)if(t[n]!==e[n])return!1;return!0}function d(t,e){var i,n=t.length,r=Array(t.length);for(i=0;i<n;i++)r[i]={index:i,value:t[i]};for(r.sort(function(t,i){return e(t.value,i.value)||t.index-i.index}),i=0;i<t.length;i++)t[i]=r[i].value}function p(t,e){var i;return!t.every(function(n,r){return i=r,!e(n,r,t)})?i:-1}function f(t,e,i){var n=e||r;return t.every(function(e,r){if(0===r)return!0;var o=n(t[r-1],e);return!(o>0||i&&0===o)})}i.d(e,"a",function(){return n}),i.d(e,"i",function(){return r}),i.d(e,"f",function(){return o}),i.d(e,"h",function(){return s}),i.d(e,"k",function(){return a}),i.d(e,"c",function(){return h}),i.d(e,"j",function(){return u}),i.d(e,"d",function(){return c}),i.d(e,"b",function(){return l}),i.d(e,"l",function(){return d}),i.d(e,"e",function(){return p}),i.d(e,"g",function(){return f})},,,,,,,function(t,e,i){"use strict";e.a={ANIMATING:0,INTERACTING:1}},,function(t,e,i){"use strict";e.a={UNDEFINED:"undefined",LOADING:"loading",READY:"ready",ERROR:"error"}},,function(t,e,i){"use strict";i.d(e,"a",function(){return n}),i.d(e,"b",function(){return r}),i.d(e,"c",function(){return o}),i.d(e,"e",function(){return s}),i.d(e,"f",function(){return a}),i.d(e,"g",function(){return h}),i.d(e,"h",function(){return u}),i.d(e,"d",function(){return c}),i.d(e,"i",function(){return l});i(6),i(51);function n(t,e){return t[0]+=e[0],t[1]+=e[1],t}function r(t,e){var i=e.getRadius(),n=e.getCenter(),r=n[0],o=n[1],s=t[0]-r,a=t[1]-o;0===s&&0===a&&(s=1);var h=Math.sqrt(s*s+a*a);return[r+i*s/h,o+i*a/h]}function o(t,e){var i,n,r=t[0],o=t[1],s=e[0],a=e[1],h=s[0],u=s[1],c=a[0],l=a[1],d=c-h,p=l-u,f=0===d&&0===p?0:(d*(r-h)+p*(o-u))/(d*d+p*p||0);return f<=0?(i=h,n=u):f>=1?(i=c,n=l):(i=h+f*d,n=u+f*p),[i,n]}function s(t,e){for(var i=!0,n=t.length-1;n>=0;--n)if(t[n]!=e[n]){i=!1;break}return i}function a(t,e){var i=Math.cos(e),n=Math.sin(e),r=t[0]*i-t[1]*n,o=t[1]*i+t[0]*n;return t[0]=r,t[1]=o,t}function h(t,e){return t[0]*=e,t[1]*=e,t}function u(t,e){var i=t[0]-e[0],n=t[1]-e[1];return i*i+n*n}function c(t,e){return Math.sqrt(u(t,e))}function l(t,e){return u(t,o(t,e))}},,,function(t,e,i){"use strict";e.a={ADD:"add",REMOVE:"remove"}},function(t,e,i){"use strict";function n(t,e,i,n,r){for(var o=void 0!==r?r:[],s=0,a=e;a<i;a+=n)o[s++]=t.slice(a,a+n);return o.length=s,o}function r(t,e,i,r,o){for(var s=void 0!==o?o:[],a=0,h=0,u=i.length;h<u;++h){var c=i[h];s[a++]=n(t,e,c,r,s[a]),e=c}return s.length=a,s}function o(t,e,i,n,o){for(var s=void 0!==o?o:[],a=0,h=0,u=i.length;h<u;++h){var c=i[h];s[a++]=r(t,e,c,n,s[a]),e=c[c.length-1]}return s.length=a,s}i.d(e,"a",function(){return n}),i.d(e,"b",function(){return r}),i.d(e,"c",function(){return o})},,function(t,e,i){"use strict";function n(t){return Math.pow(t,3)}function r(t){return 1-n(1-t)}function o(t){return 3*t*t-2*t*t*t}function s(t){return t}i.d(e,"a",function(){return n}),i.d(e,"b",function(){return r}),i.d(e,"c",function(){return o}),i.d(e,"d",function(){return s})},function(t,e,i){"use strict";var n=i(67),r=i(21),o=i(12),s=i(11),a="length",h=function(t){function e(e,i){t.call(this,e),this.element=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(s.a),u=function(t){function e(e,i){t.call(this);var n=i||{};if(this.unique_=!!n.unique,this.array_=e||[],this.unique_)for(var r=0,o=this.array_.length;r<o;++r)this.assertUnique_(this.array_[r],r);this.updateLength_()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.clear=function(){for(;this.getLength()>0;)this.pop()},e.prototype.extend=function(t){for(var e=0,i=t.length;e<i;++e)this.push(t[e]);return this},e.prototype.forEach=function(t){for(var e=this.array_,i=0,n=e.length;i<n;++i)t(e[i],i,e)},e.prototype.getArray=function(){return this.array_},e.prototype.item=function(t){return this.array_[t]},e.prototype.getLength=function(){return this.get(a)},e.prototype.insertAt=function(t,e){this.unique_&&this.assertUnique_(e),this.array_.splice(t,0,e),this.updateLength_(),this.dispatchEvent(new h(r.a.ADD,e))},e.prototype.pop=function(){return this.removeAt(this.getLength()-1)},e.prototype.push=function(t){this.unique_&&this.assertUnique_(t);var e=this.getLength();return this.insertAt(e,t),this.getLength()},e.prototype.remove=function(t){for(var e=this.array_,i=0,n=e.length;i<n;++i)if(e[i]===t)return this.removeAt(i)},e.prototype.removeAt=function(t){var e=this.array_[t];return this.array_.splice(t,1),this.updateLength_(),this.dispatchEvent(new h(r.a.REMOVE,e)),e},e.prototype.setAt=function(t,e){var i=this.getLength();if(t<i){this.unique_&&this.assertUnique_(e,t);var n=this.array_[t];this.array_[t]=e,this.dispatchEvent(new h(r.a.REMOVE,n)),this.dispatchEvent(new h(r.a.ADD,e))}else{for(var o=i;o<t;++o)this.insertAt(o,void 0);this.insertAt(t,e)}},e.prototype.updateLength_=function(){this.set(a,this.array_.length)},e.prototype.assertUnique_=function(t,e){for(var i=0,r=this.array_.length;i<r;++i)if(this.array_[i]===t&&i!==e)throw new n.a(58)},e}(o.a);e.a=u},function(t,e,i){"use strict";var n=i(2);e.a={SINGLECLICK:"singleclick",CLICK:n.a.CLICK,DBLCLICK:n.a.DBLCLICK,POINTERDRAG:"pointerdrag",POINTERMOVE:"pointermove",POINTERDOWN:"pointerdown",POINTERUP:"pointerup",POINTEROVER:"pointerover",POINTEROUT:"pointerout",POINTERENTER:"pointerenter",POINTERLEAVE:"pointerleave",POINTERCANCEL:"pointercancel"}},function(t,e,i){"use strict";i.d(e,"a",function(){return r}),i.d(e,"b",function(){return o}),i.d(e,"e",function(){return s}),i.d(e,"c",function(){return h}),i.d(e,"d",function(){return u});var n=i(6);function r(t,e,i,r,o,s,a){var h=(i-e)/r;if(h<3){for(;e<i;e+=r)s[a++]=t[e],s[a++]=t[e+1];return a}var u=new Array(h);u[0]=1,u[h-1]=1;for(var c=[e,i-r],l=0;c.length>0;){for(var d=c.pop(),p=c.pop(),f=0,_=t[p],g=t[p+1],v=t[d],y=t[d+1],m=p+r;m<d;m+=r){var C=t[m],E=t[m+1],O=Object(n.g)(C,E,_,g,v,y);O>f&&(l=m,f=O)}f>o&&(u[(l-e)/r]=1,p+r<l&&c.push(p,l),l+r<d&&c.push(l,d))}for(var b=0;b<h;++b)u[b]&&(s[a++]=t[e+b*r],s[a++]=t[e+b*r+1]);return a}function o(t,e,i,n,o,s,a,h){for(var u=0,c=i.length;u<c;++u){var l=i[u];a=r(t,e,l,n,o,s,a),h.push(a),e=l}return a}function s(t,e){return e*Math.round(t/e)}function a(t,e,i,n,r,o,a){if(e==i)return a;var h,u,c=s(t[e],r),l=s(t[e+1],r);e+=n,o[a++]=c,o[a++]=l;do{if(h=s(t[e],r),u=s(t[e+1],r),(e+=n)==i)return o[a++]=h,o[a++]=u,a}while(h==c&&u==l);for(;e<i;){var d=s(t[e],r),p=s(t[e+1],r);if(e+=n,d!=h||p!=u){var f=h-c,_=u-l,g=d-c,v=p-l;f*v==_*g&&(f<0&&g<f||f==g||f>0&&g>f)&&(_<0&&v<_||_==v||_>0&&v>_)?(h=d,u=p):(o[a++]=h,o[a++]=u,c=h,l=u,h=d,u=p)}}return o[a++]=h,o[a++]=u,a}function h(t,e,i,n,r,o,s,h){for(var u=0,c=i.length;u<c;++u){var l=i[u];s=a(t,e,l,n,r,o,s),h.push(s),e=l}return s}function u(t,e,i,n,r,o,s,a){for(var u=0,c=i.length;u<c;++u){var l=i[u],d=[];s=h(t,e,l,n,r,o,s,d),a.push(d),e=l[l.length-1]}return s}},,function(t,e,i){"use strict";e.a={IMAGE:"IMAGE",TILE:"TILE",VECTOR_TILE:"VECTOR_TILE",VECTOR:"VECTOR"}},,function(t,e,i){"use strict";var n=i(7),r=i(1),o=i(37),s=i(10),a=i(20),h=i(46),u=i(33),c=i(23),l=i(22),d=i(27),p=function(t){function e(e,i){t.call(this),this.maxDelta_=-1,this.maxDeltaRevision_=-1,void 0===i||Array.isArray(e[0])?this.setCoordinates(e,i):this.setFlatCoordinates(i,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout)},e.prototype.closestPointXY=function(t,e,i,n){return n<Object(r.e)(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(Object(u.e)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),Object(u.d)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!0,t,e,i,n))},e.prototype.getArea=function(){return Object(h.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getCoordinates=function(){return Object(l.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getSimplifiedGeometryInternal=function(t){var i=[];return i.length=Object(d.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,i,0),new e(i,o.a.XY)},e.prototype.getType=function(){return s.a.LINEAR_RING},e.prototype.intersectsExtent=function(t){return!1},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=Object(c.b)(this.flatCoordinates,0,t,this.stride),this.changed()},e}(a.a),f=i(42),_=i(83),g=i(36),v=i(59),y=i(43),m=i(66),C=i(6);i.d(e,"a",function(){return O}),i.d(e,"d",function(){return b}),i.d(e,"c",function(){return x}),i.d(e,"e",function(){return R});var E=function(t){function e(e,i,n){t.call(this),this.ends_=[],this.flatInteriorPointRevision_=-1,this.flatInteriorPoint_=null,this.maxDelta_=-1,this.maxDeltaRevision_=-1,this.orientedRevision_=-1,this.orientedFlatCoordinates_=null,void 0!==i&&n?(this.setFlatCoordinates(i,e),this.ends_=n):this.setCoordinates(e,i)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.appendLinearRing=function(t){this.flatCoordinates?Object(n.c)(this.flatCoordinates,t.getFlatCoordinates()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.ends_.push(this.flatCoordinates.length),this.changed()},e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout,this.ends_.slice())},e.prototype.closestPointXY=function(t,e,i,n){return n<Object(r.e)(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(Object(u.a)(this.flatCoordinates,0,this.ends_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),Object(u.b)(this.flatCoordinates,0,this.ends_,this.stride,this.maxDelta_,!0,t,e,i,n))},e.prototype.containsXY=function(t,e){return Object(g.c)(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,e)},e.prototype.getArea=function(){return Object(h.b)(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride)},e.prototype.getCoordinates=function(t){var e;return void 0!==t?(e=this.getOrientedFlatCoordinates().slice(),Object(m.c)(e,0,this.ends_,this.stride,t)):e=this.flatCoordinates,Object(l.b)(e,0,this.ends_,this.stride)},e.prototype.getEnds=function(){return this.ends_},e.prototype.getFlatInteriorPoint=function(){if(this.flatInteriorPointRevision_!=this.getRevision()){var t=Object(r.x)(this.getExtent());this.flatInteriorPoint_=Object(v.a)(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,0),this.flatInteriorPointRevision_=this.getRevision()}return this.flatInteriorPoint_},e.prototype.getInteriorPoint=function(){return new f.default(this.getFlatInteriorPoint(),o.a.XYM)},e.prototype.getLinearRingCount=function(){return this.ends_.length},e.prototype.getLinearRing=function(t){return t<0||this.ends_.length<=t?null:new p(this.flatCoordinates.slice(0===t?0:this.ends_[t-1],this.ends_[t]),this.layout)},e.prototype.getLinearRings=function(){for(var t=this.layout,e=this.flatCoordinates,i=this.ends_,n=[],r=0,o=0,s=i.length;o<s;++o){var a=i[o],h=new p(e.slice(r,a),t);n.push(h),r=a}return n},e.prototype.getOrientedFlatCoordinates=function(){if(this.orientedRevision_!=this.getRevision()){var t=this.flatCoordinates;Object(m.a)(t,0,this.ends_,this.stride)?this.orientedFlatCoordinates_=t:(this.orientedFlatCoordinates_=t.slice(),this.orientedFlatCoordinates_.length=Object(m.c)(this.orientedFlatCoordinates_,0,this.ends_,this.stride)),this.orientedRevision_=this.getRevision()}return this.orientedFlatCoordinates_},e.prototype.getSimplifiedGeometryInternal=function(t){var i=[],n=[];return i.length=Object(d.c)(this.flatCoordinates,0,this.ends_,this.stride,Math.sqrt(t),i,0,n),new e(i,o.a.XY,n)},e.prototype.getType=function(){return s.a.POLYGON},e.prototype.intersectsExtent=function(t){return Object(y.c)(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t)},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,2),this.flatCoordinates||(this.flatCoordinates=[]);var i=Object(c.c)(this.flatCoordinates,0,t,this.stride,this.ends_);this.flatCoordinates.length=0===i.length?0:i[i.length-1],this.changed()},e}(a.a);e.b=E;function O(t,e,i,r){for(var s=i||32,a=[],h=0;h<s;++h)Object(n.c)(a,Object(_.b)(t,e,2*Math.PI*h/s,r));return a.push(a[0],a[1]),new E(a,o.a.XY,[a.length])}function b(t){var e=t[0],i=t[1],n=t[2],r=t[3],s=[e,i,e,r,n,r,n,i,e,i];return new E(s,o.a.XY,[s.length])}function x(t,e,i){for(var n=e||32,r=t.getStride(),o=t.getLayout(),s=t.getCenter(),a=r*(n+1),h=new Array(a),u=0;u<a;u+=r){h[u]=0,h[u+1]=0;for(var c=2;c<r;c++)h[u+c]=s[c]}var l=[h.length],d=new E(h,o,l);return R(d,s,t.getRadius(),i),d}function R(t,e,i,n){for(var r=t.getFlatCoordinates(),o=t.getStride(),s=r.length/o-1,a=n||0,h=0;h<=s;++h){var u=h*o,c=a+2*Object(C.d)(h,s)*Math.PI/s;r[u]=e[0]+i*Math.cos(c),r[u+1]=e[1]+i*Math.sin(c)}t.changed()}},function(t,e,i){"use strict";i.d(e,"b",function(){return p});var n=i(4),r=i(2),o=i(3),s=i(12),a=i(58),h=i(56),u=i(5),c=i(41),l=i(16),d=function(t){function e(e){var i=Object(u.a)({},e);delete i.source,t.call(this,i),this.mapPrecomposeKey_=null,this.mapRenderKey_=null,this.sourceChangeKey_=null,e.map&&this.setMap(e.map),Object(n.a)(this,Object(s.b)(h.a.SOURCE),this.handleSourcePropertyChange_,this);var r=e.source?e.source:null;this.setSource(r)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getLayersArray=function(t){var e=t||[];return e.push(this),e},e.prototype.getLayerStatesArray=function(t){var e=t||[];return e.push(this.getLayerState()),e},e.prototype.getSource=function(){return this.get(h.a.SOURCE)||null},e.prototype.getSourceState=function(){var t=this.getSource();return t?t.getState():l.a.UNDEFINED},e.prototype.handleSourceChange_=function(){this.changed()},e.prototype.handleSourcePropertyChange_=function(){this.sourceChangeKey_&&(Object(n.e)(this.sourceChangeKey_),this.sourceChangeKey_=null);var t=this.getSource();t&&(this.sourceChangeKey_=Object(n.a)(t,r.a.CHANGE,this.handleSourceChange_,this)),this.changed()},e.prototype.setMap=function(t){this.mapPrecomposeKey_&&(Object(n.e)(this.mapPrecomposeKey_),this.mapPrecomposeKey_=null),t||this.changed(),this.mapRenderKey_&&(Object(n.e)(this.mapRenderKey_),this.mapRenderKey_=null),t&&(this.mapPrecomposeKey_=Object(n.a)(t,c.a.PRECOMPOSE,function(t){var e=t,i=this.getLayerState();i.managed=!1,void 0===this.getZIndex()&&(i.zIndex=1/0),e.frameState.layerStatesArray.push(i),e.frameState.layerStates[Object(o.c)(this)]=i},this),this.mapRenderKey_=Object(n.a)(this,r.a.CHANGE,t.render,t),this.changed())},e.prototype.setSource=function(t){this.set(h.a.SOURCE,t)},e}(a.a);function p(t,e){return t.visible&&e>=t.minResolution&&e<t.maxResolution}e.a=d},function(t,e,i){"use strict";i.d(e,"e",function(){return o}),i.d(e,"a",function(){return s}),i.d(e,"f",function(){return a}),i.d(e,"d",function(){return h}),i.d(e,"b",function(){return u}),i.d(e,"c",function(){return c});var n=i(6);function r(t,e,i,r,o,s,a){var h,u=t[e],c=t[e+1],l=t[i]-u,d=t[i+1]-c;if(0===l&&0===d)h=e;else{var p=((o-u)*l+(s-c)*d)/(l*l+d*d);if(p>1)h=i;else{if(p>0){for(var f=0;f<r;++f)a[f]=Object(n.c)(t[e+f],t[i+f],p);return void(a.length=r)}h=e}}for(var _=0;_<r;++_)a[_]=t[h+_];a.length=r}function o(t,e,i,r,o){var s=t[e],a=t[e+1];for(e+=r;e<i;e+=r){var h=t[e],u=t[e+1],c=Object(n.f)(s,a,h,u);c>o&&(o=c),s=h,a=u}return o}function s(t,e,i,n,r){for(var s=0,a=i.length;s<a;++s){var h=i[s];r=o(t,e,h,n,r),e=h}return r}function a(t,e,i,n,r){for(var o=0,a=i.length;o<a;++o){var h=i[o];r=s(t,e,h,n,r),e=h[h.length-1]}return r}function h(t,e,i,o,s,a,h,u,c,l,d){if(e==i)return l;var p,f;if(0===s){if((f=Object(n.f)(h,u,t[e],t[e+1]))<l){for(p=0;p<o;++p)c[p]=t[e+p];return c.length=o,f}return l}for(var _=d||[NaN,NaN],g=e+o;g<i;)if(r(t,g-o,g,o,h,u,_),(f=Object(n.f)(h,u,_[0],_[1]))<l){for(l=f,p=0;p<o;++p)c[p]=_[p];c.length=o,g+=o}else g+=o*Math.max((Math.sqrt(f)-Math.sqrt(l))/s|0,1);if(a&&(r(t,i-o,e,o,h,u,_),(f=Object(n.f)(h,u,_[0],_[1]))<l)){for(l=f,p=0;p<o;++p)c[p]=_[p];c.length=o}return l}function u(t,e,i,n,r,o,s,a,u,c,l){for(var d=l||[NaN,NaN],p=0,f=i.length;p<f;++p){var _=i[p];c=h(t,e,_,n,r,o,s,a,u,c,d),e=_}return c}function c(t,e,i,n,r,o,s,a,h,c,l){for(var d=l||[NaN,NaN],p=0,f=i.length;p<f;++p){var _=i[p];c=u(t,e,_,n,r,o,s,a,h,c,d),e=_[_.length-1]}return c}},function(t,e,i){"use strict";var n=i(29),r=i(32),o=i(61),s=i(5),a=i(35),h="renderOrder",u=function(t){function e(e){var i=e||{},r=Object(s.a)({},i);delete r.style,delete r.renderBuffer,delete r.updateWhileAnimating,delete r.updateWhileInteracting,t.call(this,r),this.declutter_=void 0!==i.declutter&&i.declutter,this.renderBuffer_=void 0!==i.renderBuffer?i.renderBuffer:100,this.style_=null,this.styleFunction_=void 0,this.setStyle(i.style),this.updateWhileAnimating_=void 0!==i.updateWhileAnimating&&i.updateWhileAnimating,this.updateWhileInteracting_=void 0!==i.updateWhileInteracting&&i.updateWhileInteracting,this.renderMode_=i.renderMode||o.a.VECTOR,this.type=n.a.VECTOR}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getDeclutter=function(){return this.declutter_},e.prototype.setDeclutter=function(t){this.declutter_=t},e.prototype.getRenderBuffer=function(){return this.renderBuffer_},e.prototype.getRenderOrder=function(){return this.get(h)},e.prototype.getStyle=function(){return this.style_},e.prototype.getStyleFunction=function(){return this.styleFunction_},e.prototype.getUpdateWhileAnimating=function(){return this.updateWhileAnimating_},e.prototype.getUpdateWhileInteracting=function(){return this.updateWhileInteracting_},e.prototype.setRenderOrder=function(t){this.set(h,t)},e.prototype.setStyle=function(t){this.style_=void 0!==t?t:a.a,this.styleFunction_=null===t?void 0:Object(a.d)(this.style_),this.changed()},e.prototype.getRenderMode=function(){return this.renderMode_},e}(r.a);u.prototype.getSource,e.a=u},,function(t,e,i){"use strict";i.d(e,"a",function(){return r}),i.d(e,"b",function(){return o}),i.d(e,"c",function(){return s}),i.d(e,"d",function(){return a});var n=i(1);function r(t,e,i,r,s){return!Object(n.t)(s,function(n){return!o(t,e,i,r,n[0],n[1])})}function o(t,e,i,n,r,o){for(var s=0,a=t[i-n],h=t[i-n+1];e<i;e+=n){var u=t[e],c=t[e+1];h<=o?c>o&&(u-a)*(o-h)-(r-a)*(c-h)>0&&s++:c<=o&&(u-a)*(o-h)-(r-a)*(c-h)<0&&s--,a=u,h=c}return 0!==s}function s(t,e,i,n,r,s){if(0===i.length)return!1;if(!o(t,e,i[0],n,r,s))return!1;for(var a=1,h=i.length;a<h;++a)if(o(t,i[a-1],i[a],n,r,s))return!1;return!0}function a(t,e,i,n,r,o){if(0===i.length)return!1;for(var a=0,h=i.length;a<h;++a){var u=i[a];if(s(t,e,u,n,r,o))return!0;e=u[u.length-1]}return!1}},,,function(t,e,i){"use strict";var n=i(3),r=i(25),o=i(21),s=i(50),a=i(7),h=i(9),u=i(4),c=i(11),l=i(2),d=i(1),p=i(72),f=i(8);function _(t,e){return[[-1/0,-1/0,1/0,1/0]]}var g=i(5),v=i(54),y=i(16),m=i(53),C=i(52),E=function(t){function e(e,i){t.call(this,e),this.feature=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(c.a),O=function(t){function e(e){var i=e||{};t.call(this,{attributions:i.attributions,projection:void 0,state:y.a.READY,wrapX:void 0===i.wrapX||i.wrapX}),this.loader_=f.c,this.format_=i.format,this.overlaps_=null==i.overlaps||i.overlaps,this.url_=i.url,void 0!==i.loader?this.loader_=i.loader:void 0!==this.url_&&(Object(h.a)(this.format_,7),this.loader_=Object(p.b)(this.url_,this.format_)),this.strategy_=void 0!==i.strategy?i.strategy:_;var n,o,s=void 0===i.useSpatialIndex||i.useSpatialIndex;this.featuresRtree_=s?new C.a:null,this.loadedExtentsRtree_=new C.a,this.nullGeometryFeatures_={},this.idIndex_={},this.undefIdIndex_={},this.featureChangeKeys_={},this.featuresCollection_=null,Array.isArray(i.features)?o=i.features:i.features&&(o=(n=i.features).getArray()),s||void 0!==n||(n=new r.a(o)),void 0!==o&&this.addFeaturesInternal(o),void 0!==n&&this.bindFeaturesCollection_(n)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.addFeature=function(t){this.addFeatureInternal(t),this.changed()},e.prototype.addFeatureInternal=function(t){var e=Object(n.c)(t);if(this.addToIndex_(e,t)){this.setupChangeEvents_(e,t);var i=t.getGeometry();if(i){var r=i.getExtent();this.featuresRtree_&&this.featuresRtree_.insert(r,t)}else this.nullGeometryFeatures_[e]=t;this.dispatchEvent(new E(m.a.ADDFEATURE,t))}},e.prototype.setupChangeEvents_=function(t,e){this.featureChangeKeys_[t]=[Object(u.a)(e,l.a.CHANGE,this.handleFeatureChange_,this),Object(u.a)(e,s.a.PROPERTYCHANGE,this.handleFeatureChange_,this)]},e.prototype.addToIndex_=function(t,e){var i=!0,n=e.getId();return void 0!==n?n.toString()in this.idIndex_?i=!1:this.idIndex_[n.toString()]=e:(Object(h.a)(!(t in this.undefIdIndex_),30),this.undefIdIndex_[t]=e),i},e.prototype.addFeatures=function(t){this.addFeaturesInternal(t),this.changed()},e.prototype.addFeaturesInternal=function(t){for(var e=[],i=[],r=[],o=0,s=t.length;o<s;o++){var a=t[o],h=Object(n.c)(a);this.addToIndex_(h,a)&&i.push(a)}for(var u=0,c=i.length;u<c;u++){var l=i[u],d=Object(n.c)(l);this.setupChangeEvents_(d,l);var p=l.getGeometry();if(p){var f=p.getExtent();e.push(f),r.push(l)}else this.nullGeometryFeatures_[d]=l}this.featuresRtree_&&this.featuresRtree_.load(e,r);for(var _=0,g=i.length;_<g;_++)this.dispatchEvent(new E(m.a.ADDFEATURE,i[_]))},e.prototype.bindFeaturesCollection_=function(t){var e=!1;Object(u.a)(this,m.a.ADDFEATURE,function(i){e||(e=!0,t.push(i.feature),e=!1)}),Object(u.a)(this,m.a.REMOVEFEATURE,function(i){e||(e=!0,t.remove(i.feature),e=!1)}),Object(u.a)(t,o.a.ADD,function(t){e||(e=!0,this.addFeature(t.element),e=!1)},this),Object(u.a)(t,o.a.REMOVE,function(t){e||(e=!0,this.removeFeature(t.element),e=!1)},this),this.featuresCollection_=t},e.prototype.clear=function(t){if(t){for(var e in this.featureChangeKeys_){this.featureChangeKeys_[e].forEach(u.e)}this.featuresCollection_||(this.featureChangeKeys_={},this.idIndex_={},this.undefIdIndex_={})}else if(this.featuresRtree_)for(var i in this.featuresRtree_.forEach(this.removeFeatureInternal,this),this.nullGeometryFeatures_)this.removeFeatureInternal(this.nullGeometryFeatures_[i]);this.featuresCollection_&&this.featuresCollection_.clear(),this.featuresRtree_&&this.featuresRtree_.clear(),this.loadedExtentsRtree_.clear(),this.nullGeometryFeatures_={};var n=new E(m.a.CLEAR);this.dispatchEvent(n),this.changed()},e.prototype.forEachFeature=function(t){if(this.featuresRtree_)return this.featuresRtree_.forEach(t);this.featuresCollection_&&this.featuresCollection_.forEach(t)},e.prototype.forEachFeatureAtCoordinateDirect=function(t,e){var i=[t[0],t[1],t[0],t[1]];return this.forEachFeatureInExtent(i,function(i){return i.getGeometry().intersectsCoordinate(t)?e(i):void 0})},e.prototype.forEachFeatureInExtent=function(t,e){if(this.featuresRtree_)return this.featuresRtree_.forEachInExtent(t,e);this.featuresCollection_&&this.featuresCollection_.forEach(e)},e.prototype.forEachFeatureIntersectingExtent=function(t,e){return this.forEachFeatureInExtent(t,function(i){if(i.getGeometry().intersectsExtent(t)){var n=e(i);if(n)return n}})},e.prototype.getFeaturesCollection=function(){return this.featuresCollection_},e.prototype.getFeatures=function(){var t;return this.featuresCollection_?t=this.featuresCollection_.getArray():this.featuresRtree_&&(t=this.featuresRtree_.getAll(),Object(g.d)(this.nullGeometryFeatures_)||Object(a.c)(t,Object(g.c)(this.nullGeometryFeatures_))),t},e.prototype.getFeaturesAtCoordinate=function(t){var e=[];return this.forEachFeatureAtCoordinateDirect(t,function(t){e.push(t)}),e},e.prototype.getFeaturesInExtent=function(t){return this.featuresRtree_.getInExtent(t)},e.prototype.getClosestFeatureToCoordinate=function(t,e){var i=t[0],n=t[1],r=null,o=[NaN,NaN],s=1/0,a=[-1/0,-1/0,1/0,1/0],h=e||f.b;return this.featuresRtree_.forEachInExtent(a,function(t){if(h(t)){var e=t.getGeometry(),u=s;if((s=e.closestPointXY(i,n,o,s))<u){r=t;var c=Math.sqrt(s);a[0]=i-c,a[1]=n-c,a[2]=i+c,a[3]=n+c}}}),r},e.prototype.getExtent=function(t){return this.featuresRtree_.getExtent(t)},e.prototype.getFeatureById=function(t){var e=this.idIndex_[t.toString()];return void 0!==e?e:null},e.prototype.getFormat=function(){return this.format_},e.prototype.getOverlaps=function(){return this.overlaps_},e.prototype.getUrl=function(){return this.url_},e.prototype.handleFeatureChange_=function(t){var e=t.target,i=Object(n.c)(e),r=e.getGeometry();if(r){var o=r.getExtent();i in this.nullGeometryFeatures_?(delete this.nullGeometryFeatures_[i],this.featuresRtree_&&this.featuresRtree_.insert(o,e)):this.featuresRtree_&&this.featuresRtree_.update(o,e)}else i in this.nullGeometryFeatures_||(this.featuresRtree_&&this.featuresRtree_.remove(e),this.nullGeometryFeatures_[i]=e);var s=e.getId();if(void 0!==s){var a=s.toString();i in this.undefIdIndex_?(delete this.undefIdIndex_[i],this.idIndex_[a]=e):this.idIndex_[a]!==e&&(this.removeFromIdIndex_(e),this.idIndex_[a]=e)}else i in this.undefIdIndex_||(this.removeFromIdIndex_(e),this.undefIdIndex_[i]=e);this.changed(),this.dispatchEvent(new E(m.a.CHANGEFEATURE,e))},e.prototype.hasFeature=function(t){var e=t.getId();return void 0!==e?e in this.idIndex_:Object(n.c)(t)in this.undefIdIndex_},e.prototype.isEmpty=function(){return this.featuresRtree_.isEmpty()&&Object(g.d)(this.nullGeometryFeatures_)},e.prototype.loadFeatures=function(t,e,i){var n=this,r=this.loadedExtentsRtree_,o=this.strategy_(t,e);this.loading=!1;for(var s=function(t,s){var a=o[t];r.forEachInExtent(a,function(t){return Object(d.g)(t.extent,a)})||(n.loader_.call(n,a,e,i),r.insert(a,{extent:a.slice()}),n.loading=n.loader_!==f.c)},a=0,h=o.length;a<h;++a)s(a)},e.prototype.removeLoadedExtent=function(t){var e,i=this.loadedExtentsRtree_;i.forEachInExtent(t,function(i){if(Object(d.p)(i.extent,t))return e=i,!0}),e&&i.remove(e)},e.prototype.removeFeature=function(t){var e=Object(n.c)(t);e in this.nullGeometryFeatures_?delete this.nullGeometryFeatures_[e]:this.featuresRtree_&&this.featuresRtree_.remove(t),this.removeFeatureInternal(t),this.changed()},e.prototype.removeFeatureInternal=function(t){var e=Object(n.c)(t);this.featureChangeKeys_[e].forEach(u.e),delete this.featureChangeKeys_[e];var i=t.getId();void 0!==i?delete this.idIndex_[i.toString()]:delete this.undefIdIndex_[e],this.dispatchEvent(new E(m.a.REMOVEFEATURE,t))},e.prototype.removeFromIdIndex_=function(t){var e=!1;for(var i in this.idIndex_)if(this.idIndex_[i]===t){delete this.idIndex_[i],e=!0;break}return e},e.prototype.setLoader=function(t){this.loader_=t},e}(v.a);e.a=O},,function(t,e,i){"use strict";e.a={POSTCOMPOSE:"postcompose",PRECOMPOSE:"precompose",RENDER:"render",RENDERCOMPLETE:"rendercomplete"}},,function(t,e,i){"use strict";i.d(e,"a",function(){return s}),i.d(e,"b",function(){return a}),i.d(e,"c",function(){return h}),i.d(e,"d",function(){return u});var n=i(1),r=i(36),o=i(60);function s(t,e,i,r,s){var a=Object(n.s)(Object(n.j)(),t,e,i,r);return!!Object(n.F)(s,a)&&(!!Object(n.g)(s,a)||(a[0]>=s[0]&&a[2]<=s[2]||(a[1]>=s[1]&&a[3]<=s[3]||Object(o.a)(t,e,i,r,function(t,e){return Object(n.G)(s,t,e)}))))}function a(t,e,i,n,r){for(var o=0,a=i.length;o<a;++o){if(s(t,e,i[o],n,r))return!0;e=i[o]}return!1}function h(t,e,i,n,o){if(!function(t,e,i,n,o){return!!(s(t,e,i,n,o)||Object(r.b)(t,e,i,n,o[0],o[1])||Object(r.b)(t,e,i,n,o[0],o[3])||Object(r.b)(t,e,i,n,o[2],o[1])||Object(r.b)(t,e,i,n,o[2],o[3]))}(t,e,i[0],n,o))return!1;if(1===i.length)return!0;for(var a=1,h=i.length;a<h;++a)if(Object(r.a)(t,i[a-1],i[a],n,o)&&!s(t,i[a-1],i[a],n,o))return!1;return!0}function u(t,e,i,n,r){for(var o=0,s=i.length;o<s;++o){var a=i[o];if(h(t,e,a,n,r))return!0;e=a[a.length-1]}return!1}},,,function(t,e,i){"use strict";function n(t,e,i,n){for(var r=0,o=t[i-n],s=t[i-n+1];e<i;e+=n){var a=t[e],h=t[e+1];r+=s*a-o*h,o=a,s=h}return r/2}function r(t,e,i,r){for(var o=0,s=0,a=i.length;s<a;++s){var h=i[s];o+=n(t,e,h,r),e=h}return o}function o(t,e,i,n){for(var o=0,s=0,a=i.length;s<a;++s){var h=i[s];o+=r(t,e,h,n),e=h[h.length-1]}return o}i.d(e,"a",function(){return n}),i.d(e,"b",function(){return r}),i.d(e,"c",function(){return o})},function(t,e,i){"use strict";i.d(e,"c",function(){return r}),i.d(e,"d",function(){return o}),i.d(e,"a",function(){return s}),i.d(e,"b",function(){return a});var n=i(6);function r(t,e){return void 0!==t?0:void 0}function o(t,e){return void 0!==t?t+e:void 0}function s(t){var e=2*Math.PI/t;return function(t,i){return void 0!==t?t=Math.floor((t+i)/e+.5)*e:void 0}}function a(t){var e=t||Object(n.i)(5);return function(t,i){return void 0!==t?Math.abs(t+i)<=e?0:t+i:void 0}}},function(t,e,i){"use strict";i.r(e),i.d(e,"createStyleFunction",function(){return h});var n=i(9),r=i(4),o=i(2),s=i(12),a=function(t){function e(e){if(t.call(this),this.id_=void 0,this.geometryName_="geometry",this.style_=null,this.styleFunction_=void 0,this.geometryChangeKey_=null,Object(r.a)(this,Object(s.b)(this.geometryName_),this.handleGeometryChanged_,this),e)if("function"==typeof e.getSimplifiedGeometry){var i=e;this.setGeometry(i)}else{var n=e;this.setProperties(n)}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.clone=function(){var t=new e(this.getProperties());t.setGeometryName(this.getGeometryName());var i=this.getGeometry();i&&t.setGeometry(i.clone());var n=this.getStyle();return n&&t.setStyle(n),t},e.prototype.getGeometry=function(){return this.get(this.geometryName_)},e.prototype.getId=function(){return this.id_},e.prototype.getGeometryName=function(){return this.geometryName_},e.prototype.getStyle=function(){return this.style_},e.prototype.getStyleFunction=function(){return this.styleFunction_},e.prototype.handleGeometryChange_=function(){this.changed()},e.prototype.handleGeometryChanged_=function(){this.geometryChangeKey_&&(Object(r.e)(this.geometryChangeKey_),this.geometryChangeKey_=null);var t=this.getGeometry();t&&(this.geometryChangeKey_=Object(r.a)(t,o.a.CHANGE,this.handleGeometryChange_,this)),this.changed()},e.prototype.setGeometry=function(t){this.set(this.geometryName_,t)},e.prototype.setStyle=function(t){this.style_=t,this.styleFunction_=t?h(t):void 0,this.changed()},e.prototype.setId=function(t){this.id_=t,this.changed()},e.prototype.setGeometryName=function(t){Object(r.c)(this,Object(s.b)(this.geometryName_),this.handleGeometryChanged_,this),this.geometryName_=t,Object(r.a)(this,Object(s.b)(this.geometryName_),this.handleGeometryChanged_,this),this.handleGeometryChanged_()},e}(s.a);function h(t){return"function"==typeof t?t:(Array.isArray(t)?e=t:(Object(n.a)("function"==typeof t.getZIndex,41),e=[t]),function(){return e});var e}e.default=a},,,function(t,e,i){"use strict";function n(t,e,i){var n=void 0!==i?t.toFixed(i):""+t,r=n.indexOf(".");return(r=-1===r?n.length:r)>e?n:new Array(1+e-r).join("0")+n}function r(t,e){for(var i=(""+t).split("."),n=(""+e).split("."),r=0;r<Math.max(i.length,n.length);r++){var o=parseInt(i[r]||"0",10),s=parseInt(n[r]||"0",10);if(o>s)return 1;if(s>o)return-1}return 0}i.d(e,"b",function(){return n}),i.d(e,"a",function(){return r})},function(t,e,i){"use strict";var n=i(3),r=i(62),o=i.n(r),s=i(1),a=i(5),h=function(t){this.rbush_=o()(t,void 0),this.items_={}};h.prototype.insert=function(t,e){var i={minX:t[0],minY:t[1],maxX:t[2],maxY:t[3],value:e};this.rbush_.insert(i),this.items_[Object(n.c)(e)]=i},h.prototype.load=function(t,e){for(var i=new Array(e.length),r=0,o=e.length;r<o;r++){var s=t[r],a=e[r],h={minX:s[0],minY:s[1],maxX:s[2],maxY:s[3],value:a};i[r]=h,this.items_[Object(n.c)(a)]=h}this.rbush_.load(i)},h.prototype.remove=function(t){var e=Object(n.c)(t),i=this.items_[e];return delete this.items_[e],null!==this.rbush_.remove(i)},h.prototype.update=function(t,e){var i=this.items_[Object(n.c)(e)],r=[i.minX,i.minY,i.maxX,i.maxY];Object(s.p)(r,t)||(this.remove(e),this.insert(t,e))},h.prototype.getAll=function(){return this.rbush_.all().map(function(t){return t.value})},h.prototype.getInExtent=function(t){var e={minX:t[0],minY:t[1],maxX:t[2],maxY:t[3]};return this.rbush_.search(e).map(function(t){return t.value})},h.prototype.forEach=function(t,e){return this.forEach_(this.getAll(),t,e)},h.prototype.forEachInExtent=function(t,e,i){return this.forEach_(this.getInExtent(t),e,i)},h.prototype.forEach_=function(t,e,i){for(var n,r=0,o=t.length;r<o;r++)if(n=e.call(i,t[r]))return n;return n},h.prototype.isEmpty=function(){return Object(a.d)(this.items_)},h.prototype.clear=function(){this.rbush_.clear(),this.items_={}},h.prototype.getExtent=function(t){var e=this.rbush_.toJSON();return Object(s.k)(e.minX,e.minY,e.maxX,e.maxY,t)},h.prototype.concat=function(t){for(var e in this.rbush_.load(t.rbush_.all()),t.items_)this.items_[e]=t.items_[e]},e.a=h},function(t,e,i){"use strict";e.a={ADDFEATURE:"addfeature",CHANGEFEATURE:"changefeature",CLEAR:"clear",REMOVEFEATURE:"removefeature"}},function(t,e,i){"use strict";var n=i(3),r=i(12),o=i(15),s=i(16),a=function(t){function e(e){t.call(this),this.projection_=Object(o.d)(e.projection),this.attributions_=h(e.attributions),this.attributionsCollapsible_=void 0===e.attributionsCollapsible||e.attributionsCollapsible,this.loading=!1,this.state_=void 0!==e.state?e.state:s.a.READY,this.wrapX_=void 0!==e.wrapX&&e.wrapX}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getAttributions=function(){return this.attributions_},e.prototype.getAttributionsCollapsible=function(){return this.attributionsCollapsible_},e.prototype.getProjection=function(){return this.projection_},e.prototype.getResolutions=function(){return Object(n.b)()},e.prototype.getState=function(){return this.state_},e.prototype.getWrapX=function(){return this.wrapX_},e.prototype.refresh=function(){this.changed()},e.prototype.setAttributions=function(t){this.attributions_=h(t),this.changed()},e.prototype.setState=function(t){this.state_=t,this.changed()},e}(r.a);function h(t){return t?Array.isArray(t)?function(e){return t}:"function"==typeof t?t:function(e){return[t]}:null}e.a=a},,function(t,e,i){"use strict";e.a={OPACITY:"opacity",VISIBLE:"visible",EXTENT:"extent",Z_INDEX:"zIndex",MAX_RESOLUTION:"maxResolution",MIN_RESOLUTION:"minResolution",SOURCE:"source"}},,function(t,e,i){"use strict";var n=i(3),r=i(12),o=i(56),s=i(6),a=i(5),h=function(t){function e(e){t.call(this);var i=Object(a.a)({},e);i[o.a.OPACITY]=void 0!==e.opacity?e.opacity:1,i[o.a.VISIBLE]=void 0===e.visible||e.visible,i[o.a.Z_INDEX]=e.zIndex,i[o.a.MAX_RESOLUTION]=void 0!==e.maxResolution?e.maxResolution:1/0,i[o.a.MIN_RESOLUTION]=void 0!==e.minResolution?e.minResolution:0,this.setProperties(i),this.state_=null,this.type}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getType=function(){return this.type},e.prototype.getLayerState=function(){var t=this.state_||{layer:this,managed:!0};return t.opacity=Object(s.a)(this.getOpacity(),0,1),t.sourceState=this.getSourceState(),t.visible=this.getVisible(),t.extent=this.getExtent(),t.zIndex=this.getZIndex()||0,t.maxResolution=this.getMaxResolution(),t.minResolution=Math.max(this.getMinResolution(),0),this.state_=t,t},e.prototype.getLayersArray=function(t){return Object(n.b)()},e.prototype.getLayerStatesArray=function(t){return Object(n.b)()},e.prototype.getExtent=function(){return this.get(o.a.EXTENT)},e.prototype.getMaxResolution=function(){return this.get(o.a.MAX_RESOLUTION)},e.prototype.getMinResolution=function(){return this.get(o.a.MIN_RESOLUTION)},e.prototype.getOpacity=function(){return this.get(o.a.OPACITY)},e.prototype.getSourceState=function(){return Object(n.b)()},e.prototype.getVisible=function(){return this.get(o.a.VISIBLE)},e.prototype.getZIndex=function(){return this.get(o.a.Z_INDEX)},e.prototype.setExtent=function(t){this.set(o.a.EXTENT,t)},e.prototype.setMaxResolution=function(t){this.set(o.a.MAX_RESOLUTION,t)},e.prototype.setMinResolution=function(t){this.set(o.a.MIN_RESOLUTION,t)},e.prototype.setOpacity=function(t){this.set(o.a.OPACITY,t)},e.prototype.setVisible=function(t){this.set(o.a.VISIBLE,t)},e.prototype.setZIndex=function(t){this.set(o.a.Z_INDEX,t)},e}(r.a);e.a=h},function(t,e,i){"use strict";i.d(e,"a",function(){return o}),i.d(e,"b",function(){return s});var n=i(7),r=i(36);function o(t,e,i,o,s,a,h){for(var u,c,l,d,p,f,_,g=s[a+1],v=[],y=0,m=i.length;y<m;++y){var C=i[y];for(d=t[C-o],f=t[C-o+1],u=e;u<C;u+=o)p=t[u],_=t[u+1],(g<=f&&_<=g||f<=g&&g<=_)&&(l=(g-f)/(_-f)*(p-d)+d,v.push(l)),d=p,f=_}var E=NaN,O=-1/0;for(v.sort(n.i),d=v[0],u=1,c=v.length;u<c;++u){p=v[u];var b=Math.abs(p-d);b>O&&(l=(d+p)/2,Object(r.c)(t,e,i,o,l,g)&&(E=l,O=b)),d=p}return isNaN(E)&&(E=s[a]),h?(h.push(E,g,O),h):[E,g,O]}function s(t,e,i,n,r){for(var s=[],a=0,h=i.length;a<h;++a){var u=i[a];s=o(t,e,u,n,r,2*a,s),e=u[u.length-1]}return s}},function(t,e,i){"use strict";function n(t,e,i,n,r,o){for(var s,a=[t[e],t[e+1]],h=[];e+n<i;e+=n){if(h[0]=t[e+n],h[1]=t[e+n+1],s=r.call(o,a,h))return s;a[0]=h[0],a[1]=h[1]}return!1}i.d(e,"a",function(){return n})},function(t,e,i){"use strict";e.a={IMAGE:"image",VECTOR:"vector"}},function(t,e,i){"use strict";t.exports=r,t.exports.default=r;var n=i(75);function r(t,e){if(!(this instanceof r))return new r(t,e);this._maxEntries=Math.max(4,t||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),e&&this._initFormat(e),this.clear()}function o(t,e,i){if(!i)return e.indexOf(t);for(var n=0;n<e.length;n++)if(i(t,e[n]))return n;return-1}function s(t,e){a(t,0,t.children.length,e,t)}function a(t,e,i,n,r){r||(r=_(null)),r.minX=1/0,r.minY=1/0,r.maxX=-1/0,r.maxY=-1/0;for(var o,s=e;s<i;s++)o=t.children[s],h(r,t.leaf?n(o):o);return r}function h(t,e){return t.minX=Math.min(t.minX,e.minX),t.minY=Math.min(t.minY,e.minY),t.maxX=Math.max(t.maxX,e.maxX),t.maxY=Math.max(t.maxY,e.maxY),t}function u(t,e){return t.minX-e.minX}function c(t,e){return t.minY-e.minY}function l(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function d(t){return t.maxX-t.minX+(t.maxY-t.minY)}function p(t,e){return t.minX<=e.minX&&t.minY<=e.minY&&e.maxX<=t.maxX&&e.maxY<=t.maxY}function f(t,e){return e.minX<=t.maxX&&e.minY<=t.maxY&&e.maxX>=t.minX&&e.maxY>=t.minY}function _(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function g(t,e,i,r,o){for(var s,a=[e,i];a.length;)(i=a.pop())-(e=a.pop())<=r||(s=e+Math.ceil((i-e)/r/2)*r,n(t,s,e,i,o),a.push(e,s,s,i))}r.prototype={all:function(){return this._all(this.data,[])},search:function(t){var e=this.data,i=[],n=this.toBBox;if(!f(t,e))return i;for(var r,o,s,a,h=[];e;){for(r=0,o=e.children.length;r<o;r++)s=e.children[r],f(t,a=e.leaf?n(s):s)&&(e.leaf?i.push(s):p(t,a)?this._all(s,i):h.push(s));e=h.pop()}return i},collides:function(t){var e=this.data,i=this.toBBox;if(!f(t,e))return!1;for(var n,r,o,s,a=[];e;){for(n=0,r=e.children.length;n<r;n++)if(o=e.children[n],f(t,s=e.leaf?i(o):o)){if(e.leaf||p(t,s))return!0;a.push(o)}e=a.pop()}return!1},load:function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var e=0,i=t.length;e<i;e++)this.insert(t[e]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},insert:function(t){return t&&this._insert(t,this.data.height-1),this},clear:function(){return this.data=_([]),this},remove:function(t,e){if(!t)return this;for(var i,n,r,s,a=this.data,h=this.toBBox(t),u=[],c=[];a||u.length;){if(a||(a=u.pop(),n=u[u.length-1],i=c.pop(),s=!0),a.leaf&&-1!==(r=o(t,a.children,e)))return a.children.splice(r,1),u.push(a),this._condense(u),this;s||a.leaf||!p(a,h)?n?(i++,a=n.children[i],s=!1):a=null:(u.push(a),c.push(i),i=0,n=a,a=a.children[0])}return this},toBBox:function(t){return t},compareMinX:u,compareMinY:c,toJSON:function(){return this.data},fromJSON:function(t){return this.data=t,this},_all:function(t,e){for(var i=[];t;)t.leaf?e.push.apply(e,t.children):i.push.apply(i,t.children),t=i.pop();return e},_build:function(t,e,i,n){var r,o=i-e+1,a=this._maxEntries;if(o<=a)return s(r=_(t.slice(e,i+1)),this.toBBox),r;n||(n=Math.ceil(Math.log(o)/Math.log(a)),a=Math.ceil(o/Math.pow(a,n-1))),(r=_([])).leaf=!1,r.height=n;var h,u,c,l,d=Math.ceil(o/a),p=d*Math.ceil(Math.sqrt(a));for(g(t,e,i,p,this.compareMinX),h=e;h<=i;h+=p)for(g(t,h,c=Math.min(h+p-1,i),d,this.compareMinY),u=h;u<=c;u+=d)l=Math.min(u+d-1,c),r.children.push(this._build(t,u,l,n-1));return s(r,this.toBBox),r},_chooseSubtree:function(t,e,i,n){for(var r,o,s,a,h,u,c,d,p,f;n.push(e),!e.leaf&&n.length-1!==i;){for(c=d=1/0,r=0,o=e.children.length;r<o;r++)h=l(s=e.children[r]),p=t,f=s,(u=(Math.max(f.maxX,p.maxX)-Math.min(f.minX,p.minX))*(Math.max(f.maxY,p.maxY)-Math.min(f.minY,p.minY))-h)<d?(d=u,c=h<c?h:c,a=s):u===d&&h<c&&(c=h,a=s);e=a||e.children[0]}return e},_insert:function(t,e,i){var n=this.toBBox,r=i?t:n(t),o=[],s=this._chooseSubtree(r,this.data,e,o);for(s.children.push(t),h(s,r);e>=0&&o[e].children.length>this._maxEntries;)this._split(o,e),e--;this._adjustParentBBoxes(r,o,e)},_split:function(t,e){var i=t[e],n=i.children.length,r=this._minEntries;this._chooseSplitAxis(i,r,n);var o=this._chooseSplitIndex(i,r,n),a=_(i.children.splice(o,i.children.length-o));a.height=i.height,a.leaf=i.leaf,s(i,this.toBBox),s(a,this.toBBox),e?t[e-1].children.push(a):this._splitRoot(i,a)},_splitRoot:function(t,e){this.data=_([t,e]),this.data.height=t.height+1,this.data.leaf=!1,s(this.data,this.toBBox)},_chooseSplitIndex:function(t,e,i){var n,r,o,s,h,u,c,d,p,f,_,g,v,y;for(u=c=1/0,n=e;n<=i-e;n++)r=a(t,0,n,this.toBBox),o=a(t,n,i,this.toBBox),p=r,f=o,_=void 0,g=void 0,v=void 0,y=void 0,_=Math.max(p.minX,f.minX),g=Math.max(p.minY,f.minY),v=Math.min(p.maxX,f.maxX),y=Math.min(p.maxY,f.maxY),s=Math.max(0,v-_)*Math.max(0,y-g),h=l(r)+l(o),s<u?(u=s,d=n,c=h<c?h:c):s===u&&h<c&&(c=h,d=n);return d},_chooseSplitAxis:function(t,e,i){var n=t.leaf?this.compareMinX:u,r=t.leaf?this.compareMinY:c;this._allDistMargin(t,e,i,n)<this._allDistMargin(t,e,i,r)&&t.children.sort(n)},_allDistMargin:function(t,e,i,n){t.children.sort(n);var r,o,s=this.toBBox,u=a(t,0,e,s),c=a(t,i-e,i,s),l=d(u)+d(c);for(r=e;r<i-e;r++)o=t.children[r],h(u,t.leaf?s(o):o),l+=d(u);for(r=i-e-1;r>=e;r--)o=t.children[r],h(c,t.leaf?s(o):o),l+=d(c);return l},_adjustParentBBoxes:function(t,e,i){for(var n=i;n>=0;n--)h(e[n],t)},_condense:function(t){for(var e,i=t.length-1;i>=0;i--)0===t[i].children.length?i>0?(e=t[i-1].children).splice(e.indexOf(t[i]),1):this.clear():s(t[i],this.toBBox)},_initFormat:function(t){var e=["return a"," - b",";"];this.compareMinX=new Function("a","b",e.join(t[0])),this.compareMinY=new Function("a","b",e.join(t[1])),this.toBBox=new Function("a","return {minX: a"+t[0]+", minY: a"+t[1]+", maxX: a"+t[2]+", maxY: a"+t[3]+"};")}}},,,,function(t,e,i){"use strict";function n(t,e,i,n){for(;e<i-n;){for(var r=0;r<n;++r){var o=t[e+r];t[e+r]=t[i-n+r],t[i-n+r]=o}e+=n,i-=n}}function r(t,e,i,n){for(var r=0,o=t[i-n],s=t[i-n+1];e<i;e+=n){var a=t[e],h=t[e+1];r+=(a-o)*(h+s),o=a,s=h}return r>0}function o(t,e,i,n,o){for(var s=void 0!==o&&o,a=0,h=i.length;a<h;++a){var u=i[a],c=r(t,e,u,n);if(0===a){if(s&&c||!s&&!c)return!1}else if(s&&!c||!s&&c)return!1;e=u}return!0}function s(t,e,i,n,r){for(var s=0,a=i.length;s<a;++s)if(!o(t,e,i[s],n,r))return!1;return!0}function a(t,e,i,o,s){for(var a=void 0!==s&&s,h=0,u=i.length;h<u;++h){var c=i[h],l=r(t,e,c,o);(0===h?a&&l||!a&&!l:a&&!l||!a&&l)&&n(t,e,c,o),e=c}return e}function h(t,e,i,n,r){for(var o=0,s=i.length;o<s;++o)e=a(t,e,i[o],n,r);return e}i.d(e,"a",function(){return o}),i.d(e,"b",function(){return s}),i.d(e,"c",function(){return a}),i.d(e,"d",function(){return h})},,,,function(t,e,i){"use strict";var n=function(t,e){this.dispatcher=t,this.mapping_=e};n.prototype.getEvents=function(){return Object.keys(this.mapping_)},n.prototype.getHandlerForEvent=function(t){return this.mapping_[t]},e.a=n},,function(t,e,i){"use strict";var n=i(8),r={ARRAY_BUFFER:"arraybuffer",JSON:"json",TEXT:"text",XML:"xml"};function o(t,e,i,n){return function(o,s,a){var h=new XMLHttpRequest;h.open("GET","function"==typeof t?t(o,s,a):t,!0),e.getType()==r.ARRAY_BUFFER&&(h.responseType="arraybuffer"),h.onload=function(t){if(!h.status||h.status>=200&&h.status<300){var o,s=e.getType();s==r.JSON||s==r.TEXT?o=h.responseText:s==r.XML?(o=h.responseXML)||(o=(new DOMParser).parseFromString(h.responseText,"application/xml")):s==r.ARRAY_BUFFER&&(o=h.response),o?i.call(this,e.readFeatures(o,{featureProjection:a}),e.readProjection(o),e.getLastExtent()):n.call(this)}else n.call(this)}.bind(this),h.onerror=function(){n.call(this)}.bind(this),h.send()}}function s(t,e){return o(t,e,function(t,e){"function"==typeof this.addFeatures&&this.addFeatures(t)},n.c)}i.d(e,"a",function(){return o}),i.d(e,"b",function(){return s})},,,function(t,e,i){t.exports=function(){"use strict";function t(t,e,i){var n=t[e];t[e]=t[i],t[i]=n}function e(t,e){return t<e?-1:t>e?1:0}return function(i,n,r,o,s){!function e(i,n,r,o,s){for(;o>r;){if(o-r>600){var a=o-r+1,h=n-r+1,u=Math.log(a),c=.5*Math.exp(2*u/3),l=.5*Math.sqrt(u*c*(a-c)/a)*(h-a/2<0?-1:1),d=Math.max(r,Math.floor(n-h*c/a+l)),p=Math.min(o,Math.floor(n+(a-h)*c/a+l));e(i,n,d,p,s)}var f=i[n],_=r,g=o;for(t(i,r,n),s(i[o],f)>0&&t(i,r,o);_<g;){for(t(i,_,g),_++,g--;s(i[_],f)<0;)_++;for(;s(i[g],f)>0;)g--}0===s(i[r],f)?t(i,r,g):t(i,++g,o),g<=n&&(r=g+1),n<=g&&(o=g-1)}}(i,n,r||0,o||i.length-1,s||e)}}()},function(t,e,i){"use strict";i.d(e,"a",function(){return r}),i.d(e,"b",function(){return o}),i.d(e,"d",function(){return d});var n=i(70),r=1,o="mouse";function s(t){if(!this.isEventSimulatedFromTouch_(t)){r.toString()in this.pointerMap&&this.cancel(t);var e=d(t,this.dispatcher);this.pointerMap[r.toString()]=t,this.dispatcher.down(e,t)}}function a(t){if(!this.isEventSimulatedFromTouch_(t)){var e=d(t,this.dispatcher);this.dispatcher.move(e,t)}}function h(t){if(!this.isEventSimulatedFromTouch_(t)){var e=this.pointerMap[r.toString()];if(e&&e.button===t.button){var i=d(t,this.dispatcher);this.dispatcher.up(i,t),this.cleanupMouse()}}}function u(t){if(!this.isEventSimulatedFromTouch_(t)){var e=d(t,this.dispatcher);this.dispatcher.enterOver(e,t)}}function c(t){if(!this.isEventSimulatedFromTouch_(t)){var e=d(t,this.dispatcher);this.dispatcher.leaveOut(e,t)}}var l=function(t){function e(e){var i={mousedown:s,mousemove:a,mouseup:h,mouseover:u,mouseout:c};t.call(this,e,i),this.pointerMap=e.pointerMap,this.lastTouches=[]}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.isEventSimulatedFromTouch_=function(t){for(var e=this.lastTouches,i=t.clientX,n=t.clientY,r=0,o=e.length,s=void 0;r<o&&(s=e[r]);r++){var a=Math.abs(i-s[0]),h=Math.abs(n-s[1]);if(a<=25&&h<=25)return!0}return!1},e.prototype.cancel=function(t){var e=d(t,this.dispatcher);this.dispatcher.cancel(e,t),this.cleanupMouse()},e.prototype.cleanupMouse=function(){delete this.pointerMap[r.toString()]},e}(n.a);function d(t,e){var i=e.cloneEvent(t,t),n=i.preventDefault;return i.preventDefault=function(){t.preventDefault(),n()},i.pointerId=r,i.isPrimary=!0,i.pointerType=o,i}e.c=l},,,,,,,,function(t,e,i){"use strict";function n(t,e,i,n){for(var r=t[e],o=t[e+1],s=0,a=e+n;a<i;a+=n){var h=t[a],u=t[a+1];s+=Math.sqrt((h-r)*(h-r)+(u-o)*(u-o)),r=h,o=u}return s}i.d(e,"a",function(){return n})},,,function(t,e,i){"use strict";var n=function(t){function e(e,i,n,r,o){t.call(this,e,i,n.originalEvent,r,o),this.pointerEvent=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(i(88).a);e.a=n},function(t,e,i){"use strict";var n=function(t){function e(e,i,n,r,o){t.call(this,e,i,o),this.originalEvent=n,this.pixel=i.getEventPixel(n),this.coordinate=i.getCoordinateFromPixel(this.pixel),this.dragging=void 0!==r&&r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.preventDefault=function(){t.prototype.preventDefault.call(this),this.originalEvent.preventDefault()},e.prototype.stopPropagation=function(){t.prototype.stopPropagation.call(this),this.originalEvent.stopPropagation()},e}(i(89).a);e.a=n},function(t,e,i){"use strict";var n=function(t){function e(e,i,n){t.call(this,e),this.map=i,this.frameState=void 0!==n?n:null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(i(11).a);e.a=n},,,,,,,,,,,,,,,,,,,,,function(t,e,i){"use strict";i.r(e);var n=i(25),r=function(t,e,i){this.decay_=t,this.minVelocity_=e,this.delay_=i,this.points_=[],this.angle_=0,this.initialVelocity_=0};r.prototype.begin=function(){this.points_.length=0,this.angle_=0,this.initialVelocity_=0},r.prototype.update=function(t,e){this.points_.push(t,e,Date.now())},r.prototype.end=function(){if(this.points_.length<6)return!1;var t=Date.now()-this.delay_,e=this.points_.length-3;if(this.points_[e+2]<t)return!1;for(var i=e-3;i>0&&this.points_[i+2]>t;)i-=3;var n=this.points_[e+2]-this.points_[i+2];if(n<1e3/60)return!1;var r=this.points_[e]-this.points_[i],o=this.points_[e+1]-this.points_[i+1];return this.angle_=Math.atan2(o,r),this.initialVelocity_=Math.sqrt(r*r+o*o)/n,this.initialVelocity_>this.minVelocity_},r.prototype.getDistance=function(){return(this.minVelocity_-this.initialVelocity_)/this.decay_},r.prototype.getAngle=function(){return this.angle_};var o=r,s=i(26),a=i(12),h=i(24),u={ACTIVE:"active"},c=i(6);function l(t,e,i,n){e=t.constrainRotation(e,0),d(t,e,i,n)}function d(t,e,i,n){if(void 0!==e){var r=t.getRotation(),o=t.getCenter();void 0!==r&&o&&n>0?t.animate({rotation:e,anchor:i,duration:n,easing:h.b}):t.rotate(e,i)}}function p(t,e,i,n,r){e=t.constrainResolution(e,0,r),_(t,e,i,n)}function f(t,e,i,n){var r=t.getResolution(),o=t.constrainResolution(r,e,0);if(void 0!==o){var s=t.getResolutions();o=Object(c.a)(o,t.getMinResolution()||s[s.length-1],t.getMaxResolution()||s[0])}if(i&&void 0!==o&&o!==r){var a=t.getCenter(),h=t.calculateCenterZoom(o,i);h=t.constrainCenter(h),i=[(o*a[0]-r*h[0])/(o-r),(o*a[1]-r*h[1])/(o-r)]}_(t,o,i,n)}function _(t,e,i,n){if(e){var r=t.getResolution(),o=t.getCenter();if(void 0!==r&&o&&e!==r&&n)t.animate({resolution:e,anchor:i,duration:n,easing:h.b});else{if(i){var s=t.calculateCenterZoom(e,i);t.setCenter(s)}t.setResolution(e)}}}var g=function(t){function e(e){t.call(this),e.handleEvent&&(this.handleEvent=e.handleEvent),this.map_=null,this.setActive(!0)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getActive=function(){return this.get(u.ACTIVE)},e.prototype.getMap=function(){return this.map_},e.prototype.handleEvent=function(t){return!0},e.prototype.setActive=function(t){this.set(u.ACTIVE,t)},e.prototype.setMap=function(t){this.map_=t},e}(a.a);function v(t){var e=!1;if(t.type==s.a.DBLCLICK){var i=t.originalEvent,n=t.map,r=t.coordinate,o=i.shiftKey?-this.delta_:this.delta_;f(n.getView(),o,r,this.duration_),t.preventDefault(),e=!0}return!e}var y=function(t){function e(e){t.call(this,{handleEvent:v});var i=e||{};this.delta_=i.delta?i.delta:1,this.duration_=void 0!==i.duration?i.duration:250}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(g),m=i(14),C=i(18),E=i(9),O=i(8),b=i(28),x=function(t){var e=t.originalEvent;return e.altKey&&!(e.metaKey||e.ctrlKey)&&!e.shiftKey},R=function(t){var e=t.originalEvent;return e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},F=function(t){return t.target.getTargetElement()===document.activeElement},I=O.b,T=function(t){var e=t.originalEvent;return 0==e.button&&!(b.j&&b.e&&e.ctrlKey)},j=O.a,P=function(t){return"pointermove"==t.type},M=function(t){return t.type==s.a.SINGLECLICK},w=function(t){var e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&!e.shiftKey},N=function(t){var e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},A=function(t){var e=t.originalEvent.target.tagName;return"INPUT"!==e&&"SELECT"!==e&&"TEXTAREA"!==e},D=function(t){var e=t.pointerEvent;return Object(E.a)(void 0!==e,56),"mouse"==e.pointerType},S=function(t){var e=t.pointerEvent;return Object(E.a)(void 0!==e,56),e.isPrimary&&0===e.button},L=i(5);function G(t){for(var e=t.length,i=0,n=0,r=0;r<e;r++)i+=t[r].clientX,n+=t[r].clientY;return[i/e,n/e]}var k=function(t){function e(e){var i=e||{};t.call(this,i),i.handleDownEvent&&(this.handleDownEvent=i.handleDownEvent),i.handleDragEvent&&(this.handleDragEvent=i.handleDragEvent),i.handleMoveEvent&&(this.handleMoveEvent=i.handleMoveEvent),i.handleUpEvent&&(this.handleUpEvent=i.handleUpEvent),i.stopDown&&(this.stopDown=i.stopDown),this.handlingDownUpSequence=!1,this.trackedPointers_={},this.targetPointers=[]}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleDownEvent=function(t){return!1},e.prototype.handleDragEvent=function(t){},e.prototype.handleEvent=function(t){if(!t.pointerEvent)return!0;var e=!1;if(this.updateTrackedPointers_(t),this.handlingDownUpSequence){if(t.type==s.a.POINTERDRAG)this.handleDragEvent(t);else if(t.type==s.a.POINTERUP){var i=this.handleUpEvent(t);this.handlingDownUpSequence=i&&this.targetPointers.length>0}}else if(t.type==s.a.POINTERDOWN){var n=this.handleDownEvent(t);n&&t.preventDefault(),this.handlingDownUpSequence=n,e=this.stopDown(n)}else t.type==s.a.POINTERMOVE&&this.handleMoveEvent(t);return!e},e.prototype.handleMoveEvent=function(t){},e.prototype.handleUpEvent=function(t){return!1},e.prototype.stopDown=function(t){return t},e.prototype.updateTrackedPointers_=function(t){if(function(t){var e=t.type;return e===s.a.POINTERDOWN||e===s.a.POINTERDRAG||e===s.a.POINTERUP}(t)){var e=t.pointerEvent,i=e.pointerId.toString();t.type==s.a.POINTERUP?delete this.trackedPointers_[i]:t.type==s.a.POINTERDOWN?this.trackedPointers_[i]=e:i in this.trackedPointers_&&(this.trackedPointers_[i]=e),this.targetPointers=Object(L.c)(this.trackedPointers_)}},e}(g),Y=function(t){function e(e){t.call(this,{stopDown:O.a});var i=e||{};this.kinetic_=i.kinetic,this.lastCentroid=null,this.lastPointersCount_,this.panning_=!1,this.condition_=i.condition?i.condition:w,this.noKinetic_=!1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleDragEvent=function(t){this.panning_||(this.panning_=!0,this.getMap().getView().setHint(m.a.INTERACTING,1));var e=this.targetPointers,i=G(e);if(e.length==this.lastPointersCount_){if(this.kinetic_&&this.kinetic_.update(i[0],i[1]),this.lastCentroid){var n=this.lastCentroid[0]-i[0],r=i[1]-this.lastCentroid[1],o=t.map.getView(),s=[n,r];Object(C.g)(s,o.getResolution()),Object(C.f)(s,o.getRotation()),Object(C.a)(s,o.getCenter()),s=o.constrainCenter(s),o.setCenter(s)}}else this.kinetic_&&this.kinetic_.begin();this.lastCentroid=i,this.lastPointersCount_=e.length},e.prototype.handleUpEvent=function(t){var e=t.map,i=e.getView();if(0===this.targetPointers.length){if(!this.noKinetic_&&this.kinetic_&&this.kinetic_.end()){var n=this.kinetic_.getDistance(),r=this.kinetic_.getAngle(),o=i.getCenter(),s=e.getPixelFromCoordinate(o),a=e.getCoordinateFromPixel([s[0]-n*Math.cos(r),s[1]-n*Math.sin(r)]);i.animate({center:i.constrainCenter(a),duration:500,easing:h.b})}return this.panning_&&(this.panning_=!1,i.setHint(m.a.INTERACTING,-1)),!1}return this.kinetic_&&this.kinetic_.begin(),this.lastCentroid=null,!0},e.prototype.handleDownEvent=function(t){if(this.targetPointers.length>0&&this.condition_(t)){var e=t.map.getView();return this.lastCentroid=null,e.getAnimating()&&e.setCenter(t.frameState.viewState.center),this.kinetic_&&this.kinetic_.begin(),this.noKinetic_=this.targetPointers.length>1,!0}return!1},e}(k),X=i(47),V=function(t){function e(e){var i=e||{};t.call(this,{stopDown:O.a}),this.condition_=i.condition?i.condition:R,this.lastAngle_=void 0,this.duration_=void 0!==i.duration?i.duration:250}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleDragEvent=function(t){if(D(t)){var e=t.map,i=e.getView();if(i.getConstraints().rotation!==X.c){var n=e.getSize(),r=t.pixel,o=Math.atan2(n[1]/2-r[1],r[0]-n[0]/2);if(void 0!==this.lastAngle_){var s=o-this.lastAngle_,a=i.getRotation();d(i,a-s)}this.lastAngle_=o}}},e.prototype.handleUpEvent=function(t){if(!D(t))return!0;var e=t.map.getView();e.setHint(m.a.INTERACTING,-1);var i=e.getRotation();return l(e,i,void 0,this.duration_),!1},e.prototype.handleDownEvent=function(t){return!!D(t)&&(!(!T(t)||!this.condition_(t))&&(t.map.getView().setHint(m.a.INTERACTING,1),this.lastAngle_=void 0,!0))},e}(k),U=i(1),B=i(11),K=i(57),q=i(31),H=function(t){function e(e){t.call(this),this.geometry_=null,this.element_=document.createElement("div"),this.element_.style.position="absolute",this.element_.className="ol-box "+e,this.map_=null,this.startPixel_=null,this.endPixel_=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.disposeInternal=function(){this.setMap(null)},e.prototype.render_=function(){var t=this.startPixel_,e=this.endPixel_,i=this.element_.style;i.left=Math.min(t[0],e[0])+"px",i.top=Math.min(t[1],e[1])+"px",i.width=Math.abs(e[0]-t[0])+"px",i.height=Math.abs(e[1]-t[1])+"px"},e.prototype.setMap=function(t){if(this.map_){this.map_.getOverlayContainer().removeChild(this.element_);var e=this.element_.style;e.left=e.top=e.width=e.height="inherit"}this.map_=t,this.map_&&this.map_.getOverlayContainer().appendChild(this.element_)},e.prototype.setPixels=function(t,e){this.startPixel_=t,this.endPixel_=e,this.createOrUpdateGeometry(),this.render_()},e.prototype.createOrUpdateGeometry=function(){var t=this.startPixel_,e=this.endPixel_,i=[t,[t[0],e[1]],e,[e[0],t[1]]].map(this.map_.getCoordinateFromPixel,this.map_);i[4]=i[0].slice(),this.geometry_?this.geometry_.setCoordinates([i]):this.geometry_=new q.b([i])},e.prototype.getGeometry=function(){return this.geometry_},e}(K.a),W="boxstart",Z="boxdrag",z="boxend",J=function(t){function e(e,i,n){t.call(this,e),this.coordinate=i,this.mapBrowserEvent=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(B.a),Q=function(t){function e(e){t.call(this);var i=e||{};this.box_=new H(i.className||"ol-dragbox"),this.minArea_=void 0!==i.minArea?i.minArea:64,this.onBoxEnd_=i.onBoxEnd?i.onBoxEnd:O.c,this.startPixel_=null,this.condition_=i.condition?i.condition:I,this.boxEndCondition_=i.boxEndCondition?i.boxEndCondition:this.defaultBoxEndCondition}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.defaultBoxEndCondition=function(t,e,i){var n=i[0]-e[0],r=i[1]-e[1];return n*n+r*r>=this.minArea_},e.prototype.getGeometry=function(){return this.box_.getGeometry()},e.prototype.handleDragEvent=function(t){D(t)&&(this.box_.setPixels(this.startPixel_,t.pixel),this.dispatchEvent(new J(Z,t.coordinate,t)))},e.prototype.handleUpEvent=function(t){return!D(t)||(this.box_.setMap(null),this.boxEndCondition_(t,this.startPixel_,t.pixel)&&(this.onBoxEnd_(t),this.dispatchEvent(new J(z,t.coordinate,t))),!1)},e.prototype.handleDownEvent=function(t){return!!D(t)&&(!(!T(t)||!this.condition_(t))&&(this.startPixel_=t.pixel,this.box_.setMap(t.map),this.box_.setPixels(this.startPixel_,this.startPixel_),this.dispatchEvent(new J(W,t.coordinate,t)),!0))},e}(k);function $(){var t=this.getMap(),e=t.getView(),i=t.getSize(),n=this.getGeometry().getExtent();if(this.out_){var r=e.calculateExtent(i),o=Object(U.n)([t.getPixelFromCoordinate(Object(U.v)(n)),t.getPixelFromCoordinate(Object(U.D)(n))]),s=e.getResolutionForExtent(o,i);Object(U.J)(r,1/s),n=r}var a=e.constrainResolution(e.getResolutionForExtent(n,i)),u=Object(U.x)(n);u=e.constrainCenter(u),e.animate({resolution:a,center:u,duration:this.duration_,easing:h.b})}var tt=function(t){function e(e){var i=e||{},n=i.condition?i.condition:N;t.call(this,{condition:n,className:i.className||"ol-dragzoom",onBoxEnd:$}),this.duration_=void 0!==i.duration?i.duration:200,this.out_=void 0!==i.out&&i.out}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Q),et=i(2),it={LEFT:37,UP:38,RIGHT:39,DOWN:40};function nt(t){var e=!1;if(t.type==et.a.KEYDOWN){var i=t.originalEvent.keyCode;if(this.condition_(t)&&(i==it.DOWN||i==it.LEFT||i==it.RIGHT||i==it.UP)){var n=t.map.getView(),r=n.getResolution()*this.pixelDelta_,o=0,s=0;i==it.DOWN?s=-r:i==it.LEFT?o=-r:i==it.RIGHT?o=r:s=r;var a=[o,s];Object(C.f)(a,n.getRotation()),function(t,e,i){var n=t.getCenter();if(n){var r=t.constrainCenter([n[0]+e[0],n[1]+e[1]]);i?t.animate({duration:i,easing:h.d,center:r}):t.setCenter(r)}}(n,a,this.duration_),t.preventDefault(),e=!0}}return!e}var rt=function(t){function e(e){t.call(this,{handleEvent:nt});var i=e||{};this.defaultCondition_=function(t){return w(t)&&A(t)},this.condition_=void 0!==i.condition?i.condition:this.defaultCondition_,this.duration_=void 0!==i.duration?i.duration:100,this.pixelDelta_=void 0!==i.pixelDelta?i.pixelDelta:128}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(g);function ot(t){var e=!1;if(t.type==et.a.KEYDOWN||t.type==et.a.KEYPRESS){var i=t.originalEvent.charCode;if(this.condition_(t)&&(i=="+".charCodeAt(0)||i=="-".charCodeAt(0))){var n=t.map,r=i=="+".charCodeAt(0)?this.delta_:-this.delta_;f(n.getView(),r,void 0,this.duration_),t.preventDefault(),e=!0}}return!e}var st=function(t){function e(e){t.call(this,{handleEvent:ot});var i=e||{};this.condition_=i.condition?i.condition:A,this.delta_=i.delta?i.delta:1,this.duration_=void 0!==i.duration?i.duration:100}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(g),at="trackpad",ht="wheel",ut=function(t){function e(e){var i=e||{};t.call(this,i),this.delta_=0,this.duration_=void 0!==i.duration?i.duration:250,this.timeout_=void 0!==i.timeout?i.timeout:80,this.useAnchor_=void 0===i.useAnchor||i.useAnchor,this.constrainResolution_=i.constrainResolution||!1,this.condition_=i.condition?i.condition:I,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_,this.mode_=void 0,this.trackpadEventGap_=400,this.trackpadTimeoutId_,this.trackpadDeltaPerZoom_=300,this.trackpadZoomBuffer_=1.5}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.decrementInteractingHint_=function(){this.trackpadTimeoutId_=void 0,this.getMap().getView().setHint(m.a.INTERACTING,-1)},e.prototype.handleEvent=function(t){if(!this.condition_(t))return!0;var e=t.type;if(e!==et.a.WHEEL&&e!==et.a.MOUSEWHEEL)return!0;t.preventDefault();var i,n=t.map,r=t.originalEvent;if(this.useAnchor_&&(this.lastAnchor_=t.coordinate),t.type==et.a.WHEEL?(i=r.deltaY,b.c&&r.deltaMode===WheelEvent.DOM_DELTA_PIXEL&&(i/=b.b),r.deltaMode===WheelEvent.DOM_DELTA_LINE&&(i*=40)):t.type==et.a.MOUSEWHEEL&&(i=-r.wheelDeltaY,b.h&&(i/=3)),0===i)return!1;var o=Date.now();if(void 0===this.startTime_&&(this.startTime_=o),(!this.mode_||o-this.startTime_>this.trackpadEventGap_)&&(this.mode_=Math.abs(i)<4?at:ht),this.mode_===at){var s=n.getView();this.trackpadTimeoutId_?clearTimeout(this.trackpadTimeoutId_):s.setHint(m.a.INTERACTING,1),this.trackpadTimeoutId_=setTimeout(this.decrementInteractingHint_.bind(this),this.trackpadEventGap_);var a=s.getResolution()*Math.pow(2,i/this.trackpadDeltaPerZoom_),u=s.getMinResolution(),c=s.getMaxResolution(),l=0;if(a<u?(a=Math.max(a,u/this.trackpadZoomBuffer_),l=1):a>c&&(a=Math.min(a,c*this.trackpadZoomBuffer_),l=-1),this.lastAnchor_){var d=s.calculateCenterZoom(a,this.lastAnchor_);s.setCenter(s.constrainCenter(d))}return s.setResolution(a),0===l&&this.constrainResolution_&&s.animate({resolution:s.constrainResolution(a,i>0?-1:1),easing:h.b,anchor:this.lastAnchor_,duration:this.duration_}),l>0?s.animate({resolution:u,easing:h.b,anchor:this.lastAnchor_,duration:500}):l<0&&s.animate({resolution:c,easing:h.b,anchor:this.lastAnchor_,duration:500}),this.startTime_=o,!1}this.delta_+=i;var p=Math.max(this.timeout_-(o-this.startTime_),0);return clearTimeout(this.timeoutId_),this.timeoutId_=setTimeout(this.handleWheelZoom_.bind(this,n),p),!1},e.prototype.handleWheelZoom_=function(t){var e=t.getView();e.getAnimating()&&e.cancelAnimations();f(e,-Object(c.a)(this.delta_,-1,1),this.lastAnchor_,this.duration_),this.mode_=void 0,this.delta_=0,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_=void 0},e.prototype.setMouseAnchor=function(t){this.useAnchor_=t,t||(this.lastAnchor_=null)},e}(g),ct=function(t){function e(e){var i=e||{},n=i;n.stopDown||(n.stopDown=O.a),t.call(this,n),this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.threshold_=void 0!==i.threshold?i.threshold:.3,this.duration_=void 0!==i.duration?i.duration:250}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleDragEvent=function(t){var e=0,i=this.targetPointers[0],n=this.targetPointers[1],r=Math.atan2(n.clientY-i.clientY,n.clientX-i.clientX);if(void 0!==this.lastAngle_){var o=r-this.lastAngle_;this.rotationDelta_+=o,!this.rotating_&&Math.abs(this.rotationDelta_)>this.threshold_&&(this.rotating_=!0),e=o}this.lastAngle_=r;var s=t.map,a=s.getView();if(a.getConstraints().rotation!==X.c){var h=s.getViewport().getBoundingClientRect(),u=G(this.targetPointers);if(u[0]-=h.left,u[1]-=h.top,this.anchor_=s.getCoordinateFromPixel(u),this.rotating_){var c=a.getRotation();s.render(),d(a,c+e,this.anchor_)}}},e.prototype.handleUpEvent=function(t){if(this.targetPointers.length<2){var e=t.map.getView();if(e.setHint(m.a.INTERACTING,-1),this.rotating_){var i=e.getRotation();l(e,i,this.anchor_,this.duration_)}return!1}return!0},e.prototype.handleDownEvent=function(t){if(this.targetPointers.length>=2){var e=t.map;return this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.handlingDownUpSequence||e.getView().setHint(m.a.INTERACTING,1),!0}return!1},e}(k),lt=function(t){function e(e){var i=e||{},n=i;n.stopDown||(n.stopDown=O.a),t.call(this,n),this.constrainResolution_=i.constrainResolution||!1,this.anchor_=null,this.duration_=void 0!==i.duration?i.duration:400,this.lastDistance_=void 0,this.lastScaleDelta_=1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleDragEvent=function(t){var e=1,i=this.targetPointers[0],n=this.targetPointers[1],r=i.clientX-n.clientX,o=i.clientY-n.clientY,s=Math.sqrt(r*r+o*o);void 0!==this.lastDistance_&&(e=this.lastDistance_/s),this.lastDistance_=s;var a=t.map,h=a.getView(),u=h.getResolution(),c=h.getMaxResolution(),l=h.getMinResolution(),d=u*e;d>c?(e=c/u,d=c):d<l&&(e=l/u,d=l),1!=e&&(this.lastScaleDelta_=e);var p=a.getViewport().getBoundingClientRect(),f=G(this.targetPointers);f[0]-=p.left,f[1]-=p.top,this.anchor_=a.getCoordinateFromPixel(f),a.render(),_(h,d,this.anchor_)},e.prototype.handleUpEvent=function(t){if(this.targetPointers.length<2){var e=t.map.getView();e.setHint(m.a.INTERACTING,-1);var i=e.getResolution();if(this.constrainResolution_||i<e.getMinResolution()||i>e.getMaxResolution()){var n=this.lastScaleDelta_-1;p(e,i,this.anchor_,this.duration_,n)}return!1}return!0},e.prototype.handleDownEvent=function(t){if(this.targetPointers.length>=2){var e=t.map;return this.anchor_=null,this.lastDistance_=void 0,this.lastScaleDelta_=1,this.handlingDownUpSequence||e.getView().setHint(m.a.INTERACTING,1),!0}return!1},e}(k),dt=i(4),pt=i(15),ft="addfeatures",_t=function(t){function e(e,i,n,r){t.call(this,e),this.features=n,this.file=i,this.projection=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(B.a);function gt(t){for(var e=t.dataTransfer.files,i=0,n=e.length;i<n;++i){var r=e.item(i),o=new FileReader;o.addEventListener(et.a.LOAD,this.handleResult_.bind(this,r)),o.readAsText(r)}}function vt(t){t.stopPropagation(),t.preventDefault(),t.dataTransfer.dropEffect="copy"}var yt=function(t){function e(e){var i=e||{};t.call(this,{handleEvent:O.b}),this.formatConstructors_=i.formatConstructors?i.formatConstructors:[],this.projection_=i.projection?Object(pt.d)(i.projection):null,this.dropListenKeys_=null,this.source_=i.source||null,this.target=i.target?i.target:null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleResult_=function(t,e){var i=e.target.result,n=this.getMap(),r=this.projection_;r||(r=n.getView().getProjection());for(var o=this.formatConstructors_,s=[],a=0,h=o.length;a<h;++a){var u=new o[a];if((s=this.tryReadFeatures_(u,i,{featureProjection:r}))&&s.length>0)break}this.source_&&(this.source_.clear(),this.source_.addFeatures(s)),this.dispatchEvent(new _t(ft,t,s,r))},e.prototype.registerListeners_=function(){var t=this.getMap();if(t){var e=this.target?this.target:t.getViewport();this.dropListenKeys_=[Object(dt.a)(e,et.a.DROP,gt,this),Object(dt.a)(e,et.a.DRAGENTER,vt,this),Object(dt.a)(e,et.a.DRAGOVER,vt,this),Object(dt.a)(e,et.a.DROP,vt,this)]}},e.prototype.setActive=function(e){t.prototype.setActive.call(this,e),e?this.registerListeners_():this.unregisterListeners_()},e.prototype.setMap=function(e){this.unregisterListeners_(),t.prototype.setMap.call(this,e),this.getActive()&&this.registerListeners_()},e.prototype.tryReadFeatures_=function(t,e,i){try{return t.readFeatures(e,i)}catch(t){return null}},e.prototype.unregisterListeners_=function(){this.dropListenKeys_&&(this.dropListenKeys_.forEach(dt.e),this.dropListenKeys_=null)},e}(g),mt=function(t){function e(e){var i=e||{};t.call(this,i),this.condition_=i.condition?i.condition:N,this.lastAngle_=void 0,this.lastMagnitude_=void 0,this.lastScaleDelta_=0,this.duration_=void 0!==i.duration?i.duration:400}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleDragEvent=function(t){if(D(t)){var e=t.map,i=e.getSize(),n=t.pixel,r=n[0]-i[0]/2,o=i[1]/2-n[1],s=Math.atan2(o,r),a=Math.sqrt(r*r+o*o),h=e.getView();if(h.getConstraints().rotation!==X.c&&void 0!==this.lastAngle_){var u=s-this.lastAngle_;d(h,h.getRotation()-u)}if(this.lastAngle_=s,void 0!==this.lastMagnitude_){var c=this.lastMagnitude_*(h.getResolution()/a);_(h,c)}void 0!==this.lastMagnitude_&&(this.lastScaleDelta_=this.lastMagnitude_/a),this.lastMagnitude_=a}},e.prototype.handleUpEvent=function(t){if(!D(t))return!0;var e=t.map.getView();e.setHint(m.a.INTERACTING,-1);var i=this.lastScaleDelta_-1;return l(e,e.getRotation()),p(e,e.getResolution(),void 0,this.duration_,i),this.lastScaleDelta_=0,!1},e.prototype.handleDownEvent=function(t){return!!D(t)&&(!!this.condition_(t)&&(t.map.getView().setHint(m.a.INTERACTING,1),this.lastAngle_=void 0,this.lastMagnitude_=void 0,!0))},e}(k),Ct=i(48),Et=i(87),Ot=i(10),bt=i(20),xt=i(23),Rt=function(t){function e(e,i,n){if(t.call(this),void 0!==n&&void 0===i)this.setFlatCoordinates(n,e);else{var r=i||0;this.setCenterAndRadius(e,r,n)}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),void 0,this.layout)},e.prototype.closestPointXY=function(t,e,i,n){var r=this.flatCoordinates,o=t-r[0],s=e-r[1],a=o*o+s*s;if(a<n){if(0===a)for(var h=0;h<this.stride;++h)i[h]=r[h];else{var u=this.getRadius()/Math.sqrt(a);i[0]=r[0]+u*o,i[1]=r[1]+u*s;for(var c=2;c<this.stride;++c)i[c]=r[c]}return i.length=this.stride,a}return n},e.prototype.containsXY=function(t,e){var i=this.flatCoordinates,n=t-i[0],r=e-i[1];return n*n+r*r<=this.getRadiusSquared_()},e.prototype.getCenter=function(){return this.flatCoordinates.slice(0,this.stride)},e.prototype.computeExtent=function(t){var e=this.flatCoordinates,i=e[this.stride]-e[0];return Object(U.k)(e[0]-i,e[1]-i,e[0]+i,e[1]+i,t)},e.prototype.getRadius=function(){return Math.sqrt(this.getRadiusSquared_())},e.prototype.getRadiusSquared_=function(){var t=this.flatCoordinates[this.stride]-this.flatCoordinates[0],e=this.flatCoordinates[this.stride+1]-this.flatCoordinates[1];return t*t+e*e},e.prototype.getType=function(){return Ot.a.CIRCLE},e.prototype.intersectsExtent=function(t){var e=this.getExtent();if(Object(U.F)(t,e)){var i=this.getCenter();return t[0]<=i[0]&&t[2]>=i[0]||(t[1]<=i[1]&&t[3]>=i[1]||Object(U.t)(t,this.intersectsCoordinate,this))}return!1},e.prototype.setCenter=function(t){var e=this.stride,i=this.flatCoordinates[e]-this.flatCoordinates[0],n=t.slice();n[e]=n[0]+i;for(var r=1;r<e;++r)n[e+r]=t[r];this.setFlatCoordinates(this.layout,n),this.changed()},e.prototype.setCenterAndRadius=function(t,e,i){this.setLayout(i,t,0),this.flatCoordinates||(this.flatCoordinates=[]);var n=this.flatCoordinates,r=Object(xt.a)(n,0,t,this.stride);n[r++]=n[0]+e;for(var o=1,s=this.stride;o<s;++o)n[r++]=n[o];n.length=r,this.changed()},e.prototype.getCoordinates=function(){return null},e.prototype.setCoordinates=function(t,e){},e.prototype.setRadius=function(t){this.flatCoordinates[this.stride]=this.flatCoordinates[0]+t,this.changed()},e}(bt.a);Rt.prototype.transform;var Ft=Rt,It=i(7),Tt=i(37),jt=i(33),Pt=i(22);function Mt(t,e,i,n,r,o){var s=NaN,a=NaN,h=(i-e)/n;if(1===h)s=t[e],a=t[e+1];else if(2==h)s=(1-r)*t[e]+r*t[e+n],a=(1-r)*t[e+1]+r*t[e+n+1];else if(0!==h){for(var u=t[e],l=t[e+1],d=0,p=[0],f=e+n;f<i;f+=n){var _=t[f],g=t[f+1];d+=Math.sqrt((_-u)*(_-u)+(g-l)*(g-l)),p.push(d),u=_,l=g}var v=r*d,y=Object(It.a)(p,v);if(y<0){var m=(v-p[-y-2])/(p[-y-1]-p[-y-2]),C=e+(-y-2)*n;s=Object(c.c)(t[C],t[C+n],m),a=Object(c.c)(t[C+1],t[C+n+1],m)}else s=t[e+y*n],a=t[e+y*n+1]}return o?(o[0]=s,o[1]=a,o):[s,a]}function wt(t,e,i,n,r,o){if(i==e)return null;var s;if(r<t[e+n-1])return o?((s=t.slice(e,e+n))[n-1]=r,s):null;if(t[i-1]<r)return o?((s=t.slice(i-n,i))[n-1]=r,s):null;if(r==t[e+n-1])return t.slice(e,e+n);for(var a=e/n,h=i/n;a<h;){var u=a+h>>1;r<t[(u+1)*n-1]?h=u:a=u+1}var l=t[a*n-1];if(r==l)return t.slice((a-1)*n,(a-1)*n+n);var d=(r-l)/(t[(a+1)*n-1]-l);s=[];for(var p=0;p<n-1;++p)s.push(Object(c.c)(t[(a-1)*n+p],t[a*n+p],d));return s.push(r),s}var Nt=i(43),At=i(84),Dt=i(60),St=i(27),Lt=function(t){function e(e,i){t.call(this),this.flatMidpoint_=null,this.flatMidpointRevision_=-1,this.maxDelta_=-1,this.maxDeltaRevision_=-1,void 0===i||Array.isArray(e[0])?this.setCoordinates(e,i):this.setFlatCoordinates(i,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.appendCoordinate=function(t){this.flatCoordinates?Object(It.c)(this.flatCoordinates,t):this.flatCoordinates=t.slice(),this.changed()},e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout)},e.prototype.closestPointXY=function(t,e,i,n){return n<Object(U.e)(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(Object(jt.e)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),Object(jt.d)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!1,t,e,i,n))},e.prototype.forEachSegment=function(t){return Object(Dt.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t)},e.prototype.getCoordinateAtM=function(t,e){if(this.layout!=Tt.a.XYM&&this.layout!=Tt.a.XYZM)return null;var i=void 0!==e&&e;return wt(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,i)},e.prototype.getCoordinates=function(){return Object(Pt.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getCoordinateAt=function(t,e){return Mt(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,e)},e.prototype.getLength=function(){return Object(At.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getFlatMidpoint=function(){return this.flatMidpointRevision_!=this.getRevision()&&(this.flatMidpoint_=this.getCoordinateAt(.5,this.flatMidpoint_),this.flatMidpointRevision_=this.getRevision()),this.flatMidpoint_},e.prototype.getSimplifiedGeometryInternal=function(t){var i=[];return i.length=Object(St.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,i,0),new e(i,Tt.a.XY)},e.prototype.getType=function(){return Ot.a.LINE_STRING},e.prototype.intersectsExtent=function(t){return Object(Nt.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t)},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=Object(xt.b)(this.flatCoordinates,0,t,this.stride),this.changed()},e}(bt.a),Gt=function(t){function e(e,i,n){if(t.call(this),this.ends_=[],this.maxDelta_=-1,this.maxDeltaRevision_=-1,Array.isArray(e[0]))this.setCoordinates(e,i);else if(void 0!==i&&n)this.setFlatCoordinates(i,e),this.ends_=n;else{for(var r=this.getLayout(),o=e,s=[],a=[],h=0,u=o.length;h<u;++h){var c=o[h];0===h&&(r=c.getLayout()),Object(It.c)(s,c.getFlatCoordinates()),a.push(s.length)}this.setFlatCoordinates(r,s),this.ends_=a}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.appendLineString=function(t){this.flatCoordinates?Object(It.c)(this.flatCoordinates,t.getFlatCoordinates().slice()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.ends_.push(this.flatCoordinates.length),this.changed()},e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout,this.ends_.slice())},e.prototype.closestPointXY=function(t,e,i,n){return n<Object(U.e)(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(Object(jt.a)(this.flatCoordinates,0,this.ends_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),Object(jt.b)(this.flatCoordinates,0,this.ends_,this.stride,this.maxDelta_,!1,t,e,i,n))},e.prototype.getCoordinateAtM=function(t,e,i){if(this.layout!=Tt.a.XYM&&this.layout!=Tt.a.XYZM||0===this.flatCoordinates.length)return null;var n=void 0!==e&&e,r=void 0!==i&&i;return function(t,e,i,n,r,o,s){if(s)return wt(t,e,i[i.length-1],n,r,o);var a;if(r<t[n-1])return o?((a=t.slice(0,n))[n-1]=r,a):null;if(t[t.length-1]<r)return o?((a=t.slice(t.length-n))[n-1]=r,a):null;for(var h=0,u=i.length;h<u;++h){var c=i[h];if(e!=c){if(r<t[e+n-1])return null;if(r<=t[c-1])return wt(t,e,c,n,r,!1);e=c}}return null}(this.flatCoordinates,0,this.ends_,this.stride,t,n,r)},e.prototype.getCoordinates=function(){return Object(Pt.b)(this.flatCoordinates,0,this.ends_,this.stride)},e.prototype.getEnds=function(){return this.ends_},e.prototype.getLineString=function(t){return t<0||this.ends_.length<=t?null:new Lt(this.flatCoordinates.slice(0===t?0:this.ends_[t-1],this.ends_[t]),this.layout)},e.prototype.getLineStrings=function(){for(var t=this.flatCoordinates,e=this.ends_,i=this.layout,n=[],r=0,o=0,s=e.length;o<s;++o){var a=e[o],h=new Lt(t.slice(r,a),i);n.push(h),r=a}return n},e.prototype.getFlatMidpoints=function(){for(var t=[],e=this.flatCoordinates,i=0,n=this.ends_,r=this.stride,o=0,s=n.length;o<s;++o){var a=n[o],h=Mt(e,i,a,r,.5);Object(It.c)(t,h),i=a}return t},e.prototype.getSimplifiedGeometryInternal=function(t){var i=[],n=[];return i.length=Object(St.b)(this.flatCoordinates,0,this.ends_,this.stride,t,i,0,n),new e(i,Tt.a.XY,n)},e.prototype.getType=function(){return Ot.a.MULTI_LINE_STRING},e.prototype.intersectsExtent=function(t){return Object(Nt.b)(this.flatCoordinates,0,this.ends_,this.stride,t)},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,2),this.flatCoordinates||(this.flatCoordinates=[]);var i=Object(xt.c)(this.flatCoordinates,0,t,this.stride,this.ends_);this.flatCoordinates.length=0===i.length?0:i[i.length-1],this.changed()},e}(bt.a),kt=i(42),Yt=function(t){function e(e,i){t.call(this),i&&!Array.isArray(e[0])?this.setFlatCoordinates(i,e):this.setCoordinates(e,i)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.appendPoint=function(t){this.flatCoordinates?Object(It.c)(this.flatCoordinates,t.getFlatCoordinates()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.changed()},e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout)},e.prototype.closestPointXY=function(t,e,i,n){if(n<Object(U.e)(this.getExtent(),t,e))return n;for(var r=this.flatCoordinates,o=this.stride,s=0,a=r.length;s<a;s+=o){var h=Object(c.f)(t,e,r[s],r[s+1]);if(h<n){n=h;for(var u=0;u<o;++u)i[u]=r[s+u];i.length=o}}return n},e.prototype.getCoordinates=function(){return Object(Pt.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getPoint=function(t){var e=this.flatCoordinates?this.flatCoordinates.length/this.stride:0;return t<0||e<=t?null:new kt.default(this.flatCoordinates.slice(t*this.stride,(t+1)*this.stride),this.layout)},e.prototype.getPoints=function(){for(var t=this.flatCoordinates,e=this.layout,i=this.stride,n=[],r=0,o=t.length;r<o;r+=i){var s=new kt.default(t.slice(r,r+i),e);n.push(s)}return n},e.prototype.getType=function(){return Ot.a.MULTI_POINT},e.prototype.intersectsExtent=function(t){for(var e=this.flatCoordinates,i=this.stride,n=0,r=e.length;n<r;n+=i){var o=e[n],s=e[n+1];if(Object(U.h)(t,o,s))return!0}return!1},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=Object(xt.b)(this.flatCoordinates,0,t,this.stride),this.changed()},e}(bt.a),Xt=i(46);var Vt=i(36),Ut=i(59),Bt=i(66),Kt=function(t){function e(e,i,n){if(t.call(this),this.endss_=[],this.flatInteriorPointsRevision_=-1,this.flatInteriorPoints_=null,this.maxDelta_=-1,this.maxDeltaRevision_=-1,this.orientedRevision_=-1,this.orientedFlatCoordinates_=null,!n&&!Array.isArray(e[0])){for(var r=this.getLayout(),o=e,s=[],a=[],h=0,u=o.length;h<u;++h){var c=o[h];0===h&&(r=c.getLayout());for(var l=s.length,d=c.getEnds(),p=0,f=d.length;p<f;++p)d[p]+=l;Object(It.c)(s,c.getFlatCoordinates()),a.push(d)}i=r,e=s,n=a}void 0!==i&&n?(this.setFlatCoordinates(i,e),this.endss_=n):this.setCoordinates(e,i)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.appendPolygon=function(t){var e;if(this.flatCoordinates){var i=this.flatCoordinates.length;Object(It.c)(this.flatCoordinates,t.getFlatCoordinates());for(var n=0,r=(e=t.getEnds().slice()).length;n<r;++n)e[n]+=i}else this.flatCoordinates=t.getFlatCoordinates().slice(),e=t.getEnds().slice(),this.endss_.push();this.endss_.push(e),this.changed()},e.prototype.clone=function(){for(var t=this.endss_.length,i=new Array(t),n=0;n<t;++n)i[n]=this.endss_[n].slice();return new e(this.flatCoordinates.slice(),this.layout,i)},e.prototype.closestPointXY=function(t,e,i,n){return n<Object(U.e)(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(Object(jt.f)(this.flatCoordinates,0,this.endss_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),Object(jt.c)(this.getOrientedFlatCoordinates(),0,this.endss_,this.stride,this.maxDelta_,!0,t,e,i,n))},e.prototype.containsXY=function(t,e){return Object(Vt.d)(this.getOrientedFlatCoordinates(),0,this.endss_,this.stride,t,e)},e.prototype.getArea=function(){return Object(Xt.c)(this.getOrientedFlatCoordinates(),0,this.endss_,this.stride)},e.prototype.getCoordinates=function(t){var e;return void 0!==t?(e=this.getOrientedFlatCoordinates().slice(),Object(Bt.d)(e,0,this.endss_,this.stride,t)):e=this.flatCoordinates,Object(Pt.c)(e,0,this.endss_,this.stride)},e.prototype.getEndss=function(){return this.endss_},e.prototype.getFlatInteriorPoints=function(){if(this.flatInteriorPointsRevision_!=this.getRevision()){var t=function(t,e,i,n){for(var r=[],o=Object(U.j)(),s=0,a=i.length;s<a;++s){var h=i[s];o=Object(U.o)(t,e,h[0],n),r.push((o[0]+o[2])/2,(o[1]+o[3])/2),e=h[h.length-1]}return r}(this.flatCoordinates,0,this.endss_,this.stride);this.flatInteriorPoints_=Object(Ut.b)(this.getOrientedFlatCoordinates(),0,this.endss_,this.stride,t),this.flatInteriorPointsRevision_=this.getRevision()}return this.flatInteriorPoints_},e.prototype.getInteriorPoints=function(){return new Yt(this.getFlatInteriorPoints().slice(),Tt.a.XYM)},e.prototype.getOrientedFlatCoordinates=function(){if(this.orientedRevision_!=this.getRevision()){var t=this.flatCoordinates;Object(Bt.b)(t,0,this.endss_,this.stride)?this.orientedFlatCoordinates_=t:(this.orientedFlatCoordinates_=t.slice(),this.orientedFlatCoordinates_.length=Object(Bt.d)(this.orientedFlatCoordinates_,0,this.endss_,this.stride)),this.orientedRevision_=this.getRevision()}return this.orientedFlatCoordinates_},e.prototype.getSimplifiedGeometryInternal=function(t){var i=[],n=[];return i.length=Object(St.d)(this.flatCoordinates,0,this.endss_,this.stride,Math.sqrt(t),i,0,n),new e(i,Tt.a.XY,n)},e.prototype.getPolygon=function(t){if(t<0||this.endss_.length<=t)return null;var e;if(0===t)e=0;else{var i=this.endss_[t-1];e=i[i.length-1]}var n=this.endss_[t].slice(),r=n[n.length-1];if(0!==e)for(var o=0,s=n.length;o<s;++o)n[o]-=e;return new q.b(this.flatCoordinates.slice(e,r),this.layout,n)},e.prototype.getPolygons=function(){for(var t=this.layout,e=this.flatCoordinates,i=this.endss_,n=[],r=0,o=0,s=i.length;o<s;++o){var a=i[o].slice(),h=a[a.length-1];if(0!==r)for(var u=0,c=a.length;u<c;++u)a[u]-=r;var l=new q.b(e.slice(r,h),t,a);n.push(l),r=h}return n},e.prototype.getType=function(){return Ot.a.MULTI_POLYGON},e.prototype.intersectsExtent=function(t){return Object(Nt.d)(this.getOrientedFlatCoordinates(),0,this.endss_,this.stride,t)},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,3),this.flatCoordinates||(this.flatCoordinates=[]);var i=Object(xt.d)(this.flatCoordinates,0,t,this.stride,this.endss_);if(0===i.length)this.flatCoordinates.length=0;else{var n=i[i.length-1];this.flatCoordinates.length=0===n.length?0:n[n.length-1]}this.changed()},e}(bt.a),qt=i(76),Ht=i(34),Wt=i(39),Zt=i(35),zt={POINT:"Point",LINE_STRING:"LineString",POLYGON:"Polygon",CIRCLE:"Circle"},Jt="drawstart",Qt="drawend",$t=function(t){function e(e,i){t.call(this,e),this.feature=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(B.a);var te=function(t){function e(e){var i=e;i.stopDown||(i.stopDown=O.a),t.call(this,i),this.shouldHandle_=!1,this.downPx_=null,this.downTimeout_,this.lastDragTime_,this.freehand_=!1,this.source_=e.source?e.source:null,this.features_=e.features?e.features:null,this.snapTolerance_=e.snapTolerance?e.snapTolerance:12,this.type_=e.type,this.mode_=function(t){var e;t===Ot.a.POINT||t===Ot.a.MULTI_POINT?e=zt.POINT:t===Ot.a.LINE_STRING||t===Ot.a.MULTI_LINE_STRING?e=zt.LINE_STRING:t===Ot.a.POLYGON||t===Ot.a.MULTI_POLYGON?e=zt.POLYGON:t===Ot.a.CIRCLE&&(e=zt.CIRCLE);return e}(this.type_),this.stopClick_=!!e.stopClick,this.minPoints_=e.minPoints?e.minPoints:this.mode_===zt.POLYGON?3:2,this.maxPoints_=e.maxPoints?e.maxPoints:1/0,this.finishCondition_=e.finishCondition?e.finishCondition:O.b;var n,r=e.geometryFunction;if(!r)if(this.type_===Ot.a.CIRCLE)r=function(t,e){var i=e||new Ft([NaN,NaN]),n=Object(C.h)(t[0],t[1]);return i.setCenterAndRadius(t[0],Math.sqrt(n)),i};else{var o,s=this.mode_;s===zt.POINT?o=kt.default:s===zt.LINE_STRING?o=Lt:s===zt.POLYGON&&(o=q.b),r=function(t,e){var i=e;return i?s===zt.POLYGON?t[0].length?i.setCoordinates([t[0].concat([t[0][0]])]):i.setCoordinates([]):i.setCoordinates(t):i=new o(t),i}}this.geometryFunction_=r,this.dragVertexDelay_=void 0!==e.dragVertexDelay?e.dragVertexDelay:500,this.finishCoordinate_=null,this.sketchFeature_=null,this.sketchPoint_=null,this.sketchCoords_=null,this.sketchLine_=null,this.sketchLineCoords_=null,this.squaredClickTolerance_=e.clickTolerance?e.clickTolerance*e.clickTolerance:36,this.overlay_=new Ht.a({source:new Wt.a({useSpatialIndex:!1,wrapX:!!e.wrapX&&e.wrapX}),style:e.style?e.style:(n=Object(Zt.b)(),function(t,e){return n[t.getGeometry().getType()]}),updateWhileInteracting:!0}),this.geometryName_=e.geometryName,this.condition_=e.condition?e.condition:w,this.freehandCondition_,e.freehand?this.freehandCondition_=I:this.freehandCondition_=e.freehandCondition?e.freehandCondition:N,Object(dt.a)(this,Object(a.b)(u.ACTIVE),this.updateState_,this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setMap=function(e){t.prototype.setMap.call(this,e),this.updateState_()},e.prototype.getOverlay=function(){return this.overlay_},e.prototype.handleEvent=function(e){e.originalEvent.type===et.a.CONTEXTMENU&&e.preventDefault(),this.freehand_=this.mode_!==zt.POINT&&this.freehandCondition_(e);var i=e.type===s.a.POINTERMOVE,n=!0;!this.freehand_&&this.lastDragTime_&&e.type===s.a.POINTERDRAG&&(Date.now()-this.lastDragTime_>=this.dragVertexDelay_?(this.downPx_=e.pixel,this.shouldHandle_=!this.freehand_,i=!0):this.lastDragTime_=void 0,this.shouldHandle_&&void 0!==this.downTimeout_&&(clearTimeout(this.downTimeout_),this.downTimeout_=void 0));return this.freehand_&&e.type===s.a.POINTERDRAG&&null!==this.sketchFeature_?(this.addToDrawing_(e),n=!1):this.freehand_&&e.type===s.a.POINTERDOWN?n=!1:i?(n=e.type===s.a.POINTERMOVE)&&this.freehand_?n=this.handlePointerMove_(e):(e.pointerEvent.pointerType==qt.b||e.type===s.a.POINTERDRAG&&void 0===this.downTimeout_)&&this.handlePointerMove_(e):e.type===s.a.DBLCLICK&&(n=!1),t.prototype.handleEvent.call(this,e)&&n},e.prototype.handleDownEvent=function(t){return this.shouldHandle_=!this.freehand_,this.freehand_?(this.downPx_=t.pixel,this.finishCoordinate_||this.startDrawing_(t),!0):!!this.condition_(t)&&(this.lastDragTime_=Date.now(),this.downTimeout_=setTimeout(function(){this.handlePointerMove_(new Et.a(s.a.POINTERMOVE,t.map,t.pointerEvent,!1,t.frameState))}.bind(this),this.dragVertexDelay_),this.downPx_=t.pixel,!0)},e.prototype.handleUpEvent=function(t){var e=!0;this.downTimeout_&&(clearTimeout(this.downTimeout_),this.downTimeout_=void 0),this.handlePointerMove_(t);var i=this.mode_===zt.CIRCLE;return this.shouldHandle_?(this.finishCoordinate_?this.freehand_||i?this.finishDrawing():this.atFinish_(t)?this.finishCondition_(t)&&this.finishDrawing():this.addToDrawing_(t):(this.startDrawing_(t),this.mode_===zt.POINT&&this.finishDrawing()),e=!1):this.freehand_&&(this.finishCoordinate_=null,this.abortDrawing_()),!e&&this.stopClick_&&t.stopPropagation(),e},e.prototype.handlePointerMove_=function(t){if(this.downPx_&&(!this.freehand_&&this.shouldHandle_||this.freehand_&&!this.shouldHandle_)){var e=this.downPx_,i=t.pixel,n=e[0]-i[0],r=e[1]-i[1],o=n*n+r*r;if(this.shouldHandle_=this.freehand_?o>this.squaredClickTolerance_:o<=this.squaredClickTolerance_,!this.shouldHandle_)return!0}return this.finishCoordinate_?this.modifyDrawing_(t):this.createOrUpdateSketchPoint_(t),!0},e.prototype.atFinish_=function(t){var e=!1;if(this.sketchFeature_){var i=!1,n=[this.finishCoordinate_];if(this.mode_===zt.LINE_STRING)i=this.sketchCoords_.length>this.minPoints_;else if(this.mode_===zt.POLYGON){var r=this.sketchCoords_;i=r[0].length>this.minPoints_,n=[r[0][0],r[0][r[0].length-2]]}if(i)for(var o=t.map,s=0,a=n.length;s<a;s++){var h=n[s],u=o.getPixelFromCoordinate(h),c=t.pixel,l=c[0]-u[0],d=c[1]-u[1],p=this.freehand_?1:this.snapTolerance_;if(e=Math.sqrt(l*l+d*d)<=p){this.finishCoordinate_=h;break}}}return e},e.prototype.createOrUpdateSketchPoint_=function(t){var e=t.coordinate.slice();this.sketchPoint_?this.sketchPoint_.getGeometry().setCoordinates(e):(this.sketchPoint_=new Ct.default(new kt.default(e)),this.updateSketchFeatures_())},e.prototype.startDrawing_=function(t){var e=t.coordinate;this.finishCoordinate_=e,this.mode_===zt.POINT?this.sketchCoords_=e.slice():this.mode_===zt.POLYGON?(this.sketchCoords_=[[e.slice(),e.slice()]],this.sketchLineCoords_=this.sketchCoords_[0]):this.sketchCoords_=[e.slice(),e.slice()],this.sketchLineCoords_&&(this.sketchLine_=new Ct.default(new Lt(this.sketchLineCoords_)));var i=this.geometryFunction_(this.sketchCoords_);this.sketchFeature_=new Ct.default,this.geometryName_&&this.sketchFeature_.setGeometryName(this.geometryName_),this.sketchFeature_.setGeometry(i),this.updateSketchFeatures_(),this.dispatchEvent(new $t(Jt,this.sketchFeature_))},e.prototype.modifyDrawing_=function(t){var e,i,n,r=t.coordinate,o=this.sketchFeature_.getGeometry();(this.mode_===zt.POINT?i=this.sketchCoords_:this.mode_===zt.POLYGON?(i=(e=this.sketchCoords_[0])[e.length-1],this.atFinish_(t)&&(r=this.finishCoordinate_.slice())):i=(e=this.sketchCoords_)[e.length-1],i[0]=r[0],i[1]=r[1],this.geometryFunction_(this.sketchCoords_,o),this.sketchPoint_)&&this.sketchPoint_.getGeometry().setCoordinates(r);if(o.getType()==Ot.a.POLYGON&&this.mode_!==zt.POLYGON){this.sketchLine_||(this.sketchLine_=new Ct.default);var s=o.getLinearRing(0);(n=this.sketchLine_.getGeometry())?(n.setFlatCoordinates(s.getLayout(),s.getFlatCoordinates()),n.changed()):(n=new Lt(s.getFlatCoordinates(),s.getLayout()),this.sketchLine_.setGeometry(n))}else this.sketchLineCoords_&&(n=this.sketchLine_.getGeometry()).setCoordinates(this.sketchLineCoords_);this.updateSketchFeatures_()},e.prototype.addToDrawing_=function(t){var e,i,n=t.coordinate,r=this.sketchFeature_.getGeometry();this.mode_===zt.LINE_STRING?(this.finishCoordinate_=n.slice(),(i=this.sketchCoords_).length>=this.maxPoints_&&(this.freehand_?i.pop():e=!0),i.push(n.slice()),this.geometryFunction_(i,r)):this.mode_===zt.POLYGON&&((i=this.sketchCoords_[0]).length>=this.maxPoints_&&(this.freehand_?i.pop():e=!0),i.push(n.slice()),e&&(this.finishCoordinate_=i[0]),this.geometryFunction_(this.sketchCoords_,r)),this.updateSketchFeatures_(),e&&this.finishDrawing()},e.prototype.removeLastPoint=function(){if(this.sketchFeature_){var t,e=this.sketchFeature_.getGeometry();this.mode_===zt.LINE_STRING?((t=this.sketchCoords_).splice(-2,1),this.geometryFunction_(t,e),t.length>=2&&(this.finishCoordinate_=t[t.length-2].slice())):this.mode_===zt.POLYGON&&((t=this.sketchCoords_[0]).splice(-2,1),this.sketchLine_.getGeometry().setCoordinates(t),this.geometryFunction_(this.sketchCoords_,e)),0===t.length&&(this.finishCoordinate_=null),this.updateSketchFeatures_()}},e.prototype.finishDrawing=function(){var t=this.abortDrawing_();if(t){var e=this.sketchCoords_,i=t.getGeometry();this.mode_===zt.LINE_STRING?(e.pop(),this.geometryFunction_(e,i)):this.mode_===zt.POLYGON&&(e[0].pop(),this.geometryFunction_(e,i),e=i.getCoordinates()),this.type_===Ot.a.MULTI_POINT?t.setGeometry(new Yt([e])):this.type_===Ot.a.MULTI_LINE_STRING?t.setGeometry(new Gt([e])):this.type_===Ot.a.MULTI_POLYGON&&t.setGeometry(new Kt([e])),this.dispatchEvent(new $t(Qt,t)),this.features_&&this.features_.push(t),this.source_&&this.source_.addFeature(t)}},e.prototype.abortDrawing_=function(){this.finishCoordinate_=null;var t=this.sketchFeature_;return t&&(this.sketchFeature_=null,this.sketchPoint_=null,this.sketchLine_=null,this.overlay_.getSource().clear(!0)),t},e.prototype.extend=function(t){var e=t.getGeometry();this.sketchFeature_=t,this.sketchCoords_=e.getCoordinates();var i=this.sketchCoords_[this.sketchCoords_.length-1];this.finishCoordinate_=i.slice(),this.sketchCoords_.push(i.slice()),this.updateSketchFeatures_(),this.dispatchEvent(new $t(Jt,this.sketchFeature_))},e.prototype.updateSketchFeatures_=function(){var t=[];this.sketchFeature_&&t.push(this.sketchFeature_),this.sketchLine_&&t.push(this.sketchLine_),this.sketchPoint_&&t.push(this.sketchPoint_);var e=this.overlay_.getSource();e.clear(!0),e.addFeatures(t)},e.prototype.updateState_=function(){var t=this.getMap(),e=this.getActive();t&&e||this.abortDrawing_(),this.overlay_.setMap(e?t:null)},e}(k),ee={EXTENTCHANGED:"extentchanged"},ie=function(t){function e(e){t.call(this,ee.EXTENTCHANGED),this.extent=e}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(B.a);function ne(){var t=Object(Zt.b)();return function(e,i){return t[Ot.a.POINT]}}function re(t){return function(e){return Object(U.b)([t,e])}}function oe(t,e){return t[0]==e[0]?function(i){return Object(U.b)([t,[i[0],e[1]]])}:t[1]==e[1]?function(i){return Object(U.b)([t,[e[0],i[1]]])}:null}var se=function(t){function e(e){var i,n=e||{};t.call(this,n),this.extent_=null,this.pointerHandler_=null,this.pixelTolerance_=void 0!==n.pixelTolerance?n.pixelTolerance:10,this.snappedToVertex_=!1,this.extentFeature_=null,this.vertexFeature_=null,e||(e={}),this.extentOverlay_=new Ht.a({source:new Wt.a({useSpatialIndex:!1,wrapX:!!e.wrapX}),style:e.boxStyle?e.boxStyle:(i=Object(Zt.b)(),function(t,e){return i[Ot.a.POLYGON]}),updateWhileAnimating:!0,updateWhileInteracting:!0}),this.vertexOverlay_=new Ht.a({source:new Wt.a({useSpatialIndex:!1,wrapX:!!e.wrapX}),style:e.pointerStyle?e.pointerStyle:ne(),updateWhileAnimating:!0,updateWhileInteracting:!0}),e.extent&&this.setExtent(e.extent)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.snapToVertex_=function(t,e){var i=e.getCoordinateFromPixel(t),n=this.getExtent();if(n){var r=function(t){return[[[t[0],t[1]],[t[0],t[3]]],[[t[0],t[3]],[t[2],t[3]]],[[t[2],t[3]],[t[2],t[1]]],[[t[2],t[1]],[t[0],t[1]]]]}(n);r.sort(function(t,e){return Object(C.i)(i,t)-Object(C.i)(i,e)});var o=r[0],s=Object(C.c)(i,o),a=e.getPixelFromCoordinate(s);if(Object(C.d)(t,a)<=this.pixelTolerance_){var h=e.getPixelFromCoordinate(o[0]),u=e.getPixelFromCoordinate(o[1]),c=Object(C.h)(a,h),l=Object(C.h)(a,u),d=Math.sqrt(Math.min(c,l));return this.snappedToVertex_=d<=this.pixelTolerance_,this.snappedToVertex_&&(s=c>l?o[1]:o[0]),s}}return null},e.prototype.handlePointerMove_=function(t){var e=t.pixel,i=t.map,n=this.snapToVertex_(e,i);n||(n=i.getCoordinateFromPixel(e)),this.createOrUpdatePointerFeature_(n)},e.prototype.createOrUpdateExtentFeature_=function(t){var e=this.extentFeature_;return e?t?e.setGeometry(Object(q.d)(t)):e.setGeometry(void 0):(e=t?new Ct.default(Object(q.d)(t)):new Ct.default({}),this.extentFeature_=e,this.extentOverlay_.getSource().addFeature(e)),e},e.prototype.createOrUpdatePointerFeature_=function(t){var e=this.vertexFeature_;e?e.getGeometry().setCoordinates(t):(e=new Ct.default(new kt.default(t)),this.vertexFeature_=e,this.vertexOverlay_.getSource().addFeature(e));return e},e.prototype.handleEvent=function(e){return!e.pointerEvent||(e.type!=s.a.POINTERMOVE||this.handlingDownUpSequence||this.handlePointerMove_(e),t.prototype.handleEvent.call(this,e),!1)},e.prototype.handleDownEvent=function(t){var e=t.pixel,i=t.map,n=this.getExtent(),r=this.snapToVertex_(e,i),o=function(t){var e=null,i=null;return t[0]==n[0]?e=n[2]:t[0]==n[2]&&(e=n[0]),t[1]==n[1]?i=n[3]:t[1]==n[3]&&(i=n[1]),null!==e&&null!==i?[e,i]:null};if(r&&n){var s=r[0]==n[0]||r[0]==n[2]?r[0]:null,a=r[1]==n[1]||r[1]==n[3]?r[1]:null;null!==s&&null!==a?this.pointerHandler_=re(o(r)):null!==s?this.pointerHandler_=oe(o([s,n[1]]),o([s,n[3]])):null!==a&&(this.pointerHandler_=oe(o([n[0],a]),o([n[2],a])))}else r=i.getCoordinateFromPixel(e),this.setExtent([r[0],r[1],r[0],r[1]]),this.pointerHandler_=re(r);return!0},e.prototype.handleDragEvent=function(t){if(this.pointerHandler_){var e=t.coordinate;this.setExtent(this.pointerHandler_(e)),this.createOrUpdatePointerFeature_(e)}return!0},e.prototype.handleUpEvent=function(t){this.pointerHandler_=null;var e=this.getExtent();return e&&0!==Object(U.u)(e)||this.setExtent(null),!1},e.prototype.setMap=function(e){this.extentOverlay_.setMap(e),this.vertexOverlay_.setMap(e),t.prototype.setMap.call(this,e)},e.prototype.getExtent=function(){return this.extent_},e.prototype.setExtent=function(t){this.extent_=t||null,this.createOrUpdateExtentFeature_(t),this.dispatchEvent(new ie(this.extent_))},e}(k),ae=i(3),he=i(21),ue=i(53),ce=i(52),le=1,de="modifystart",pe="modifyend",fe=function(t){function e(e,i,n){t.call(this,e),this.features=i,this.mapBrowserEvent=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(B.a);function _e(t,e){return t.index-e.index}function ge(t,e){var i=e.geometry;if(i.getType()===Ot.a.CIRCLE){var n=i;if(e.index===le){var r=Object(C.h)(n.getCenter(),t),o=Math.sqrt(r)-n.getRadius();return o*o}}return Object(C.i)(t,e.segment)}function ve(t,e){var i=e.geometry;return i.getType()===Ot.a.CIRCLE&&e.index===le?i.getClosestPoint(t):Object(C.c)(t,e.segment)}var ye=function(t){function e(e){var i,r;if(t.call(this,e),this.condition_=e.condition?e.condition:S,this.defaultDeleteCondition_=function(t){return x(t)&&M(t)},this.deleteCondition_=e.deleteCondition?e.deleteCondition:this.defaultDeleteCondition_,this.insertVertexCondition_=e.insertVertexCondition?e.insertVertexCondition:I,this.vertexFeature_=null,this.vertexSegments_=null,this.lastPixel_=[0,0],this.ignoreNextSingleClick_=!1,this.modified_=!1,this.rBush_=new ce.a,this.pixelTolerance_=void 0!==e.pixelTolerance?e.pixelTolerance:10,this.snappedToVertex_=!1,this.changingFeature_=!1,this.dragSegments_=[],this.overlay_=new Ht.a({source:new Wt.a({useSpatialIndex:!1,wrapX:!!e.wrapX}),style:e.style?e.style:(i=Object(Zt.b)(),function(t,e){return i[Ot.a.POINT]}),updateWhileAnimating:!0,updateWhileInteracting:!0}),this.SEGMENT_WRITERS_={Point:this.writePointGeometry_,LineString:this.writeLineStringGeometry_,LinearRing:this.writeLineStringGeometry_,Polygon:this.writePolygonGeometry_,MultiPoint:this.writeMultiPointGeometry_,MultiLineString:this.writeMultiLineStringGeometry_,MultiPolygon:this.writeMultiPolygonGeometry_,Circle:this.writeCircleGeometry_,GeometryCollection:this.writeGeometryCollectionGeometry_},this.source_=null,e.source?(this.source_=e.source,r=new n.a(this.source_.getFeatures()),Object(dt.a)(this.source_,ue.a.ADDFEATURE,this.handleSourceAdd_,this),Object(dt.a)(this.source_,ue.a.REMOVEFEATURE,this.handleSourceRemove_,this)):r=e.features,!r)throw new Error("The modify interaction requires features or a source");this.features_=r,this.features_.forEach(this.addFeature_.bind(this)),Object(dt.a)(this.features_,he.a.ADD,this.handleFeatureAdd_,this),Object(dt.a)(this.features_,he.a.REMOVE,this.handleFeatureRemove_,this),this.lastPointerEvent_=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.addFeature_=function(t){var e=t.getGeometry();e&&e.getType()in this.SEGMENT_WRITERS_&&this.SEGMENT_WRITERS_[e.getType()].call(this,t,e);var i=this.getMap();i&&i.isRendered()&&this.getActive()&&this.handlePointerAtPixel_(this.lastPixel_,i),Object(dt.a)(t,et.a.CHANGE,this.handleFeatureChange_,this)},e.prototype.willModifyFeatures_=function(t){this.modified_||(this.modified_=!0,this.dispatchEvent(new fe(de,this.features_,t)))},e.prototype.removeFeature_=function(t){this.removeFeatureSegmentData_(t),this.vertexFeature_&&0===this.features_.getLength()&&(this.overlay_.getSource().removeFeature(this.vertexFeature_),this.vertexFeature_=null),Object(dt.c)(t,et.a.CHANGE,this.handleFeatureChange_,this)},e.prototype.removeFeatureSegmentData_=function(t){var e=this.rBush_,i=[];e.forEach(function(e){t===e.feature&&i.push(e)});for(var n=i.length-1;n>=0;--n)e.remove(i[n])},e.prototype.setActive=function(e){this.vertexFeature_&&!e&&(this.overlay_.getSource().removeFeature(this.vertexFeature_),this.vertexFeature_=null),t.prototype.setActive.call(this,e)},e.prototype.setMap=function(e){this.overlay_.setMap(e),t.prototype.setMap.call(this,e)},e.prototype.getOverlay=function(){return this.overlay_},e.prototype.handleSourceAdd_=function(t){t.feature&&this.features_.push(t.feature)},e.prototype.handleSourceRemove_=function(t){t.feature&&this.features_.remove(t.feature)},e.prototype.handleFeatureAdd_=function(t){this.addFeature_(t.element)},e.prototype.handleFeatureChange_=function(t){if(!this.changingFeature_){var e=t.target;this.removeFeature_(e),this.addFeature_(e)}},e.prototype.handleFeatureRemove_=function(t){var e=t.element;this.removeFeature_(e)},e.prototype.writePointGeometry_=function(t,e){var i=e.getCoordinates(),n={feature:t,geometry:e,segment:[i,i]};this.rBush_.insert(e.getExtent(),n)},e.prototype.writeMultiPointGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n){var o=i[n],s={feature:t,geometry:e,depth:[n],index:n,segment:[o,o]};this.rBush_.insert(e.getExtent(),s)}},e.prototype.writeLineStringGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length-1;n<r;++n){var o=i.slice(n,n+2),s={feature:t,geometry:e,index:n,segment:o};this.rBush_.insert(Object(U.b)(o),s)}},e.prototype.writeMultiLineStringGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n)for(var o=i[n],s=0,a=o.length-1;s<a;++s){var h=o.slice(s,s+2),u={feature:t,geometry:e,depth:[n],index:s,segment:h};this.rBush_.insert(Object(U.b)(h),u)}},e.prototype.writePolygonGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n)for(var o=i[n],s=0,a=o.length-1;s<a;++s){var h=o.slice(s,s+2),u={feature:t,geometry:e,depth:[n],index:s,segment:h};this.rBush_.insert(Object(U.b)(h),u)}},e.prototype.writeMultiPolygonGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n)for(var o=i[n],s=0,a=o.length;s<a;++s)for(var h=o[s],u=0,c=h.length-1;u<c;++u){var l=h.slice(u,u+2),d={feature:t,geometry:e,depth:[s,n],index:u,segment:l};this.rBush_.insert(Object(U.b)(l),d)}},e.prototype.writeCircleGeometry_=function(t,e){var i=e.getCenter(),n={feature:t,geometry:e,index:0,segment:[i,i]},r={feature:t,geometry:e,index:le,segment:[i,i]},o=[n,r];n.featureSegments=r.featureSegments=o,this.rBush_.insert(Object(U.m)(i),n),this.rBush_.insert(e.getExtent(),r)},e.prototype.writeGeometryCollectionGeometry_=function(t,e){for(var i=e.getGeometriesArray(),n=0;n<i.length;++n)this.SEGMENT_WRITERS_[i[n].getType()].call(this,t,i[n])},e.prototype.createOrUpdateVertexFeature_=function(t){var e=this.vertexFeature_;e?e.getGeometry().setCoordinates(t):(e=new Ct.default(new kt.default(t)),this.vertexFeature_=e,this.overlay_.getSource().addFeature(e));return e},e.prototype.handleEvent=function(e){return!e.pointerEvent||(this.lastPointerEvent_=e,e.map.getView().getInteracting()||e.type!=s.a.POINTERMOVE||this.handlingDownUpSequence||this.handlePointerMove_(e),this.vertexFeature_&&this.deleteCondition_(e)&&(i=!(e.type!=s.a.SINGLECLICK||!this.ignoreNextSingleClick_)||this.removePoint()),e.type==s.a.SINGLECLICK&&(this.ignoreNextSingleClick_=!1),t.prototype.handleEvent.call(this,e)&&!i);var i},e.prototype.handleDragEvent=function(t){this.ignoreNextSingleClick_=!1,this.willModifyFeatures_(t);for(var e=t.coordinate,i=0,n=this.dragSegments_.length;i<n;++i){for(var r=this.dragSegments_[i],o=r[0],s=o.depth,a=o.geometry,h=void 0,u=o.segment,c=r[1];e.length<a.getStride();)e.push(u[c][e.length]);switch(a.getType()){case Ot.a.POINT:h=e,u[0]=u[1]=e;break;case Ot.a.MULTI_POINT:(h=a.getCoordinates())[o.index]=e,u[0]=u[1]=e;break;case Ot.a.LINE_STRING:(h=a.getCoordinates())[o.index+c]=e,u[c]=e;break;case Ot.a.MULTI_LINE_STRING:case Ot.a.POLYGON:(h=a.getCoordinates())[s[0]][o.index+c]=e,u[c]=e;break;case Ot.a.MULTI_POLYGON:(h=a.getCoordinates())[s[1]][s[0]][o.index+c]=e,u[c]=e;break;case Ot.a.CIRCLE:u[0]=u[1]=e,0===o.index?(this.changingFeature_=!0,a.setCenter(e),this.changingFeature_=!1):(this.changingFeature_=!0,a.setRadius(Object(C.d)(a.getCenter(),e)),this.changingFeature_=!1)}h&&this.setGeometryCoordinates_(a,h)}this.createOrUpdateVertexFeature_(e)},e.prototype.handleDownEvent=function(t){if(!this.condition_(t))return!1;this.handlePointerAtPixel_(t.pixel,t.map);var e=t.map.getCoordinateFromPixel(t.pixel);this.dragSegments_.length=0,this.modified_=!1;var i=this.vertexFeature_;if(i){var n=[],r=i.getGeometry().getCoordinates(),o=Object(U.b)([r]),s=this.rBush_.getInExtent(o),a={};s.sort(_e);for(var h=0,u=s.length;h<u;++h){var c=s[h],l=c.segment,d=Object(ae.c)(c.feature),p=c.depth;if(p&&(d+="-"+p.join("-")),a[d]||(a[d]=new Array(2)),c.geometry.getType()===Ot.a.CIRCLE&&c.index===le){var f=ve(e,c);Object(C.e)(f,r)&&!a[d][0]&&(this.dragSegments_.push([c,0]),a[d][0]=c)}else if(Object(C.e)(l[0],r)&&!a[d][0])this.dragSegments_.push([c,0]),a[d][0]=c;else if(Object(C.e)(l[1],r)&&!a[d][1]){if((c.geometry.getType()===Ot.a.LINE_STRING||c.geometry.getType()===Ot.a.MULTI_LINE_STRING)&&a[d][0]&&0===a[d][0].index)continue;this.dragSegments_.push([c,1]),a[d][1]=c}else this.insertVertexCondition_(t)&&Object(ae.c)(l)in this.vertexSegments_&&!a[d][0]&&!a[d][1]&&n.push([c,r])}n.length&&this.willModifyFeatures_(t);for(var _=n.length-1;_>=0;--_)this.insertVertex_.apply(this,n[_])}return!!this.vertexFeature_},e.prototype.handleUpEvent=function(t){for(var e=this.dragSegments_.length-1;e>=0;--e){var i=this.dragSegments_[e][0],n=i.geometry;if(n.getType()===Ot.a.CIRCLE){var r=n.getCenter(),o=i.featureSegments[0],s=i.featureSegments[1];o.segment[0]=o.segment[1]=r,s.segment[0]=s.segment[1]=r,this.rBush_.update(Object(U.m)(r),o),this.rBush_.update(n.getExtent(),s)}else this.rBush_.update(Object(U.b)(i.segment),i)}return this.modified_&&(this.dispatchEvent(new fe(pe,this.features_,t)),this.modified_=!1),!1},e.prototype.handlePointerMove_=function(t){this.lastPixel_=t.pixel,this.handlePointerAtPixel_(t.pixel,t.map)},e.prototype.handlePointerAtPixel_=function(t,e){var i=e.getCoordinateFromPixel(t),n=Object(U.c)(Object(U.m)(i),e.getView().getResolution()*this.pixelTolerance_),r=this.rBush_.getInExtent(n);if(r.length>0){r.sort(function(t,e){return ge(i,t)-ge(i,e)});var o=r[0],s=o.segment,a=ve(i,o),h=e.getPixelFromCoordinate(a),u=Object(C.d)(t,h);if(u<=this.pixelTolerance_){var c={};if(o.geometry.getType()===Ot.a.CIRCLE&&o.index===le)this.snappedToVertex_=!0,this.createOrUpdateVertexFeature_(a);else{var l=e.getPixelFromCoordinate(s[0]),d=e.getPixelFromCoordinate(s[1]),p=Object(C.h)(h,l),f=Object(C.h)(h,d);u=Math.sqrt(Math.min(p,f)),this.snappedToVertex_=u<=this.pixelTolerance_,this.snappedToVertex_&&(a=p>f?s[1]:s[0]),this.createOrUpdateVertexFeature_(a);for(var _=1,g=r.length;_<g;++_){var v=r[_].segment;if(!(Object(C.e)(s[0],v[0])&&Object(C.e)(s[1],v[1])||Object(C.e)(s[0],v[1])&&Object(C.e)(s[1],v[0])))break;c[Object(ae.c)(v)]=!0}}return c[Object(ae.c)(s)]=!0,void(this.vertexSegments_=c)}}this.vertexFeature_&&(this.overlay_.getSource().removeFeature(this.vertexFeature_),this.vertexFeature_=null)},e.prototype.insertVertex_=function(t,e){for(var i,n=t.segment,r=t.feature,o=t.geometry,s=t.depth,a=t.index;e.length<o.getStride();)e.push(0);switch(o.getType()){case Ot.a.MULTI_LINE_STRING:case Ot.a.POLYGON:(i=o.getCoordinates())[s[0]].splice(a+1,0,e);break;case Ot.a.MULTI_POLYGON:(i=o.getCoordinates())[s[1]][s[0]].splice(a+1,0,e);break;case Ot.a.LINE_STRING:(i=o.getCoordinates()).splice(a+1,0,e);break;default:return}this.setGeometryCoordinates_(o,i);var h=this.rBush_;h.remove(t),this.updateSegmentIndices_(o,a,s,1);var u={segment:[n[0],e],feature:r,geometry:o,depth:s,index:a};h.insert(Object(U.b)(u.segment),u),this.dragSegments_.push([u,1]);var c={segment:[e,n[1]],feature:r,geometry:o,depth:s,index:a+1};h.insert(Object(U.b)(c.segment),c),this.dragSegments_.push([c,0]),this.ignoreNextSingleClick_=!0},e.prototype.removePoint=function(){if(this.lastPointerEvent_&&this.lastPointerEvent_.type!=s.a.POINTERDRAG){var t=this.lastPointerEvent_;return this.willModifyFeatures_(t),this.removeVertex_(),this.dispatchEvent(new fe(pe,this.features_,t)),this.modified_=!1,!0}return!1},e.prototype.removeVertex_=function(){var t,e,i,n,r,o,s,a,h,u,c,l=this.dragSegments_,d={},p=!1;for(r=l.length-1;r>=0;--r)u=(i=l[r])[0],c=Object(ae.c)(u.feature),u.depth&&(c+="-"+u.depth.join("-")),c in d||(d[c]={}),0===i[1]?(d[c].right=u,d[c].index=u.index):1==i[1]&&(d[c].left=u,d[c].index=u.index+1);for(c in d){switch(h=d[c].right,s=d[c].left,(a=(o=d[c].index)-1)<0&&(a=0),t=e=(n=(u=void 0!==s?s:h).geometry).getCoordinates(),p=!1,n.getType()){case Ot.a.MULTI_LINE_STRING:e[u.depth[0]].length>2&&(e[u.depth[0]].splice(o,1),p=!0);break;case Ot.a.LINE_STRING:e.length>2&&(e.splice(o,1),p=!0);break;case Ot.a.MULTI_POLYGON:t=t[u.depth[1]];case Ot.a.POLYGON:(t=t[u.depth[0]]).length>4&&(o==t.length-1&&(o=0),t.splice(o,1),p=!0,0===o&&(t.pop(),t.push(t[0]),a=t.length-1))}if(p){this.setGeometryCoordinates_(n,e);var f=[];if(void 0!==s&&(this.rBush_.remove(s),f.push(s.segment[0])),void 0!==h&&(this.rBush_.remove(h),f.push(h.segment[1])),void 0!==s&&void 0!==h){var _={depth:u.depth,feature:u.feature,geometry:u.geometry,index:a,segment:f};this.rBush_.insert(Object(U.b)(_.segment),_)}this.updateSegmentIndices_(n,o,u.depth,-1),this.vertexFeature_&&(this.overlay_.getSource().removeFeature(this.vertexFeature_),this.vertexFeature_=null),l.length=0}}return p},e.prototype.setGeometryCoordinates_=function(t,e){this.changingFeature_=!0,t.setCoordinates(e),this.changingFeature_=!1},e.prototype.updateSegmentIndices_=function(t,e,i,n){this.rBush_.forEachInExtent(t.getExtent(),function(r){r.geometry===t&&(void 0===i||void 0===r.depth||Object(It.b)(r.depth,i))&&r.index>e&&(r.index+=n)})},e}(k),me={SELECT:"select"},Ce=function(t){function e(e,i,n,r){t.call(this,e),this.selected=i,this.deselected=n,this.mapBrowserEvent=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(B.a);function Ee(t){if(!this.condition_(t))return!0;var e=this.addCondition_(t),i=this.removeCondition_(t),n=this.toggleCondition_(t),r=!e&&!i&&!n,o=t.map,s=this.getFeatures(),a=[],h=[];if(r){Object(L.b)(this.featureLayerAssociation_),o.forEachFeatureAtPixel(t.pixel,function(t,e){if(this.filter_(t,e))return h.push(t),this.addFeatureLayerAssociation_(t,e),!this.multi_}.bind(this),{layerFilter:this.layerFilter_,hitTolerance:this.hitTolerance_});for(var u=s.getLength()-1;u>=0;--u){var c=s.item(u),l=h.indexOf(c);l>-1?h.splice(l,1):(s.remove(c),a.push(c))}0!==h.length&&s.extend(h)}else{o.forEachFeatureAtPixel(t.pixel,function(t,r){if(this.filter_(t,r))return!e&&!n||Object(It.f)(s.getArray(),t)?(i||n)&&Object(It.f)(s.getArray(),t)&&(a.push(t),this.removeFeatureLayerAssociation_(t)):(h.push(t),this.addFeatureLayerAssociation_(t,r)),!this.multi_}.bind(this),{layerFilter:this.layerFilter_,hitTolerance:this.hitTolerance_});for(var d=a.length-1;d>=0;--d)s.remove(a[d]);s.extend(h)}return(h.length>0||a.length>0)&&this.dispatchEvent(new Ce(me.SELECT,h,a,t)),P(t)}function Oe(){var t=Object(Zt.b)();return Object(It.c)(t[Ot.a.POLYGON],t[Ot.a.LINE_STRING]),Object(It.c)(t[Ot.a.GEOMETRY_COLLECTION],t[Ot.a.LINE_STRING]),function(e,i){return e.getGeometry()?t[e.getGeometry().getType()]:null}}var be=function(t){function e(e){t.call(this,{handleEvent:Ee});var i=e||{};this.condition_=i.condition?i.condition:M,this.addCondition_=i.addCondition?i.addCondition:j,this.removeCondition_=i.removeCondition?i.removeCondition:j,this.toggleCondition_=i.toggleCondition?i.toggleCondition:N,this.multi_=!!i.multi&&i.multi,this.filter_=i.filter?i.filter:O.b,this.hitTolerance_=i.hitTolerance?i.hitTolerance:0;var n,r=new Ht.a({source:new Wt.a({useSpatialIndex:!1,features:i.features,wrapX:i.wrapX}),style:i.style?i.style:Oe(),updateWhileAnimating:!0,updateWhileInteracting:!0});if(this.featureOverlay_=r,i.layers)if("function"==typeof i.layers)n=i.layers;else{var o=i.layers;n=function(t){return Object(It.f)(o,t)}}else n=O.b;this.layerFilter_=n,this.featureLayerAssociation_={};var s=this.getFeatures();Object(dt.a)(s,he.a.ADD,this.addFeature_,this),Object(dt.a)(s,he.a.REMOVE,this.removeFeature_,this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.addFeatureLayerAssociation_=function(t,e){this.featureLayerAssociation_[Object(ae.c)(t)]=e},e.prototype.getFeatures=function(){return this.featureOverlay_.getSource().getFeaturesCollection()},e.prototype.getHitTolerance=function(){return this.hitTolerance_},e.prototype.getLayer=function(t){return this.featureLayerAssociation_[Object(ae.c)(t)]},e.prototype.getOverlay=function(){return this.featureOverlay_},e.prototype.setHitTolerance=function(t){this.hitTolerance_=t},e.prototype.setMap=function(e){var i=this.getMap(),n=this.getFeatures();i&&n.forEach(i.unskipFeature.bind(i)),t.prototype.setMap.call(this,e),this.featureOverlay_.setMap(e),e&&n.forEach(e.skipFeature.bind(e))},e.prototype.addFeature_=function(t){var e=this.getMap();e&&e.skipFeature(t.element)},e.prototype.removeFeature_=function(t){var e=this.getMap();e&&e.unskipFeature(t.element)},e.prototype.removeFeatureLayerAssociation_=function(t){delete this.featureLayerAssociation_[Object(ae.c)(t)]},e}(g);function xe(t){return t.feature?t.feature:t.element?t.element:void 0}var Re=function(t){function e(e){var i=e||{},n=i;n.handleDownEvent||(n.handleDownEvent=O.b),n.stopDown||(n.stopDown=O.a),t.call(this,n),this.source_=i.source?i.source:null,this.vertex_=void 0===i.vertex||i.vertex,this.edge_=void 0===i.edge||i.edge,this.features_=i.features?i.features:null,this.featuresListenerKeys_=[],this.featureChangeListenerKeys_={},this.indexedFeaturesExtents_={},this.pendingFeatures_={},this.pixelCoordinate_=null,this.pixelTolerance_=void 0!==i.pixelTolerance?i.pixelTolerance:10,this.sortByDistance_=function(t,e){var i=Object(C.i)(this.pixelCoordinate_,t.segment),n=Object(C.i)(this.pixelCoordinate_,e.segment);return i-n}.bind(this),this.rBush_=new ce.a,this.SEGMENT_WRITERS_={Point:this.writePointGeometry_,LineString:this.writeLineStringGeometry_,LinearRing:this.writeLineStringGeometry_,Polygon:this.writePolygonGeometry_,MultiPoint:this.writeMultiPointGeometry_,MultiLineString:this.writeMultiLineStringGeometry_,MultiPolygon:this.writeMultiPolygonGeometry_,GeometryCollection:this.writeGeometryCollectionGeometry_,Circle:this.writeCircleGeometry_}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.addFeature=function(t,e){var i=void 0===e||e,n=Object(ae.c)(t),r=t.getGeometry();if(r){var o=this.SEGMENT_WRITERS_[r.getType()];o&&(this.indexedFeaturesExtents_[n]=r.getExtent(Object(U.j)()),o.call(this,t,r))}i&&(this.featureChangeListenerKeys_[n]=Object(dt.a)(t,et.a.CHANGE,this.handleFeatureChange_,this))},e.prototype.forEachFeatureAdd_=function(t){this.addFeature(t)},e.prototype.forEachFeatureRemove_=function(t){this.removeFeature(t)},e.prototype.getFeatures_=function(){var t;return this.features_?t=this.features_:this.source_&&(t=this.source_.getFeatures()),t},e.prototype.handleEvent=function(e){var i=this.snapTo(e.pixel,e.coordinate,e.map);return i.snapped&&(e.coordinate=i.vertex.slice(0,2),e.pixel=i.vertexPixel),t.prototype.handleEvent.call(this,e)},e.prototype.handleFeatureAdd_=function(t){var e=xe(t);this.addFeature(e)},e.prototype.handleFeatureRemove_=function(t){var e=xe(t);this.removeFeature(e)},e.prototype.handleFeatureChange_=function(t){var e=t.target;if(this.handlingDownUpSequence){var i=Object(ae.c)(e);i in this.pendingFeatures_||(this.pendingFeatures_[i]=e)}else this.updateFeature_(e)},e.prototype.handleUpEvent=function(t){var e=Object(L.c)(this.pendingFeatures_);return e.length&&(e.forEach(this.updateFeature_.bind(this)),this.pendingFeatures_={}),!1},e.prototype.removeFeature=function(t,e){var i=void 0===e||e,n=Object(ae.c)(t),r=this.indexedFeaturesExtents_[n];if(r){var o=this.rBush_,s=[];o.forEachInExtent(r,function(e){t===e.feature&&s.push(e)});for(var a=s.length-1;a>=0;--a)o.remove(s[a])}i&&(Object(dt.e)(this.featureChangeListenerKeys_[n]),delete this.featureChangeListenerKeys_[n])},e.prototype.setMap=function(e){var i=this.getMap(),n=this.featuresListenerKeys_,r=this.getFeatures_();i&&(n.forEach(dt.e),n.length=0,r.forEach(this.forEachFeatureRemove_.bind(this))),t.prototype.setMap.call(this,e),e&&(this.features_?n.push(Object(dt.a)(this.features_,he.a.ADD,this.handleFeatureAdd_,this),Object(dt.a)(this.features_,he.a.REMOVE,this.handleFeatureRemove_,this)):this.source_&&n.push(Object(dt.a)(this.source_,ue.a.ADDFEATURE,this.handleFeatureAdd_,this),Object(dt.a)(this.source_,ue.a.REMOVEFEATURE,this.handleFeatureRemove_,this)),r.forEach(this.forEachFeatureAdd_.bind(this)))},e.prototype.snapTo=function(t,e,i){var n=i.getCoordinateFromPixel([t[0]-this.pixelTolerance_,t[1]+this.pixelTolerance_]),r=i.getCoordinateFromPixel([t[0]+this.pixelTolerance_,t[1]-this.pixelTolerance_]),o=Object(U.b)([n,r]),s=this.rBush_.getInExtent(o);this.vertex_&&!this.edge_&&(s=s.filter(function(t){return t.feature.getGeometry().getType()!==Ot.a.CIRCLE}));var a,h,u,c,l=!1,d=null,p=null;if(s.length>0){this.pixelCoordinate_=e,s.sort(this.sortByDistance_);var f=s[0].segment,_=s[0].feature.getGeometry().getType()===Ot.a.CIRCLE;this.vertex_&&!this.edge_?(a=i.getPixelFromCoordinate(f[0]),h=i.getPixelFromCoordinate(f[1]),u=Object(C.h)(t,a),c=Object(C.h)(t,h),Math.sqrt(Math.min(u,c))<=this.pixelTolerance_&&(l=!0,d=u>c?f[1]:f[0],p=i.getPixelFromCoordinate(d))):this.edge_&&(d=_?Object(C.b)(e,s[0].feature.getGeometry()):Object(C.c)(e,f),p=i.getPixelFromCoordinate(d),Object(C.d)(t,p)<=this.pixelTolerance_&&(l=!0,this.vertex_&&!_&&(a=i.getPixelFromCoordinate(f[0]),h=i.getPixelFromCoordinate(f[1]),u=Object(C.h)(p,a),c=Object(C.h)(p,h),Math.sqrt(Math.min(u,c))<=this.pixelTolerance_&&(d=u>c?f[1]:f[0],p=i.getPixelFromCoordinate(d))))),l&&(p=[Math.round(p[0]),Math.round(p[1])])}return{snapped:l,vertex:d,vertexPixel:p}},e.prototype.updateFeature_=function(t){this.removeFeature(t,!1),this.addFeature(t,!1)},e.prototype.writeCircleGeometry_=function(t,e){for(var i=Object(q.c)(e).getCoordinates()[0],n=0,r=i.length-1;n<r;++n){var o=i.slice(n,n+2),s={feature:t,segment:o};this.rBush_.insert(Object(U.b)(o),s)}},e.prototype.writeGeometryCollectionGeometry_=function(t,e){for(var i=e.getGeometriesArray(),n=0;n<i.length;++n){var r=this.SEGMENT_WRITERS_[i[n].getType()];r&&r.call(this,t,i[n])}},e.prototype.writeLineStringGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length-1;n<r;++n){var o=i.slice(n,n+2),s={feature:t,segment:o};this.rBush_.insert(Object(U.b)(o),s)}},e.prototype.writeMultiLineStringGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n)for(var o=i[n],s=0,a=o.length-1;s<a;++s){var h=o.slice(s,s+2),u={feature:t,segment:h};this.rBush_.insert(Object(U.b)(h),u)}},e.prototype.writeMultiPointGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n){var o=i[n],s={feature:t,segment:[o,o]};this.rBush_.insert(e.getExtent(),s)}},e.prototype.writeMultiPolygonGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n)for(var o=i[n],s=0,a=o.length;s<a;++s)for(var h=o[s],u=0,c=h.length-1;u<c;++u){var l=h.slice(u,u+2),d={feature:t,segment:l};this.rBush_.insert(Object(U.b)(l),d)}},e.prototype.writePointGeometry_=function(t,e){var i=e.getCoordinates(),n={feature:t,segment:[i,i]};this.rBush_.insert(e.getExtent(),n)},e.prototype.writePolygonGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n)for(var o=i[n],s=0,a=o.length-1;s<a;++s){var h=o.slice(s,s+2),u={feature:t,segment:h};this.rBush_.insert(Object(U.b)(h),u)}},e}(k),Fe="translatestart",Ie="translating",Te="translateend",je=function(t){function e(e,i,n){t.call(this,e),this.features=i,this.coordinate=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(B.a),Pe=function(t){function e(e){var i,n=e||{};if(t.call(this,n),this.lastCoordinate_=null,this.features_=void 0!==n.features?n.features:null,n.layers)if("function"==typeof n.layers)i=n.layers;else{var r=n.layers;i=function(t){return Object(It.f)(r,t)}}else i=O.b;this.layerFilter_=i,this.hitTolerance_=n.hitTolerance?n.hitTolerance:0,this.lastFeature_=null,Object(dt.a)(this,Object(a.b)(u.ACTIVE),this.handleActiveChanged_,this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleDownEvent=function(t){if(this.lastFeature_=this.featuresAtPixel_(t.pixel,t.map),!this.lastCoordinate_&&this.lastFeature_){this.lastCoordinate_=t.coordinate,this.handleMoveEvent(t);var e=this.features_||new n.a([this.lastFeature_]);return this.dispatchEvent(new je(Fe,e,t.coordinate)),!0}return!1},e.prototype.handleUpEvent=function(t){if(this.lastCoordinate_){this.lastCoordinate_=null,this.handleMoveEvent(t);var e=this.features_||new n.a([this.lastFeature_]);return this.dispatchEvent(new je(Te,e,t.coordinate)),!0}return!1},e.prototype.handleDragEvent=function(t){if(this.lastCoordinate_){var e=t.coordinate,i=e[0]-this.lastCoordinate_[0],r=e[1]-this.lastCoordinate_[1],o=this.features_||new n.a([this.lastFeature_]);o.forEach(function(t){var e=t.getGeometry();e.translate(i,r),t.setGeometry(e)}),this.lastCoordinate_=e,this.dispatchEvent(new je(Ie,o,e))}},e.prototype.handleMoveEvent=function(t){var e=t.map.getViewport();this.featuresAtPixel_(t.pixel,t.map)?(e.classList.remove(this.lastCoordinate_?"ol-grab":"ol-grabbing"),e.classList.add(this.lastCoordinate_?"ol-grabbing":"ol-grab")):e.classList.remove("ol-grab","ol-grabbing")},e.prototype.featuresAtPixel_=function(t,e){return e.forEachFeatureAtPixel(t,function(t){if(!this.features_||Object(It.f)(this.features_.getArray(),t))return t}.bind(this),{layerFilter:this.layerFilter_,hitTolerance:this.hitTolerance_})},e.prototype.getHitTolerance=function(){return this.hitTolerance_},e.prototype.setHitTolerance=function(t){this.hitTolerance_=t},e.prototype.setMap=function(e){var i=this.getMap();t.prototype.setMap.call(this,e),this.updateState_(i)},e.prototype.handleActiveChanged_=function(){this.updateState_(null)},e.prototype.updateState_=function(t){var e=this.getMap(),i=this.getActive();e&&i||(e=e||t)&&e.getViewport().classList.remove("ol-grab","ol-grabbing")},e}(k);function Me(t){var e=t||{},i=new n.a,r=new o(-.005,.05,100);return(void 0===e.altShiftDragRotate||e.altShiftDragRotate)&&i.push(new V),(void 0===e.doubleClickZoom||e.doubleClickZoom)&&i.push(new y({delta:e.zoomDelta,duration:e.zoomDuration})),(void 0===e.dragPan||e.dragPan)&&i.push(new Y({condition:e.onFocusOnly?F:void 0,kinetic:r})),(void 0===e.pinchRotate||e.pinchRotate)&&i.push(new ct),(void 0===e.pinchZoom||e.pinchZoom)&&i.push(new lt({constrainResolution:e.constrainResolution,duration:e.zoomDuration})),(void 0===e.keyboard||e.keyboard)&&(i.push(new rt),i.push(new st({delta:e.zoomDelta,duration:e.zoomDuration}))),(void 0===e.mouseWheelZoom||e.mouseWheelZoom)&&i.push(new ut({condition:e.onFocusOnly?F:void 0,constrainResolution:e.constrainResolution,duration:e.zoomDuration})),(void 0===e.shiftDragZoom||e.shiftDragZoom)&&i.push(new tt({duration:e.zoomDuration})),i}i.d(e,"defaults",function(){return Me}),i.d(e,"DoubleClickZoom",function(){return y}),i.d(e,"DragAndDrop",function(){return yt}),i.d(e,"DragBox",function(){return Q}),i.d(e,"DragPan",function(){return Y}),i.d(e,"DragRotate",function(){return V}),i.d(e,"DragRotateAndZoom",function(){return mt}),i.d(e,"DragZoom",function(){return tt}),i.d(e,"Draw",function(){return te}),i.d(e,"Extent",function(){return se}),i.d(e,"Interaction",function(){return g}),i.d(e,"KeyboardPan",function(){return rt}),i.d(e,"KeyboardZoom",function(){return st}),i.d(e,"Modify",function(){return ye}),i.d(e,"MouseWheelZoom",function(){return ut}),i.d(e,"PinchRotate",function(){return ct}),i.d(e,"PinchZoom",function(){return lt}),i.d(e,"Pointer",function(){return k}),i.d(e,"Select",function(){return be}),i.d(e,"Snap",function(){return Re}),i.d(e,"Translate",function(){return Pe})}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,