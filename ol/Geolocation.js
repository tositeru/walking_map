(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{115:function(t,i,n){"use strict";n.r(i);var o=n(12),e=n(4),r=n(11),s=n(2),c=n(31),a=n(28),h=n(6),u=n(15),p={ACCURACY:"accuracy",ACCURACY_GEOMETRY:"accuracyGeometry",ALTITUDE:"altitude",ALTITUDE_ACCURACY:"altitudeAccuracy",HEADING:"heading",POSITION:"position",PROJECTION:"projection",SPEED:"speed",TRACKING:"tracking",TRACKING_OPTIONS:"trackingOptions"},d=function(t){function i(i){t.call(this,s.a.ERROR),this.code=i.code,this.message=i.message}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i}(r.a),g=function(t){function i(i){t.call(this);var n=i||{};this.position_=null,this.transform_=u.h,this.watchId_=void 0,Object(e.a)(this,Object(o.b)(p.PROJECTION),this.handleProjectionChanged_,this),Object(e.a)(this,Object(o.b)(p.TRACKING),this.handleTrackingChanged_,this),void 0!==n.projection&&this.setProjection(n.projection),void 0!==n.trackingOptions&&this.setTrackingOptions(n.trackingOptions),this.setTracking(void 0!==n.tracking&&n.tracking)}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.disposeInternal=function(){this.setTracking(!1),t.prototype.disposeInternal.call(this)},i.prototype.handleProjectionChanged_=function(){var t=this.getProjection();t&&(this.transform_=Object(u.g)(Object(u.d)("EPSG:4326"),t),this.position_&&this.set(p.POSITION,this.transform_(this.position_)))},i.prototype.handleTrackingChanged_=function(){if(a.d){var t=this.getTracking();t&&void 0===this.watchId_?this.watchId_=navigator.geolocation.watchPosition(this.positionChange_.bind(this),this.positionError_.bind(this),this.getTrackingOptions()):t||void 0===this.watchId_||(navigator.geolocation.clearWatch(this.watchId_),this.watchId_=void 0)}},i.prototype.positionChange_=function(t){var i=t.coords;this.set(p.ACCURACY,i.accuracy),this.set(p.ALTITUDE,null===i.altitude?void 0:i.altitude),this.set(p.ALTITUDE_ACCURACY,null===i.altitudeAccuracy?void 0:i.altitudeAccuracy),this.set(p.HEADING,null===i.heading?void 0:Object(h.i)(i.heading)),this.position_?(this.position_[0]=i.longitude,this.position_[1]=i.latitude):this.position_=[i.longitude,i.latitude];var n=this.transform_(this.position_);this.set(p.POSITION,n),this.set(p.SPEED,null===i.speed?void 0:i.speed);var o=Object(c.a)(this.position_,i.accuracy);o.applyTransform(this.transform_),this.set(p.ACCURACY_GEOMETRY,o),this.changed()},i.prototype.positionError_=function(t){this.setTracking(!1),this.dispatchEvent(new d(t))},i.prototype.getAccuracy=function(){return this.get(p.ACCURACY)},i.prototype.getAccuracyGeometry=function(){return this.get(p.ACCURACY_GEOMETRY)||null},i.prototype.getAltitude=function(){return this.get(p.ALTITUDE)},i.prototype.getAltitudeAccuracy=function(){return this.get(p.ALTITUDE_ACCURACY)},i.prototype.getHeading=function(){return this.get(p.HEADING)},i.prototype.getPosition=function(){return this.get(p.POSITION)},i.prototype.getProjection=function(){return this.get(p.PROJECTION)},i.prototype.getSpeed=function(){return this.get(p.SPEED)},i.prototype.getTracking=function(){return this.get(p.TRACKING)},i.prototype.getTrackingOptions=function(){return this.get(p.TRACKING_OPTIONS)},i.prototype.setProjection=function(t){this.set(p.PROJECTION,Object(u.d)(t))},i.prototype.setTracking=function(t){this.set(p.TRACKING,t)},i.prototype.setTrackingOptions=function(t){this.set(p.TRACKING_OPTIONS,t)},i}(o.a);i.default=g},28:function(t,i,n){"use strict";n.d(i,"c",function(){return e}),n.d(i,"h",function(){return r}),n.d(i,"j",function(){return s}),n.d(i,"e",function(){return c}),n.d(i,"b",function(){return a}),n.d(i,"a",function(){return h}),n.d(i,"d",function(){return u}),n.d(i,"i",function(){return p}),n.d(i,"g",function(){return d}),n.d(i,"f",function(){return g});var o="undefined"!=typeof navigator?navigator.userAgent.toLowerCase():"",e=-1!==o.indexOf("firefox"),r=-1!==o.indexOf("safari")&&-1==o.indexOf("chrom"),s=-1!==o.indexOf("webkit")&&-1==o.indexOf("edge"),c=-1!==o.indexOf("macintosh"),a=window.devicePixelRatio||1,h=function(){var t=!1;try{t=!!document.createElement("canvas").getContext("2d").setLineDash}catch(t){}return t}(),u="geolocation"in navigator,p="ontouchstart"in window,d="PointerEvent"in window,g=!!navigator.msPointerEnabled}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,