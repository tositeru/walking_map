(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{103:function(t,e,i){"use strict";e.a={IMAGE:"image",HYBRID:"hybrid",VECTOR:"vector"}},119:function(t,e,i){"use strict";i.r(e);var r=i(94),n=i(4),o=i(12),a=i(13),s=i(34),h=i(6),c=i(5),l=i(41),g=i(95),_=i(35),u={BLUR:"blur",GRADIENT:"gradient",RADIUS:"radius"},d=["#00f","#0ff","#0f0","#ff0","#f00"];var p=function(t){function e(e){var i=e||{},r=Object(c.a)({},i);delete r.gradient,delete r.radius,delete r.blur,delete r.shadow,delete r.weight,t.call(this,r),this.gradient_=null,this.shadow_=void 0!==i.shadow?i.shadow:250,this.circleImage_=void 0,this.styleCache_=null,Object(n.a)(this,Object(o.b)(u.GRADIENT),this.handleGradientChanged_,this),this.setGradient(i.gradient?i.gradient:d),this.setBlur(void 0!==i.blur?i.blur:15),this.setRadius(void 0!==i.radius?i.radius:8),Object(n.a)(this,Object(o.b)(u.BLUR),this.handleStyleChanged_,this),Object(n.a)(this,Object(o.b)(u.RADIUS),this.handleStyleChanged_,this),this.handleStyleChanged_();var a,s=i.weight?i.weight:"weight";a="string"==typeof s?function(t){return t.get(s)}:s,this.setStyle(function(t,e){var i=a(t),r=void 0!==i?Object(h.a)(i,0,1):1,n=255*r|0,o=this.styleCache_[n];return o||(o=[new _.c({image:new g.a({opacity:r,src:this.circleImage_})})],this.styleCache_[n]=o),o}.bind(this)),this.setRenderOrder(null),Object(n.a)(this,l.a.RENDER,this.handleRender_,this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.createCircle_=function(){var t=this.getRadius(),e=this.getBlur(),i=t+e+1,r=2*i,n=Object(a.a)(r,r);n.shadowOffsetX=n.shadowOffsetY=this.shadow_,n.shadowBlur=e,n.shadowColor="#000",n.beginPath();var o=i-this.shadow_;return n.arc(o,o,t,0,2*Math.PI,!0),n.fill(),n.canvas.toDataURL()},e.prototype.getBlur=function(){return this.get(u.BLUR)},e.prototype.getGradient=function(){return this.get(u.GRADIENT)},e.prototype.getRadius=function(){return this.get(u.RADIUS)},e.prototype.handleGradientChanged_=function(){this.gradient_=function(t){for(var e=Object(a.a)(1,256),i=e.createLinearGradient(0,0,1,256),r=1/(t.length-1),n=0,o=t.length;n<o;++n)i.addColorStop(n*r,t[n]);return e.fillStyle=i,e.fillRect(0,0,1,256),e.getImageData(0,0,1,256).data}(this.getGradient())},e.prototype.handleStyleChanged_=function(){this.circleImage_=this.createCircle_(),this.styleCache_=new Array(256),this.changed()},e.prototype.handleRender_=function(t){for(var e=t.context,i=e.canvas,r=e.getImageData(0,0,i.width,i.height),n=r.data,o=0,a=n.length;o<a;o+=4){var s=4*n[o+3];s&&(n[o]=this.gradient_[s],n[o+1]=this.gradient_[s+1],n[o+2]=this.gradient_[s+2])}e.putImageData(r,0,0)},e.prototype.setBlur=function(t){this.set(u.BLUR,t)},e.prototype.setGradient=function(t){this.set(u.GRADIENT,t)},e.prototype.setRadius=function(t){this.set(u.RADIUS,t)},e}(s.a),f=i(105),y=i(32),O=i(106),m=i(29),I=i(9),v=i(109),R=i(103),E=function(t){function e(e){var i=e||{},r=i.renderMode||R.a.HYBRID;Object(I.a)(null==r||r==R.a.IMAGE||r==R.a.HYBRID||r==R.a.VECTOR,28),i.declutter&&r==R.a.IMAGE&&(r=R.a.HYBRID),i.renderMode=r;var n=Object(c.a)({},i);delete n.preload,delete n.useInterimTilesOnError,t.call(this,n),this.setPreload(i.preload?i.preload:0),this.setUseInterimTilesOnError(void 0===i.useInterimTilesOnError||i.useInterimTilesOnError),this.type=m.a.VECTOR_TILE}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getPreload=function(){return this.get(v.a.PRELOAD)},e.prototype.getUseInterimTilesOnError=function(){return this.get(v.a.USE_INTERIM_TILES_ON_ERROR)},e.prototype.setPreload=function(t){this.set(v.a.PRELOAD,t)},e.prototype.setUseInterimTilesOnError=function(t){this.set(v.a.USE_INTERIM_TILES_ON_ERROR,t)},e}(s.a);E.prototype.getSource;var T=E;i.d(e,"Group",function(){return r.a}),i.d(e,"Heatmap",function(){return p}),i.d(e,"Image",function(){return f.a}),i.d(e,"Layer",function(){return y.a}),i.d(e,"Tile",function(){return O.a}),i.d(e,"Vector",function(){return s.a}),i.d(e,"VectorTile",function(){return T})},34:function(t,e,i){"use strict";var r=i(29),n=i(32),o=i(61),a=i(5),s=i(35),h="renderOrder",c=function(t){function e(e){var i=e||{},n=Object(a.a)({},i);delete n.style,delete n.renderBuffer,delete n.updateWhileAnimating,delete n.updateWhileInteracting,t.call(this,n),this.declutter_=void 0!==i.declutter&&i.declutter,this.renderBuffer_=void 0!==i.renderBuffer?i.renderBuffer:100,this.style_=null,this.styleFunction_=void 0,this.setStyle(i.style),this.updateWhileAnimating_=void 0!==i.updateWhileAnimating&&i.updateWhileAnimating,this.updateWhileInteracting_=void 0!==i.updateWhileInteracting&&i.updateWhileInteracting,this.renderMode_=i.renderMode||o.a.VECTOR,this.type=r.a.VECTOR}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getDeclutter=function(){return this.declutter_},e.prototype.setDeclutter=function(t){this.declutter_=t},e.prototype.getRenderBuffer=function(){return this.renderBuffer_},e.prototype.getRenderOrder=function(){return this.get(h)},e.prototype.getStyle=function(){return this.style_},e.prototype.getStyleFunction=function(){return this.styleFunction_},e.prototype.getUpdateWhileAnimating=function(){return this.updateWhileAnimating_},e.prototype.getUpdateWhileInteracting=function(){return this.updateWhileInteracting_},e.prototype.setRenderOrder=function(t){this.set(h,t)},e.prototype.setStyle=function(t){this.style_=void 0!==t?t:s.a,this.styleFunction_=null===t?void 0:Object(s.d)(this.style_),this.changed()},e.prototype.getRenderMode=function(){return this.renderMode_},e}(n.a);c.prototype.getSource,e.a=c},82:function(t,e,i){"use strict";i.d(e,"b",function(){return l});var r=i(13),n=i(4),o=i(40),a=i(2),s=i(30),h=i(71),c=function(t){function e(e,i,r,n,o,a){t.call(this),this.hitDetectionImage_=null,this.image_=e||new Image,null!==n&&(this.image_.crossOrigin=n),this.canvas_=a?document.createElement("canvas"):null,this.color_=a,this.imageListenerKeys_=null,this.imageState_=o,this.size_=r,this.src_=i,this.tainted_}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.isTainted_=function(){if(void 0===this.tainted_&&this.imageState_===s.a.LOADED){this.tainted_=!1;var t=Object(r.a)(1,1);try{t.drawImage(this.image_,0,0),t.getImageData(0,0,1,1)}catch(t){this.tainted_=!0}}return!0===this.tainted_},e.prototype.dispatchChangeEvent_=function(){this.dispatchEvent(a.a.CHANGE)},e.prototype.handleImageError_=function(){this.imageState_=s.a.ERROR,this.unlistenImage_(),this.dispatchChangeEvent_()},e.prototype.handleImageLoad_=function(){this.imageState_=s.a.LOADED,this.size_&&(this.image_.width=this.size_[0],this.image_.height=this.size_[1]),this.size_=[this.image_.width,this.image_.height],this.unlistenImage_(),this.replaceColor_(),this.dispatchChangeEvent_()},e.prototype.getImage=function(t){return this.canvas_?this.canvas_:this.image_},e.prototype.getImageState=function(){return this.imageState_},e.prototype.getHitDetectionImage=function(t){if(!this.hitDetectionImage_)if(this.isTainted_()){var e=this.size_[0],i=this.size_[1],n=Object(r.a)(e,i);n.fillRect(0,0,e,i),this.hitDetectionImage_=n.canvas}else this.hitDetectionImage_=this.image_;return this.hitDetectionImage_},e.prototype.getSize=function(){return this.size_},e.prototype.getSrc=function(){return this.src_},e.prototype.load=function(){if(this.imageState_==s.a.IDLE){this.imageState_=s.a.LOADING,this.imageListenerKeys_=[Object(n.b)(this.image_,a.a.ERROR,this.handleImageError_,this),Object(n.b)(this.image_,a.a.LOAD,this.handleImageLoad_,this)];try{this.image_.src=this.src_}catch(t){this.handleImageError_()}}},e.prototype.replaceColor_=function(){if(this.color_&&!this.isTainted_()){this.canvas_.width=this.image_.width,this.canvas_.height=this.image_.height;var t=this.canvas_.getContext("2d");t.drawImage(this.image_,0,0);for(var e=t.getImageData(0,0,this.image_.width,this.image_.height),i=e.data,r=this.color_[0]/255,n=this.color_[1]/255,o=this.color_[2]/255,a=0,s=i.length;a<s;a+=4)i[a]*=r,i[a+1]*=n,i[a+2]*=o;t.putImageData(e,0,0)}},e.prototype.unlistenImage_=function(){this.imageListenerKeys_.forEach(n.e),this.imageListenerKeys_=null},e}(o.a);function l(t,e,i,r,n,o){var a=h.a.get(e,r,o);return a||(a=new c(t,e,i,r,n,o),h.a.set(e,r,o,a)),a}e.a=c},94:function(t,e,i){"use strict";var r=i(3),n=i(25),o=i(21),a=i(12),s=i(50),h=i(9),c=i(4),l=i(2),g=i(1),_=i(58),u=i(5),d=i(16),p={LAYERS:"layers"},f=function(t){function e(e){var i=e||{},r=Object(u.a)({},i);delete r.layers;var o=i.layers;t.call(this,r),this.layersListenerKeys_=[],this.listenerKeys_={},Object(c.a)(this,Object(a.b)(p.LAYERS),this.handleLayersChanged_,this),o?Array.isArray(o)?o=new n.a(o.slice(),{unique:!0}):Object(h.a)("function"==typeof o.getArray,43):o=new n.a(void 0,{unique:!0}),this.setLayers(o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleLayerChange_=function(){this.changed()},e.prototype.handleLayersChanged_=function(){this.layersListenerKeys_.forEach(c.e),this.layersListenerKeys_.length=0;var t=this.getLayers();for(var e in this.layersListenerKeys_.push(Object(c.a)(t,o.a.ADD,this.handleLayersAdd_,this),Object(c.a)(t,o.a.REMOVE,this.handleLayersRemove_,this)),this.listenerKeys_)this.listenerKeys_[e].forEach(c.e);Object(u.b)(this.listenerKeys_);for(var i=t.getArray(),n=0,a=i.length;n<a;n++){var h=i[n];this.listenerKeys_[Object(r.c)(h)]=[Object(c.a)(h,s.a.PROPERTYCHANGE,this.handleLayerChange_,this),Object(c.a)(h,l.a.CHANGE,this.handleLayerChange_,this)]}this.changed()},e.prototype.handleLayersAdd_=function(t){var e=t.element;this.listenerKeys_[Object(r.c)(e)]=[Object(c.a)(e,s.a.PROPERTYCHANGE,this.handleLayerChange_,this),Object(c.a)(e,l.a.CHANGE,this.handleLayerChange_,this)],this.changed()},e.prototype.handleLayersRemove_=function(t){var e=t.element,i=Object(r.c)(e);this.listenerKeys_[i].forEach(c.e),delete this.listenerKeys_[i],this.changed()},e.prototype.getLayers=function(){return this.get(p.LAYERS)},e.prototype.setLayers=function(t){this.set(p.LAYERS,t)},e.prototype.getLayersArray=function(t){var e=void 0!==t?t:[];return this.getLayers().forEach(function(t){t.getLayersArray(e)}),e},e.prototype.getLayerStatesArray=function(t){var e=void 0!==t?t:[],i=e.length;this.getLayers().forEach(function(t){t.getLayerStatesArray(e)});for(var r=this.getLayerState(),n=i,o=e.length;n<o;n++){var a=e[n];a.opacity*=r.opacity,a.visible=a.visible&&r.visible,a.maxResolution=Math.min(a.maxResolution,r.maxResolution),a.minResolution=Math.max(a.minResolution,r.minResolution),void 0!==r.extent&&(void 0!==a.extent?a.extent=Object(g.B)(a.extent,r.extent):a.extent=r.extent)}return e},e.prototype.getSourceState=function(){return d.a.READY},e}(_.a);e.a=f},95:function(t,e,i){"use strict";var r=i(3),n=i(30),o=i(9),a=i(44),s=i(4),h=i(2),c={FRACTION:"fraction",PIXELS:"pixels"},l=i(82),g={BOTTOM_LEFT:"bottom-left",BOTTOM_RIGHT:"bottom-right",TOP_LEFT:"top-left",TOP_RIGHT:"top-right"},_=function(t){function e(e){var i=e||{},s=void 0!==i.opacity?i.opacity:1,h=void 0!==i.rotation?i.rotation:0,_=void 0!==i.scale?i.scale:1,u=void 0!==i.rotateWithView&&i.rotateWithView;t.call(this,{opacity:s,rotation:h,scale:_,rotateWithView:u}),this.anchor_=void 0!==i.anchor?i.anchor:[.5,.5],this.normalizedAnchor_=null,this.anchorOrigin_=void 0!==i.anchorOrigin?i.anchorOrigin:g.TOP_LEFT,this.anchorXUnits_=void 0!==i.anchorXUnits?i.anchorXUnits:c.FRACTION,this.anchorYUnits_=void 0!==i.anchorYUnits?i.anchorYUnits:c.FRACTION,this.crossOrigin_=void 0!==i.crossOrigin?i.crossOrigin:null;var d=void 0!==i.img?i.img:null,p=void 0!==i.imgSize?i.imgSize:null,f=i.src;Object(o.a)(!(void 0!==f&&d),4),Object(o.a)(!d||d&&p,5),void 0!==f&&0!==f.length||!d||(f=d.src||Object(r.c)(d)),Object(o.a)(void 0!==f&&f.length>0,6);var y=void 0!==i.src?n.a.IDLE:n.a.LOADED;this.color_=void 0!==i.color?Object(a.a)(i.color):null,this.iconImage_=Object(l.b)(d,f,p,this.crossOrigin_,y,this.color_),this.offset_=void 0!==i.offset?i.offset:[0,0],this.offsetOrigin_=void 0!==i.offsetOrigin?i.offsetOrigin:g.TOP_LEFT,this.origin_=null,this.size_=void 0!==i.size?i.size:null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.clone=function(){return new e({anchor:this.anchor_.slice(),anchorOrigin:this.anchorOrigin_,anchorXUnits:this.anchorXUnits_,anchorYUnits:this.anchorYUnits_,crossOrigin:this.crossOrigin_,color:this.color_&&this.color_.slice?this.color_.slice():this.color_||void 0,src:this.getSrc(),offset:this.offset_.slice(),offsetOrigin:this.offsetOrigin_,size:null!==this.size_?this.size_.slice():void 0,opacity:this.getOpacity(),scale:this.getScale(),rotation:this.getRotation(),rotateWithView:this.getRotateWithView()})},e.prototype.getAnchor=function(){if(this.normalizedAnchor_)return this.normalizedAnchor_;var t=this.anchor_,e=this.getSize();if(this.anchorXUnits_==c.FRACTION||this.anchorYUnits_==c.FRACTION){if(!e)return null;t=this.anchor_.slice(),this.anchorXUnits_==c.FRACTION&&(t[0]*=e[0]),this.anchorYUnits_==c.FRACTION&&(t[1]*=e[1])}if(this.anchorOrigin_!=g.TOP_LEFT){if(!e)return null;t===this.anchor_&&(t=this.anchor_.slice()),this.anchorOrigin_!=g.TOP_RIGHT&&this.anchorOrigin_!=g.BOTTOM_RIGHT||(t[0]=-t[0]+e[0]),this.anchorOrigin_!=g.BOTTOM_LEFT&&this.anchorOrigin_!=g.BOTTOM_RIGHT||(t[1]=-t[1]+e[1])}return this.normalizedAnchor_=t,this.normalizedAnchor_},e.prototype.setAnchor=function(t){this.anchor_=t,this.normalizedAnchor_=null},e.prototype.getColor=function(){return this.color_},e.prototype.getImage=function(t){return this.iconImage_.getImage(t)},e.prototype.getImageSize=function(){return this.iconImage_.getSize()},e.prototype.getHitDetectionImageSize=function(){return this.getImageSize()},e.prototype.getImageState=function(){return this.iconImage_.getImageState()},e.prototype.getHitDetectionImage=function(t){return this.iconImage_.getHitDetectionImage(t)},e.prototype.getOrigin=function(){if(this.origin_)return this.origin_;var t=this.offset_;if(this.offsetOrigin_!=g.TOP_LEFT){var e=this.getSize(),i=this.iconImage_.getSize();if(!e||!i)return null;t=t.slice(),this.offsetOrigin_!=g.TOP_RIGHT&&this.offsetOrigin_!=g.BOTTOM_RIGHT||(t[0]=i[0]-e[0]-t[0]),this.offsetOrigin_!=g.BOTTOM_LEFT&&this.offsetOrigin_!=g.BOTTOM_RIGHT||(t[1]=i[1]-e[1]-t[1])}return this.origin_=t,this.origin_},e.prototype.getSrc=function(){return this.iconImage_.getSrc()},e.prototype.getSize=function(){return this.size_?this.size_:this.iconImage_.getSize()},e.prototype.listenImageChange=function(t,e){return Object(s.a)(this.iconImage_,h.a.CHANGE,t,e)},e.prototype.load=function(){this.iconImage_.load()},e.prototype.unlistenImageChange=function(t,e){Object(s.c)(this.iconImage_,h.a.CHANGE,t,e)},e}(i(74).a);e.a=_}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,