(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{111:function(t,o,n){"use strict";n.r(o);var i=n(64),e=n(3),r=n(8),s=n(6);function a(t){return t}var u=n(12),c=n(7);var h=n(47),l=n(14),p="center",f="resolution",m="rotation",d=n(9),g=n(18),v=n(24),R=n(1),_=n(10),y=n(31),M=n(5),b=n(15),A=n(45);n.d(o,"createCenterConstraint",function(){return x}),n.d(o,"createResolutionConstraint",function(){return Z}),n.d(o,"createRotationConstraint",function(){return I}),n.d(o,"isNoopAnimation",function(){return w});var O=0,j=function(t){function o(o){t.call(this);var n=Object(M.a)({},o);this.hints_=[0,0],this.animations_=[],this.updateAnimationKey_,this.updateAnimations_=this.updateAnimations_.bind(this),this.projection_=Object(b.b)(n.projection,"EPSG:3857"),this.applyOptions_(n)}return t&&(o.__proto__=t),o.prototype=Object.create(t&&t.prototype),o.prototype.constructor=o,o.prototype.applyOptions_=function(t){var o={};o[p]=void 0!==t.center?t.center:null;var n=Z(t);this.maxResolution_=n.maxResolution,this.minResolution_=n.minResolution,this.zoomFactor_=n.zoomFactor,this.resolutions_=t.resolutions,this.minZoom_=n.minZoom;var i=x(t),e=n.constraint,r=I(t);this.constraints_={center:i,resolution:e,rotation:r},void 0!==t.resolution?o[f]=t.resolution:void 0!==t.zoom&&(o[f]=this.constrainResolution(this.maxResolution_,t.zoom-this.minZoom_),this.resolutions_&&(o[f]=Object(s.a)(Number(this.getResolution()||o[f]),this.minResolution_,this.maxResolution_))),o[m]=void 0!==t.rotation?t.rotation:0,this.setProperties(o),this.options_=t},o.prototype.getUpdatedOptions_=function(t){var o=Object(M.a)({},this.options_);return void 0!==o.resolution?o.resolution=this.getResolution():o.zoom=this.getZoom(),o.center=this.getCenter(),o.rotation=this.getRotation(),Object(M.a)({},o,t)},o.prototype.animate=function(t){var o,n=arguments,i=arguments.length;if(i>1&&"function"==typeof arguments[i-1]&&(o=arguments[i-1],--i),!this.isDef()){var e=arguments[i-1];return e.center&&this.setCenter(e.center),void 0!==e.zoom&&this.setZoom(e.zoom),void 0!==e.rotation&&this.setRotation(e.rotation),void(o&&C(o,!0))}for(var r=Date.now(),a=this.getCenter().slice(),u=this.getResolution(),c=this.getRotation(),h=[],p=0;p<i;++p){var f=n[p],m={start:r,complete:!1,anchor:f.anchor,duration:void 0!==f.duration?f.duration:1e3,easing:f.easing||v.c};if(f.center&&(m.sourceCenter=a,m.targetCenter=f.center,a=m.targetCenter),void 0!==f.zoom?(m.sourceResolution=u,m.targetResolution=this.constrainResolution(this.maxResolution_,f.zoom-this.minZoom_,0),u=m.targetResolution):f.resolution&&(m.sourceResolution=u,m.targetResolution=f.resolution,u=m.targetResolution),void 0!==f.rotation){m.sourceRotation=c;var d=Object(s.d)(f.rotation-c+Math.PI,2*Math.PI)-Math.PI;m.targetRotation=c+d,c=m.targetRotation}m.callback=o,w(m)?m.complete=!0:r+=m.duration,h.push(m)}this.animations_.push(h),this.setHint(l.a.ANIMATING,1),this.updateAnimations_()},o.prototype.getAnimating=function(){return this.hints_[l.a.ANIMATING]>0},o.prototype.getInteracting=function(){return this.hints_[l.a.INTERACTING]>0},o.prototype.cancelAnimations=function(){this.setHint(l.a.ANIMATING,-this.hints_[l.a.ANIMATING]);for(var t=0,o=this.animations_.length;t<o;++t){var n=this.animations_[t];n[0].callback&&C(n[0].callback,!1)}this.animations_.length=0},o.prototype.updateAnimations_=function(){if(void 0!==this.updateAnimationKey_&&(cancelAnimationFrame(this.updateAnimationKey_),this.updateAnimationKey_=void 0),this.getAnimating()){for(var t=Date.now(),o=!1,n=this.animations_.length-1;n>=0;--n){for(var i=this.animations_[n],e=!0,r=0,a=i.length;r<a;++r){var u=i[r];if(!u.complete){var c=t-u.start,h=u.duration>0?c/u.duration:1;h>=1?(u.complete=!0,h=1):e=!1;var d=u.easing(h);if(u.sourceCenter){var g=u.sourceCenter[0],v=u.sourceCenter[1],R=g+d*(u.targetCenter[0]-g),_=v+d*(u.targetCenter[1]-v);this.set(p,[R,_])}if(u.sourceResolution&&u.targetResolution){var y=1===d?u.targetResolution:u.sourceResolution+d*(u.targetResolution-u.sourceResolution);u.anchor&&this.set(p,this.calculateCenterZoom(y,u.anchor)),this.set(f,y)}if(void 0!==u.sourceRotation&&void 0!==u.targetRotation){var M=1===d?Object(s.d)(u.targetRotation+Math.PI,2*Math.PI)-Math.PI:u.sourceRotation+d*(u.targetRotation-u.sourceRotation);u.anchor&&this.set(p,this.calculateCenterRotate(M,u.anchor)),this.set(m,M)}if(o=!0,!u.complete)break}}if(e){this.animations_[n]=null,this.setHint(l.a.ANIMATING,-1);var b=i[0].callback;b&&C(b,!0)}}this.animations_=this.animations_.filter(Boolean),o&&void 0===this.updateAnimationKey_&&(this.updateAnimationKey_=requestAnimationFrame(this.updateAnimations_))}},o.prototype.calculateCenterRotate=function(t,o){var n,i=this.getCenter();return void 0!==i&&(n=[i[0]-o[0],i[1]-o[1]],Object(g.f)(n,t-this.getRotation()),Object(g.a)(n,o)),n},o.prototype.calculateCenterZoom=function(t,o){var n,i=this.getCenter(),e=this.getResolution();void 0!==i&&void 0!==e&&(n=[o[0]-t*(o[0]-i[0])/e,o[1]-t*(o[1]-i[1])/e]);return n},o.prototype.getSizeFromViewport_=function(){var t=[100,100],o='.ol-viewport[data-view="'+Object(e.c)(this)+'"]',n=document.querySelector(o);if(n){var i=getComputedStyle(n);t[0]=parseInt(i.width,10),t[1]=parseInt(i.height,10)}return t},o.prototype.constrainCenter=function(t){return this.constraints_.center(t)},o.prototype.constrainResolution=function(t,o,n){var i=o||0,e=n||0;return this.constraints_.resolution(t,i,e)},o.prototype.constrainRotation=function(t,o){var n=o||0;return this.constraints_.rotation(t,n)},o.prototype.getCenter=function(){return this.get(p)},o.prototype.getConstraints=function(){return this.constraints_},o.prototype.getHints=function(t){return void 0!==t?(t[0]=this.hints_[0],t[1]=this.hints_[1],t):this.hints_.slice()},o.prototype.calculateExtent=function(t){var o=t||this.getSizeFromViewport_(),n=this.getCenter();Object(d.a)(n,1);var i=this.getResolution();Object(d.a)(void 0!==i,2);var e=this.getRotation();return Object(d.a)(void 0!==e,3),Object(R.z)(n,i,e,o)},o.prototype.getMaxResolution=function(){return this.maxResolution_},o.prototype.getMinResolution=function(){return this.minResolution_},o.prototype.getMaxZoom=function(){return this.getZoomForResolution(this.minResolution_)},o.prototype.setMaxZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({maxZoom:t}))},o.prototype.getMinZoom=function(){return this.getZoomForResolution(this.maxResolution_)},o.prototype.setMinZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({minZoom:t}))},o.prototype.getProjection=function(){return this.projection_},o.prototype.getResolution=function(){return this.get(f)},o.prototype.getResolutions=function(){return this.resolutions_},o.prototype.getResolutionForExtent=function(t,o){var n=o||this.getSizeFromViewport_(),i=Object(R.E)(t)/n[0],e=Object(R.A)(t)/n[1];return Math.max(i,e)},o.prototype.getResolutionForValueFunction=function(t){var o=t||2,n=this.maxResolution_,i=this.minResolution_,e=Math.log(n/i)/Math.log(o);return function(t){return n/Math.pow(o,t*e)}},o.prototype.getRotation=function(){return this.get(m)},o.prototype.getValueForResolutionFunction=function(t){var o=t||2,n=this.maxResolution_,i=this.minResolution_,e=Math.log(n/i)/Math.log(o);return function(t){return Math.log(n/t)/Math.log(o)/e}},o.prototype.getState=function(t){var o=this.getCenter(),n=this.getProjection(),i=this.getResolution(),e=i/t,r=this.getRotation();return{center:[Math.round(o[0]/e)*e,Math.round(o[1]/e)*e],projection:void 0!==n?n:null,resolution:i,rotation:r,zoom:this.getZoom()}},o.prototype.getZoom=function(){var t,o=this.getResolution();return void 0!==o&&(t=this.getZoomForResolution(o)),t},o.prototype.getZoomForResolution=function(t){var o,n,i=this.minZoom_||0;if(this.resolutions_){var e=Object(c.h)(this.resolutions_,t,1);i=e,o=this.resolutions_[e],n=e==this.resolutions_.length-1?2:o/this.resolutions_[e+1]}else o=this.maxResolution_,n=this.zoomFactor_;return i+Math.log(o/t)/Math.log(n)},o.prototype.getResolutionForZoom=function(t){return this.constrainResolution(this.maxResolution_,t-this.minZoom_,0)},o.prototype.fit=function(t,o){var n,i=o||{},e=i.size;e||(e=this.getSizeFromViewport_()),Object(d.a)(Array.isArray(t)||"function"==typeof t.getSimplifiedGeometry,24),Array.isArray(t)?(Object(d.a)(!Object(R.H)(t),25),n=Object(y.d)(t)):t.getType()===_.a.CIRCLE?(t=t.getExtent(),(n=Object(y.d)(t)).rotate(this.getRotation(),Object(R.x)(t))):n=t;var s,a=void 0!==i.padding?i.padding:[0,0,0,0],u=void 0===i.constrainResolution||i.constrainResolution,c=void 0!==i.nearest&&i.nearest;s=void 0!==i.minResolution?i.minResolution:void 0!==i.maxZoom?this.constrainResolution(this.maxResolution_,i.maxZoom-this.minZoom_,0):0;for(var h=n.getFlatCoordinates(),l=this.getRotation(),p=Math.cos(-l),f=Math.sin(-l),m=1/0,g=1/0,v=-1/0,M=-1/0,b=n.getStride(),A=0,O=h.length;A<O;A+=b){var j=h[A]*p-h[A+1]*f,x=h[A]*f+h[A+1]*p;m=Math.min(m,j),g=Math.min(g,x),v=Math.max(v,j),M=Math.max(M,x)}var Z=this.getResolutionForExtent([m,g,v,M],[e[0]-a[1]-a[3],e[1]-a[0]-a[2]]);if(Z=isNaN(Z)?s:Math.max(Z,s),u){var I=this.constrainResolution(Z,0,0);!c&&I<Z&&(I=this.constrainResolution(I,-1,0)),Z=I}f=-f;var w=(m+v)/2,F=(g+M)/2,z=[(w+=(a[1]-a[3])/2*Z)*p-(F+=(a[0]-a[2])/2*Z)*f,F*p+w*f],N=i.callback?i.callback:r.c;void 0!==i.duration?this.animate({resolution:Z,center:z,duration:i.duration,easing:i.easing},N):(this.setResolution(Z),this.setCenter(z),C(N,!0))},o.prototype.centerOn=function(t,o,n){var i=this.getRotation(),e=Math.cos(-i),r=Math.sin(-i),s=t[0]*e-t[1]*r,a=t[1]*e+t[0]*r,u=this.getResolution(),c=(s+=(o[0]/2-n[0])*u)*e-(a+=(n[1]-o[1]/2)*u)*(r=-r),h=a*e+s*r;this.setCenter([c,h])},o.prototype.isDef=function(){return!!this.getCenter()&&void 0!==this.getResolution()},o.prototype.rotate=function(t,o){if(void 0!==o){var n=this.calculateCenterRotate(t,o);this.setCenter(n)}this.setRotation(t)},o.prototype.setCenter=function(t){this.set(p,t),this.getAnimating()&&this.cancelAnimations()},o.prototype.setHint=function(t,o){return this.hints_[t]+=o,this.changed(),this.hints_[t]},o.prototype.setResolution=function(t){this.set(f,t),this.getAnimating()&&this.cancelAnimations()},o.prototype.setRotation=function(t){this.set(m,t),this.getAnimating()&&this.cancelAnimations()},o.prototype.setZoom=function(t){this.setResolution(this.getResolutionForZoom(t))},o}(u.a);function C(t,o){setTimeout(function(){t(o)},0)}function x(t){return void 0!==t.extent?(o=t.extent,function(t){return t?[Object(s.a)(t[0],o[0],o[2]),Object(s.a)(t[1],o[1],o[3])]:void 0}):a;var o}function Z(t){var o,n,e,r=void 0!==t.minZoom?t.minZoom:O,a=void 0!==t.maxZoom?t.maxZoom:28,u=void 0!==t.zoomFactor?t.zoomFactor:2;if(void 0!==t.resolutions){var h=t.resolutions;n=h[r],e=void 0!==h[a]?h[a]:h[h.length-1],o=function(t){return function(o,n,i){if(void 0!==o){var e=Object(c.h)(t,o,i);e=Object(s.a)(e+n,0,t.length-1);var r=Math.floor(e);if(e!=r&&r<t.length-1){var a=t[r]/t[r+1];return t[r]/Math.pow(a,e-r)}return t[r]}}}(h)}else{var l=Object(b.b)(t.projection,"EPSG:3857"),p=l.getExtent(),f=(p?Math.max(Object(R.E)(p),Object(R.A)(p)):360*b.a[A.b.DEGREES]/l.getMetersPerUnit())/i.b/Math.pow(2,O),m=f/Math.pow(2,28-O);void 0!==(n=t.maxResolution)?r=0:n=f/Math.pow(u,r),void 0===(e=t.minResolution)&&(e=void 0!==t.maxZoom?void 0!==t.maxResolution?n/Math.pow(u,a):f/Math.pow(u,a):m),a=r+Math.floor(Math.log(n/e)/Math.log(u)),e=n/Math.pow(u,a-r),o=function(t,o,n){return function(i,e,r){if(void 0!==i){var s=-r/2+.5,a=Math.floor(Math.log(o/i)/Math.log(t)+s),u=Math.max(a+e,0);return void 0!==n&&(u=Math.min(u,n)),o/Math.pow(t,u)}}}(u,n,a-r)}return{constraint:o,maxResolution:n,minResolution:e,minZoom:r,zoomFactor:u}}function I(t){if(void 0===t.enableRotation||t.enableRotation){var o=t.constrainRotation;return void 0===o||!0===o?Object(h.b)():!1===o?h.d:"number"==typeof o?Object(h.a)(o):h.d}return h.c}function w(t){return!(t.sourceCenter&&t.targetCenter&&!Object(g.e)(t.sourceCenter,t.targetCenter))&&(t.sourceResolution===t.targetResolution&&t.sourceRotation===t.targetRotation)}o.default=j},14:function(t,o,n){"use strict";o.a={ANIMATING:0,INTERACTING:1}},18:function(t,o,n){"use strict";n.d(o,"a",function(){return i}),n.d(o,"b",function(){return e}),n.d(o,"c",function(){return r}),n.d(o,"e",function(){return s}),n.d(o,"f",function(){return a}),n.d(o,"g",function(){return u}),n.d(o,"h",function(){return c}),n.d(o,"d",function(){return h}),n.d(o,"i",function(){return l});n(6),n(51);function i(t,o){return t[0]+=o[0],t[1]+=o[1],t}function e(t,o){var n=o.getRadius(),i=o.getCenter(),e=i[0],r=i[1],s=t[0]-e,a=t[1]-r;0===s&&0===a&&(s=1);var u=Math.sqrt(s*s+a*a);return[e+n*s/u,r+n*a/u]}function r(t,o){var n,i,e=t[0],r=t[1],s=o[0],a=o[1],u=s[0],c=s[1],h=a[0],l=a[1],p=h-u,f=l-c,m=0===p&&0===f?0:(p*(e-u)+f*(r-c))/(p*p+f*f||0);return m<=0?(n=u,i=c):m>=1?(n=h,i=l):(n=u+m*p,i=c+m*f),[n,i]}function s(t,o){for(var n=!0,i=t.length-1;i>=0;--i)if(t[i]!=o[i]){n=!1;break}return n}function a(t,o){var n=Math.cos(o),i=Math.sin(o),e=t[0]*n-t[1]*i,r=t[1]*n+t[0]*i;return t[0]=e,t[1]=r,t}function u(t,o){return t[0]*=o,t[1]*=o,t}function c(t,o){var n=t[0]-o[0],i=t[1]-o[1];return n*n+i*i}function h(t,o){return Math.sqrt(c(t,o))}function l(t,o){return c(t,r(t,o))}},24:function(t,o,n){"use strict";function i(t){return Math.pow(t,3)}function e(t){return 1-i(1-t)}function r(t){return 3*t*t-2*t*t*t}function s(t){return t}n.d(o,"a",function(){return i}),n.d(o,"b",function(){return e}),n.d(o,"c",function(){return r}),n.d(o,"d",function(){return s})},47:function(t,o,n){"use strict";n.d(o,"c",function(){return e}),n.d(o,"d",function(){return r}),n.d(o,"a",function(){return s}),n.d(o,"b",function(){return a});var i=n(6);function e(t,o){return void 0!==t?0:void 0}function r(t,o){return void 0!==t?t+o:void 0}function s(t){var o=2*Math.PI/t;return function(t,n){return void 0!==t?t=Math.floor((t+n)/o+.5)*o:void 0}}function a(t){var o=t||Object(i.i)(5);return function(t,n){return void 0!==t?Math.abs(t+n)<=o?0:t+n:void 0}}},51:function(t,o,n){"use strict";function i(t,o,n){var i=void 0!==n?t.toFixed(n):""+t,e=i.indexOf(".");return(e=-1===e?i.length:e)>o?i:new Array(1+o-e).join("0")+i}function e(t,o){for(var n=(""+t).split("."),i=(""+o).split("."),e=0;e<Math.max(n.length,i.length);e++){var r=parseInt(n[e]||"0",10),s=parseInt(i[e]||"0",10);if(r>s)return 1;if(s>r)return-1}return 0}n.d(o,"b",function(){return i}),n.d(o,"a",function(){return e})},64:function(t,o,n){"use strict";n.d(o,"a",function(){return i}),n.d(o,"b",function(){return e});var i=42,e=256}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,