(window.webpackJsonp=window.webpackJsonp||[]).push([[9,4,10,11],[,,,,,,,function(t,e,i){"use strict";function n(t,e,i){for(var n,o,s=i||r,a=0,h=t.length,l=!1;a<h;)(o=+s(t[n=a+(h-a>>1)],e))<0?a=n+1:(h=n,l=!o);return l?a:~a}function r(t,e){return t>e?1:t<e?-1:0}function o(t,e){return t.indexOf(e)>=0}function s(t,e,i){var n,r=t.length;if(t[0]<=e)return 0;if(e<=t[r-1])return r-1;if(i>0){for(n=1;n<r;++n)if(t[n]<e)return n-1}else if(i<0){for(n=1;n<r;++n)if(t[n]<=e)return n}else for(n=1;n<r;++n){if(t[n]==e)return n;if(t[n]<e)return t[n-1]-e<e-t[n]?n-1:n}return r-1}function a(t,e,i){for(;e<i;){var n=t[e];t[e]=t[i],t[i]=n,++e,--i}}function h(t,e){for(var i=Array.isArray(e)?e:[e],n=i.length,r=0;r<n;r++)t[t.length]=i[r]}function l(t,e){var i=t.indexOf(e),n=i>-1;return n&&t.splice(i,1),n}function c(t,e){for(var i,n=t.length>>>0,r=0;r<n;r++)if(e(i=t[r],r,t))return i;return null}function u(t,e){var i=t.length;if(i!==e.length)return!1;for(var n=0;n<i;n++)if(t[n]!==e[n])return!1;return!0}function p(t,e){var i,n=t.length,r=Array(t.length);for(i=0;i<n;i++)r[i]={index:i,value:t[i]};for(r.sort(function(t,i){return e(t.value,i.value)||t.index-i.index}),i=0;i<t.length;i++)t[i]=r[i].value}function d(t,e){var i;return!t.every(function(n,r){return i=r,!e(n,r,t)})?i:-1}function f(t,e,i){var n=e||r;return t.every(function(e,r){if(0===r)return!0;var o=n(t[r-1],e);return!(o>0||i&&0===o)})}i.d(e,"a",function(){return n}),i.d(e,"i",function(){return r}),i.d(e,"f",function(){return o}),i.d(e,"h",function(){return s}),i.d(e,"k",function(){return a}),i.d(e,"c",function(){return h}),i.d(e,"j",function(){return l}),i.d(e,"d",function(){return c}),i.d(e,"b",function(){return u}),i.d(e,"l",function(){return p}),i.d(e,"e",function(){return d}),i.d(e,"g",function(){return f})},,,,,,,function(t,e,i){"use strict";e.a={ANIMATING:0,INTERACTING:1}},,function(t,e,i){"use strict";e.a={UNDEFINED:"undefined",LOADING:"loading",READY:"ready",ERROR:"error"}},,function(t,e,i){"use strict";i.d(e,"a",function(){return n}),i.d(e,"b",function(){return r}),i.d(e,"c",function(){return o}),i.d(e,"e",function(){return s}),i.d(e,"f",function(){return a}),i.d(e,"g",function(){return h}),i.d(e,"h",function(){return l}),i.d(e,"d",function(){return c}),i.d(e,"i",function(){return u});i(6),i(51);function n(t,e){return t[0]+=e[0],t[1]+=e[1],t}function r(t,e){var i=e.getRadius(),n=e.getCenter(),r=n[0],o=n[1],s=t[0]-r,a=t[1]-o;0===s&&0===a&&(s=1);var h=Math.sqrt(s*s+a*a);return[r+i*s/h,o+i*a/h]}function o(t,e){var i,n,r=t[0],o=t[1],s=e[0],a=e[1],h=s[0],l=s[1],c=a[0],u=a[1],p=c-h,d=u-l,f=0===p&&0===d?0:(p*(r-h)+d*(o-l))/(p*p+d*d||0);return f<=0?(i=h,n=l):f>=1?(i=c,n=u):(i=h+f*p,n=l+f*d),[i,n]}function s(t,e){for(var i=!0,n=t.length-1;n>=0;--n)if(t[n]!=e[n]){i=!1;break}return i}function a(t,e){var i=Math.cos(e),n=Math.sin(e),r=t[0]*i-t[1]*n,o=t[1]*i+t[0]*n;return t[0]=r,t[1]=o,t}function h(t,e){return t[0]*=e,t[1]*=e,t}function l(t,e){var i=t[0]-e[0],n=t[1]-e[1];return i*i+n*n}function c(t,e){return Math.sqrt(l(t,e))}function u(t,e){return l(t,o(t,e))}},function(t,e,i){"use strict";e.a={IDLE:0,LOADING:1,LOADED:2,ERROR:3,EMPTY:4,ABORT:5}},,function(t,e,i){"use strict";e.a={ADD:"add",REMOVE:"remove"}},function(t,e,i){"use strict";function n(t,e,i,n,r){for(var o=void 0!==r?r:[],s=0,a=e;a<i;a+=n)o[s++]=t.slice(a,a+n);return o.length=s,o}function r(t,e,i,r,o){for(var s=void 0!==o?o:[],a=0,h=0,l=i.length;h<l;++h){var c=i[h];s[a++]=n(t,e,c,r,s[a]),e=c}return s.length=a,s}function o(t,e,i,n,o){for(var s=void 0!==o?o:[],a=0,h=0,l=i.length;h<l;++h){var c=i[h];s[a++]=r(t,e,c,n,s[a]),e=c[c.length-1]}return s.length=a,s}i.d(e,"a",function(){return n}),i.d(e,"b",function(){return r}),i.d(e,"c",function(){return o})},,function(t,e,i){"use strict";function n(t){return Math.pow(t,3)}function r(t){return 1-n(1-t)}function o(t){return 3*t*t-2*t*t*t}function s(t){return t}i.d(e,"a",function(){return n}),i.d(e,"b",function(){return r}),i.d(e,"c",function(){return o}),i.d(e,"d",function(){return s})},function(t,e,i){"use strict";var n=i(67),r=i(21),o=i(12),s=i(11),a="length",h=function(t){function e(e,i){t.call(this,e),this.element=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(s.a),l=function(t){function e(e,i){t.call(this);var n=i||{};if(this.unique_=!!n.unique,this.array_=e||[],this.unique_)for(var r=0,o=this.array_.length;r<o;++r)this.assertUnique_(this.array_[r],r);this.updateLength_()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.clear=function(){for(;this.getLength()>0;)this.pop()},e.prototype.extend=function(t){for(var e=0,i=t.length;e<i;++e)this.push(t[e]);return this},e.prototype.forEach=function(t){for(var e=this.array_,i=0,n=e.length;i<n;++i)t(e[i],i,e)},e.prototype.getArray=function(){return this.array_},e.prototype.item=function(t){return this.array_[t]},e.prototype.getLength=function(){return this.get(a)},e.prototype.insertAt=function(t,e){this.unique_&&this.assertUnique_(e),this.array_.splice(t,0,e),this.updateLength_(),this.dispatchEvent(new h(r.a.ADD,e))},e.prototype.pop=function(){return this.removeAt(this.getLength()-1)},e.prototype.push=function(t){this.unique_&&this.assertUnique_(t);var e=this.getLength();return this.insertAt(e,t),this.getLength()},e.prototype.remove=function(t){for(var e=this.array_,i=0,n=e.length;i<n;++i)if(e[i]===t)return this.removeAt(i)},e.prototype.removeAt=function(t){var e=this.array_[t];return this.array_.splice(t,1),this.updateLength_(),this.dispatchEvent(new h(r.a.REMOVE,e)),e},e.prototype.setAt=function(t,e){var i=this.getLength();if(t<i){this.unique_&&this.assertUnique_(e,t);var n=this.array_[t];this.array_[t]=e,this.dispatchEvent(new h(r.a.REMOVE,n)),this.dispatchEvent(new h(r.a.ADD,e))}else{for(var o=i;o<t;++o)this.insertAt(o,void 0);this.insertAt(t,e)}},e.prototype.updateLength_=function(){this.set(a,this.array_.length)},e.prototype.assertUnique_=function(t,e){for(var i=0,r=this.array_.length;i<r;++i)if(this.array_[i]===t&&i!==e)throw new n.a(58)},e}(o.a);e.a=l},function(t,e,i){"use strict";var n=i(2);e.a={SINGLECLICK:"singleclick",CLICK:n.a.CLICK,DBLCLICK:n.a.DBLCLICK,POINTERDRAG:"pointerdrag",POINTERMOVE:"pointermove",POINTERDOWN:"pointerdown",POINTERUP:"pointerup",POINTEROVER:"pointerover",POINTEROUT:"pointerout",POINTERENTER:"pointerenter",POINTERLEAVE:"pointerleave",POINTERCANCEL:"pointercancel"}},function(t,e,i){"use strict";i.d(e,"a",function(){return r}),i.d(e,"b",function(){return o}),i.d(e,"e",function(){return s}),i.d(e,"c",function(){return h}),i.d(e,"d",function(){return l});var n=i(6);function r(t,e,i,r,o,s,a){var h=(i-e)/r;if(h<3){for(;e<i;e+=r)s[a++]=t[e],s[a++]=t[e+1];return a}var l=new Array(h);l[0]=1,l[h-1]=1;for(var c=[e,i-r],u=0;c.length>0;){for(var p=c.pop(),d=c.pop(),f=0,_=t[d],g=t[d+1],y=t[p],v=t[p+1],m=d+r;m<p;m+=r){var b=t[m],E=t[m+1],O=Object(n.g)(b,E,_,g,y,v);O>f&&(u=m,f=O)}f>o&&(l[(u-e)/r]=1,d+r<u&&c.push(d,u),u+r<p&&c.push(u,p))}for(var x=0;x<h;++x)l[x]&&(s[a++]=t[e+x*r],s[a++]=t[e+x*r+1]);return a}function o(t,e,i,n,o,s,a,h){for(var l=0,c=i.length;l<c;++l){var u=i[l];a=r(t,e,u,n,o,s,a),h.push(a),e=u}return a}function s(t,e){return e*Math.round(t/e)}function a(t,e,i,n,r,o,a){if(e==i)return a;var h,l,c=s(t[e],r),u=s(t[e+1],r);e+=n,o[a++]=c,o[a++]=u;do{if(h=s(t[e],r),l=s(t[e+1],r),(e+=n)==i)return o[a++]=h,o[a++]=l,a}while(h==c&&l==u);for(;e<i;){var p=s(t[e],r),d=s(t[e+1],r);if(e+=n,p!=h||d!=l){var f=h-c,_=l-u,g=p-c,y=d-u;f*y==_*g&&(f<0&&g<f||f==g||f>0&&g>f)&&(_<0&&y<_||_==y||_>0&&y>_)?(h=p,l=d):(o[a++]=h,o[a++]=l,c=h,u=l,h=p,l=d)}}return o[a++]=h,o[a++]=l,a}function h(t,e,i,n,r,o,s,h){for(var l=0,c=i.length;l<c;++l){var u=i[l];s=a(t,e,u,n,r,o,s),h.push(s),e=u}return s}function l(t,e,i,n,r,o,s,a){for(var l=0,c=i.length;l<c;++l){var u=i[l],p=[];s=h(t,e,u,n,r,o,s,p),a.push(p),e=u[u.length-1]}return s}},,function(t,e,i){"use strict";e.a={IMAGE:"IMAGE",TILE:"TILE",VECTOR_TILE:"VECTOR_TILE",VECTOR:"VECTOR"}},,function(t,e,i){"use strict";var n=i(7),r=i(1),o=i(37),s=i(10),a=i(20),h=i(46),l=i(33),c=i(23),u=i(22),p=i(27),d=function(t){function e(e,i){t.call(this),this.maxDelta_=-1,this.maxDeltaRevision_=-1,void 0===i||Array.isArray(e[0])?this.setCoordinates(e,i):this.setFlatCoordinates(i,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout)},e.prototype.closestPointXY=function(t,e,i,n){return n<Object(r.e)(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(Object(l.e)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),Object(l.d)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!0,t,e,i,n))},e.prototype.getArea=function(){return Object(h.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getCoordinates=function(){return Object(u.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getSimplifiedGeometryInternal=function(t){var i=[];return i.length=Object(p.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,i,0),new e(i,o.a.XY)},e.prototype.getType=function(){return s.a.LINEAR_RING},e.prototype.intersectsExtent=function(t){return!1},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=Object(c.b)(this.flatCoordinates,0,t,this.stride),this.changed()},e}(a.a),f=i(42),_=i(83),g=i(36),y=i(59),v=i(43),m=i(66),b=i(6);i.d(e,"a",function(){return O}),i.d(e,"d",function(){return x}),i.d(e,"c",function(){return C}),i.d(e,"e",function(){return T});var E=function(t){function e(e,i,n){t.call(this),this.ends_=[],this.flatInteriorPointRevision_=-1,this.flatInteriorPoint_=null,this.maxDelta_=-1,this.maxDeltaRevision_=-1,this.orientedRevision_=-1,this.orientedFlatCoordinates_=null,void 0!==i&&n?(this.setFlatCoordinates(i,e),this.ends_=n):this.setCoordinates(e,i)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.appendLinearRing=function(t){this.flatCoordinates?Object(n.c)(this.flatCoordinates,t.getFlatCoordinates()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.ends_.push(this.flatCoordinates.length),this.changed()},e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout,this.ends_.slice())},e.prototype.closestPointXY=function(t,e,i,n){return n<Object(r.e)(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(Object(l.a)(this.flatCoordinates,0,this.ends_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),Object(l.b)(this.flatCoordinates,0,this.ends_,this.stride,this.maxDelta_,!0,t,e,i,n))},e.prototype.containsXY=function(t,e){return Object(g.c)(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,e)},e.prototype.getArea=function(){return Object(h.b)(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride)},e.prototype.getCoordinates=function(t){var e;return void 0!==t?(e=this.getOrientedFlatCoordinates().slice(),Object(m.c)(e,0,this.ends_,this.stride,t)):e=this.flatCoordinates,Object(u.b)(e,0,this.ends_,this.stride)},e.prototype.getEnds=function(){return this.ends_},e.prototype.getFlatInteriorPoint=function(){if(this.flatInteriorPointRevision_!=this.getRevision()){var t=Object(r.x)(this.getExtent());this.flatInteriorPoint_=Object(y.a)(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,0),this.flatInteriorPointRevision_=this.getRevision()}return this.flatInteriorPoint_},e.prototype.getInteriorPoint=function(){return new f.default(this.getFlatInteriorPoint(),o.a.XYM)},e.prototype.getLinearRingCount=function(){return this.ends_.length},e.prototype.getLinearRing=function(t){return t<0||this.ends_.length<=t?null:new d(this.flatCoordinates.slice(0===t?0:this.ends_[t-1],this.ends_[t]),this.layout)},e.prototype.getLinearRings=function(){for(var t=this.layout,e=this.flatCoordinates,i=this.ends_,n=[],r=0,o=0,s=i.length;o<s;++o){var a=i[o],h=new d(e.slice(r,a),t);n.push(h),r=a}return n},e.prototype.getOrientedFlatCoordinates=function(){if(this.orientedRevision_!=this.getRevision()){var t=this.flatCoordinates;Object(m.a)(t,0,this.ends_,this.stride)?this.orientedFlatCoordinates_=t:(this.orientedFlatCoordinates_=t.slice(),this.orientedFlatCoordinates_.length=Object(m.c)(this.orientedFlatCoordinates_,0,this.ends_,this.stride)),this.orientedRevision_=this.getRevision()}return this.orientedFlatCoordinates_},e.prototype.getSimplifiedGeometryInternal=function(t){var i=[],n=[];return i.length=Object(p.c)(this.flatCoordinates,0,this.ends_,this.stride,Math.sqrt(t),i,0,n),new e(i,o.a.XY,n)},e.prototype.getType=function(){return s.a.POLYGON},e.prototype.intersectsExtent=function(t){return Object(v.c)(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t)},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,2),this.flatCoordinates||(this.flatCoordinates=[]);var i=Object(c.c)(this.flatCoordinates,0,t,this.stride,this.ends_);this.flatCoordinates.length=0===i.length?0:i[i.length-1],this.changed()},e}(a.a);e.b=E;function O(t,e,i,r){for(var s=i||32,a=[],h=0;h<s;++h)Object(n.c)(a,Object(_.b)(t,e,2*Math.PI*h/s,r));return a.push(a[0],a[1]),new E(a,o.a.XY,[a.length])}function x(t){var e=t[0],i=t[1],n=t[2],r=t[3],s=[e,i,e,r,n,r,n,i,e,i];return new E(s,o.a.XY,[s.length])}function C(t,e,i){for(var n=e||32,r=t.getStride(),o=t.getLayout(),s=t.getCenter(),a=r*(n+1),h=new Array(a),l=0;l<a;l+=r){h[l]=0,h[l+1]=0;for(var c=2;c<r;c++)h[l+c]=s[c]}var u=[h.length],p=new E(h,o,u);return T(p,s,t.getRadius(),i),p}function T(t,e,i,n){for(var r=t.getFlatCoordinates(),o=t.getStride(),s=r.length/o-1,a=n||0,h=0;h<=s;++h){var l=h*o,c=a+2*Object(b.d)(h,s)*Math.PI/s;r[l]=e[0]+i*Math.cos(c),r[l+1]=e[1]+i*Math.sin(c)}t.changed()}},function(t,e,i){"use strict";i.d(e,"b",function(){return d});var n=i(4),r=i(2),o=i(3),s=i(12),a=i(58),h=i(56),l=i(5),c=i(41),u=i(16),p=function(t){function e(e){var i=Object(l.a)({},e);delete i.source,t.call(this,i),this.mapPrecomposeKey_=null,this.mapRenderKey_=null,this.sourceChangeKey_=null,e.map&&this.setMap(e.map),Object(n.a)(this,Object(s.b)(h.a.SOURCE),this.handleSourcePropertyChange_,this);var r=e.source?e.source:null;this.setSource(r)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getLayersArray=function(t){var e=t||[];return e.push(this),e},e.prototype.getLayerStatesArray=function(t){var e=t||[];return e.push(this.getLayerState()),e},e.prototype.getSource=function(){return this.get(h.a.SOURCE)||null},e.prototype.getSourceState=function(){var t=this.getSource();return t?t.getState():u.a.UNDEFINED},e.prototype.handleSourceChange_=function(){this.changed()},e.prototype.handleSourcePropertyChange_=function(){this.sourceChangeKey_&&(Object(n.e)(this.sourceChangeKey_),this.sourceChangeKey_=null);var t=this.getSource();t&&(this.sourceChangeKey_=Object(n.a)(t,r.a.CHANGE,this.handleSourceChange_,this)),this.changed()},e.prototype.setMap=function(t){this.mapPrecomposeKey_&&(Object(n.e)(this.mapPrecomposeKey_),this.mapPrecomposeKey_=null),t||this.changed(),this.mapRenderKey_&&(Object(n.e)(this.mapRenderKey_),this.mapRenderKey_=null),t&&(this.mapPrecomposeKey_=Object(n.a)(t,c.a.PRECOMPOSE,function(t){var e=t,i=this.getLayerState();i.managed=!1,void 0===this.getZIndex()&&(i.zIndex=1/0),e.frameState.layerStatesArray.push(i),e.frameState.layerStates[Object(o.c)(this)]=i},this),this.mapRenderKey_=Object(n.a)(this,r.a.CHANGE,t.render,t),this.changed())},e.prototype.setSource=function(t){this.set(h.a.SOURCE,t)},e}(a.a);function d(t,e){return t.visible&&e>=t.minResolution&&e<t.maxResolution}e.a=p},function(t,e,i){"use strict";i.d(e,"e",function(){return o}),i.d(e,"a",function(){return s}),i.d(e,"f",function(){return a}),i.d(e,"d",function(){return h}),i.d(e,"b",function(){return l}),i.d(e,"c",function(){return c});var n=i(6);function r(t,e,i,r,o,s,a){var h,l=t[e],c=t[e+1],u=t[i]-l,p=t[i+1]-c;if(0===u&&0===p)h=e;else{var d=((o-l)*u+(s-c)*p)/(u*u+p*p);if(d>1)h=i;else{if(d>0){for(var f=0;f<r;++f)a[f]=Object(n.c)(t[e+f],t[i+f],d);return void(a.length=r)}h=e}}for(var _=0;_<r;++_)a[_]=t[h+_];a.length=r}function o(t,e,i,r,o){var s=t[e],a=t[e+1];for(e+=r;e<i;e+=r){var h=t[e],l=t[e+1],c=Object(n.f)(s,a,h,l);c>o&&(o=c),s=h,a=l}return o}function s(t,e,i,n,r){for(var s=0,a=i.length;s<a;++s){var h=i[s];r=o(t,e,h,n,r),e=h}return r}function a(t,e,i,n,r){for(var o=0,a=i.length;o<a;++o){var h=i[o];r=s(t,e,h,n,r),e=h[h.length-1]}return r}function h(t,e,i,o,s,a,h,l,c,u,p){if(e==i)return u;var d,f;if(0===s){if((f=Object(n.f)(h,l,t[e],t[e+1]))<u){for(d=0;d<o;++d)c[d]=t[e+d];return c.length=o,f}return u}for(var _=p||[NaN,NaN],g=e+o;g<i;)if(r(t,g-o,g,o,h,l,_),(f=Object(n.f)(h,l,_[0],_[1]))<u){for(u=f,d=0;d<o;++d)c[d]=_[d];c.length=o,g+=o}else g+=o*Math.max((Math.sqrt(f)-Math.sqrt(u))/s|0,1);if(a&&(r(t,i-o,e,o,h,l,_),(f=Object(n.f)(h,l,_[0],_[1]))<u)){for(u=f,d=0;d<o;++d)c[d]=_[d];c.length=o}return u}function l(t,e,i,n,r,o,s,a,l,c,u){for(var p=u||[NaN,NaN],d=0,f=i.length;d<f;++d){var _=i[d];c=h(t,e,_,n,r,o,s,a,l,c,p),e=_}return c}function c(t,e,i,n,r,o,s,a,h,c,u){for(var p=u||[NaN,NaN],d=0,f=i.length;d<f;++d){var _=i[d];c=l(t,e,_,n,r,o,s,a,h,c,p),e=_[_.length-1]}return c}},function(t,e,i){"use strict";var n=i(29),r=i(32),o=i(61),s=i(5),a=i(35),h="renderOrder",l=function(t){function e(e){var i=e||{},r=Object(s.a)({},i);delete r.style,delete r.renderBuffer,delete r.updateWhileAnimating,delete r.updateWhileInteracting,t.call(this,r),this.declutter_=void 0!==i.declutter&&i.declutter,this.renderBuffer_=void 0!==i.renderBuffer?i.renderBuffer:100,this.style_=null,this.styleFunction_=void 0,this.setStyle(i.style),this.updateWhileAnimating_=void 0!==i.updateWhileAnimating&&i.updateWhileAnimating,this.updateWhileInteracting_=void 0!==i.updateWhileInteracting&&i.updateWhileInteracting,this.renderMode_=i.renderMode||o.a.VECTOR,this.type=n.a.VECTOR}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getDeclutter=function(){return this.declutter_},e.prototype.setDeclutter=function(t){this.declutter_=t},e.prototype.getRenderBuffer=function(){return this.renderBuffer_},e.prototype.getRenderOrder=function(){return this.get(h)},e.prototype.getStyle=function(){return this.style_},e.prototype.getStyleFunction=function(){return this.styleFunction_},e.prototype.getUpdateWhileAnimating=function(){return this.updateWhileAnimating_},e.prototype.getUpdateWhileInteracting=function(){return this.updateWhileInteracting_},e.prototype.setRenderOrder=function(t){this.set(h,t)},e.prototype.setStyle=function(t){this.style_=void 0!==t?t:a.a,this.styleFunction_=null===t?void 0:Object(a.d)(this.style_),this.changed()},e.prototype.getRenderMode=function(){return this.renderMode_},e}(r.a);l.prototype.getSource,e.a=l},,function(t,e,i){"use strict";i.d(e,"a",function(){return r}),i.d(e,"b",function(){return o}),i.d(e,"c",function(){return s}),i.d(e,"d",function(){return a});var n=i(1);function r(t,e,i,r,s){return!Object(n.t)(s,function(n){return!o(t,e,i,r,n[0],n[1])})}function o(t,e,i,n,r,o){for(var s=0,a=t[i-n],h=t[i-n+1];e<i;e+=n){var l=t[e],c=t[e+1];h<=o?c>o&&(l-a)*(o-h)-(r-a)*(c-h)>0&&s++:c<=o&&(l-a)*(o-h)-(r-a)*(c-h)<0&&s--,a=l,h=c}return 0!==s}function s(t,e,i,n,r,s){if(0===i.length)return!1;if(!o(t,e,i[0],n,r,s))return!1;for(var a=1,h=i.length;a<h;++a)if(o(t,i[a-1],i[a],n,r,s))return!1;return!0}function a(t,e,i,n,r,o){if(0===i.length)return!1;for(var a=0,h=i.length;a<h;++a){var l=i[a];if(s(t,e,l,n,r,o))return!0;e=l[l.length-1]}return!1}},,,function(t,e,i){"use strict";var n=i(3),r=i(25),o=i(21),s=i(50),a=i(7),h=i(9),l=i(4),c=i(11),u=i(2),p=i(1),d=i(72),f=i(8);function _(t,e){return[[-1/0,-1/0,1/0,1/0]]}var g=i(5),y=i(54),v=i(16),m=i(53),b=i(52),E=function(t){function e(e,i){t.call(this,e),this.feature=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(c.a),O=function(t){function e(e){var i=e||{};t.call(this,{attributions:i.attributions,projection:void 0,state:v.a.READY,wrapX:void 0===i.wrapX||i.wrapX}),this.loader_=f.c,this.format_=i.format,this.overlaps_=null==i.overlaps||i.overlaps,this.url_=i.url,void 0!==i.loader?this.loader_=i.loader:void 0!==this.url_&&(Object(h.a)(this.format_,7),this.loader_=Object(d.b)(this.url_,this.format_)),this.strategy_=void 0!==i.strategy?i.strategy:_;var n,o,s=void 0===i.useSpatialIndex||i.useSpatialIndex;this.featuresRtree_=s?new b.a:null,this.loadedExtentsRtree_=new b.a,this.nullGeometryFeatures_={},this.idIndex_={},this.undefIdIndex_={},this.featureChangeKeys_={},this.featuresCollection_=null,Array.isArray(i.features)?o=i.features:i.features&&(o=(n=i.features).getArray()),s||void 0!==n||(n=new r.a(o)),void 0!==o&&this.addFeaturesInternal(o),void 0!==n&&this.bindFeaturesCollection_(n)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.addFeature=function(t){this.addFeatureInternal(t),this.changed()},e.prototype.addFeatureInternal=function(t){var e=Object(n.c)(t);if(this.addToIndex_(e,t)){this.setupChangeEvents_(e,t);var i=t.getGeometry();if(i){var r=i.getExtent();this.featuresRtree_&&this.featuresRtree_.insert(r,t)}else this.nullGeometryFeatures_[e]=t;this.dispatchEvent(new E(m.a.ADDFEATURE,t))}},e.prototype.setupChangeEvents_=function(t,e){this.featureChangeKeys_[t]=[Object(l.a)(e,u.a.CHANGE,this.handleFeatureChange_,this),Object(l.a)(e,s.a.PROPERTYCHANGE,this.handleFeatureChange_,this)]},e.prototype.addToIndex_=function(t,e){var i=!0,n=e.getId();return void 0!==n?n.toString()in this.idIndex_?i=!1:this.idIndex_[n.toString()]=e:(Object(h.a)(!(t in this.undefIdIndex_),30),this.undefIdIndex_[t]=e),i},e.prototype.addFeatures=function(t){this.addFeaturesInternal(t),this.changed()},e.prototype.addFeaturesInternal=function(t){for(var e=[],i=[],r=[],o=0,s=t.length;o<s;o++){var a=t[o],h=Object(n.c)(a);this.addToIndex_(h,a)&&i.push(a)}for(var l=0,c=i.length;l<c;l++){var u=i[l],p=Object(n.c)(u);this.setupChangeEvents_(p,u);var d=u.getGeometry();if(d){var f=d.getExtent();e.push(f),r.push(u)}else this.nullGeometryFeatures_[p]=u}this.featuresRtree_&&this.featuresRtree_.load(e,r);for(var _=0,g=i.length;_<g;_++)this.dispatchEvent(new E(m.a.ADDFEATURE,i[_]))},e.prototype.bindFeaturesCollection_=function(t){var e=!1;Object(l.a)(this,m.a.ADDFEATURE,function(i){e||(e=!0,t.push(i.feature),e=!1)}),Object(l.a)(this,m.a.REMOVEFEATURE,function(i){e||(e=!0,t.remove(i.feature),e=!1)}),Object(l.a)(t,o.a.ADD,function(t){e||(e=!0,this.addFeature(t.element),e=!1)},this),Object(l.a)(t,o.a.REMOVE,function(t){e||(e=!0,this.removeFeature(t.element),e=!1)},this),this.featuresCollection_=t},e.prototype.clear=function(t){if(t){for(var e in this.featureChangeKeys_){this.featureChangeKeys_[e].forEach(l.e)}this.featuresCollection_||(this.featureChangeKeys_={},this.idIndex_={},this.undefIdIndex_={})}else if(this.featuresRtree_)for(var i in this.featuresRtree_.forEach(this.removeFeatureInternal,this),this.nullGeometryFeatures_)this.removeFeatureInternal(this.nullGeometryFeatures_[i]);this.featuresCollection_&&this.featuresCollection_.clear(),this.featuresRtree_&&this.featuresRtree_.clear(),this.loadedExtentsRtree_.clear(),this.nullGeometryFeatures_={};var n=new E(m.a.CLEAR);this.dispatchEvent(n),this.changed()},e.prototype.forEachFeature=function(t){if(this.featuresRtree_)return this.featuresRtree_.forEach(t);this.featuresCollection_&&this.featuresCollection_.forEach(t)},e.prototype.forEachFeatureAtCoordinateDirect=function(t,e){var i=[t[0],t[1],t[0],t[1]];return this.forEachFeatureInExtent(i,function(i){return i.getGeometry().intersectsCoordinate(t)?e(i):void 0})},e.prototype.forEachFeatureInExtent=function(t,e){if(this.featuresRtree_)return this.featuresRtree_.forEachInExtent(t,e);this.featuresCollection_&&this.featuresCollection_.forEach(e)},e.prototype.forEachFeatureIntersectingExtent=function(t,e){return this.forEachFeatureInExtent(t,function(i){if(i.getGeometry().intersectsExtent(t)){var n=e(i);if(n)return n}})},e.prototype.getFeaturesCollection=function(){return this.featuresCollection_},e.prototype.getFeatures=function(){var t;return this.featuresCollection_?t=this.featuresCollection_.getArray():this.featuresRtree_&&(t=this.featuresRtree_.getAll(),Object(g.d)(this.nullGeometryFeatures_)||Object(a.c)(t,Object(g.c)(this.nullGeometryFeatures_))),t},e.prototype.getFeaturesAtCoordinate=function(t){var e=[];return this.forEachFeatureAtCoordinateDirect(t,function(t){e.push(t)}),e},e.prototype.getFeaturesInExtent=function(t){return this.featuresRtree_.getInExtent(t)},e.prototype.getClosestFeatureToCoordinate=function(t,e){var i=t[0],n=t[1],r=null,o=[NaN,NaN],s=1/0,a=[-1/0,-1/0,1/0,1/0],h=e||f.b;return this.featuresRtree_.forEachInExtent(a,function(t){if(h(t)){var e=t.getGeometry(),l=s;if((s=e.closestPointXY(i,n,o,s))<l){r=t;var c=Math.sqrt(s);a[0]=i-c,a[1]=n-c,a[2]=i+c,a[3]=n+c}}}),r},e.prototype.getExtent=function(t){return this.featuresRtree_.getExtent(t)},e.prototype.getFeatureById=function(t){var e=this.idIndex_[t.toString()];return void 0!==e?e:null},e.prototype.getFormat=function(){return this.format_},e.prototype.getOverlaps=function(){return this.overlaps_},e.prototype.getUrl=function(){return this.url_},e.prototype.handleFeatureChange_=function(t){var e=t.target,i=Object(n.c)(e),r=e.getGeometry();if(r){var o=r.getExtent();i in this.nullGeometryFeatures_?(delete this.nullGeometryFeatures_[i],this.featuresRtree_&&this.featuresRtree_.insert(o,e)):this.featuresRtree_&&this.featuresRtree_.update(o,e)}else i in this.nullGeometryFeatures_||(this.featuresRtree_&&this.featuresRtree_.remove(e),this.nullGeometryFeatures_[i]=e);var s=e.getId();if(void 0!==s){var a=s.toString();i in this.undefIdIndex_?(delete this.undefIdIndex_[i],this.idIndex_[a]=e):this.idIndex_[a]!==e&&(this.removeFromIdIndex_(e),this.idIndex_[a]=e)}else i in this.undefIdIndex_||(this.removeFromIdIndex_(e),this.undefIdIndex_[i]=e);this.changed(),this.dispatchEvent(new E(m.a.CHANGEFEATURE,e))},e.prototype.hasFeature=function(t){var e=t.getId();return void 0!==e?e in this.idIndex_:Object(n.c)(t)in this.undefIdIndex_},e.prototype.isEmpty=function(){return this.featuresRtree_.isEmpty()&&Object(g.d)(this.nullGeometryFeatures_)},e.prototype.loadFeatures=function(t,e,i){var n=this,r=this.loadedExtentsRtree_,o=this.strategy_(t,e);this.loading=!1;for(var s=function(t,s){var a=o[t];r.forEachInExtent(a,function(t){return Object(p.g)(t.extent,a)})||(n.loader_.call(n,a,e,i),r.insert(a,{extent:a.slice()}),n.loading=n.loader_!==f.c)},a=0,h=o.length;a<h;++a)s(a)},e.prototype.removeLoadedExtent=function(t){var e,i=this.loadedExtentsRtree_;i.forEachInExtent(t,function(i){if(Object(p.p)(i.extent,t))return e=i,!0}),e&&i.remove(e)},e.prototype.removeFeature=function(t){var e=Object(n.c)(t);e in this.nullGeometryFeatures_?delete this.nullGeometryFeatures_[e]:this.featuresRtree_&&this.featuresRtree_.remove(t),this.removeFeatureInternal(t),this.changed()},e.prototype.removeFeatureInternal=function(t){var e=Object(n.c)(t);this.featureChangeKeys_[e].forEach(l.e),delete this.featureChangeKeys_[e];var i=t.getId();void 0!==i?delete this.idIndex_[i.toString()]:delete this.undefIdIndex_[e],this.dispatchEvent(new E(m.a.REMOVEFEATURE,t))},e.prototype.removeFromIdIndex_=function(t){var e=!1;for(var i in this.idIndex_)if(this.idIndex_[i]===t){delete this.idIndex_[i],e=!0;break}return e},e.prototype.setLoader=function(t){this.loader_=t},e}(y.a);e.a=O},,function(t,e,i){"use strict";e.a={POSTCOMPOSE:"postcompose",PRECOMPOSE:"precompose",RENDER:"render",RENDERCOMPLETE:"rendercomplete"}},,function(t,e,i){"use strict";i.d(e,"a",function(){return s}),i.d(e,"b",function(){return a}),i.d(e,"c",function(){return h}),i.d(e,"d",function(){return l});var n=i(1),r=i(36),o=i(60);function s(t,e,i,r,s){var a=Object(n.s)(Object(n.j)(),t,e,i,r);return!!Object(n.F)(s,a)&&(!!Object(n.g)(s,a)||(a[0]>=s[0]&&a[2]<=s[2]||(a[1]>=s[1]&&a[3]<=s[3]||Object(o.a)(t,e,i,r,function(t,e){return Object(n.G)(s,t,e)}))))}function a(t,e,i,n,r){for(var o=0,a=i.length;o<a;++o){if(s(t,e,i[o],n,r))return!0;e=i[o]}return!1}function h(t,e,i,n,o){if(!function(t,e,i,n,o){return!!(s(t,e,i,n,o)||Object(r.b)(t,e,i,n,o[0],o[1])||Object(r.b)(t,e,i,n,o[0],o[3])||Object(r.b)(t,e,i,n,o[2],o[1])||Object(r.b)(t,e,i,n,o[2],o[3]))}(t,e,i[0],n,o))return!1;if(1===i.length)return!0;for(var a=1,h=i.length;a<h;++a)if(Object(r.a)(t,i[a-1],i[a],n,o)&&!s(t,i[a-1],i[a],n,o))return!1;return!0}function l(t,e,i,n,r){for(var o=0,s=i.length;o<s;++o){var a=i[o];if(h(t,e,a,n,r))return!0;e=a[a.length-1]}return!1}},,,function(t,e,i){"use strict";function n(t,e,i,n){for(var r=0,o=t[i-n],s=t[i-n+1];e<i;e+=n){var a=t[e],h=t[e+1];r+=s*a-o*h,o=a,s=h}return r/2}function r(t,e,i,r){for(var o=0,s=0,a=i.length;s<a;++s){var h=i[s];o+=n(t,e,h,r),e=h}return o}function o(t,e,i,n){for(var o=0,s=0,a=i.length;s<a;++s){var h=i[s];o+=r(t,e,h,n),e=h[h.length-1]}return o}i.d(e,"a",function(){return n}),i.d(e,"b",function(){return r}),i.d(e,"c",function(){return o})},function(t,e,i){"use strict";i.d(e,"c",function(){return r}),i.d(e,"d",function(){return o}),i.d(e,"a",function(){return s}),i.d(e,"b",function(){return a});var n=i(6);function r(t,e){return void 0!==t?0:void 0}function o(t,e){return void 0!==t?t+e:void 0}function s(t){var e=2*Math.PI/t;return function(t,i){return void 0!==t?t=Math.floor((t+i)/e+.5)*e:void 0}}function a(t){var e=t||Object(n.i)(5);return function(t,i){return void 0!==t?Math.abs(t+i)<=e?0:t+i:void 0}}},function(t,e,i){"use strict";i.r(e),i.d(e,"createStyleFunction",function(){return h});var n=i(9),r=i(4),o=i(2),s=i(12),a=function(t){function e(e){if(t.call(this),this.id_=void 0,this.geometryName_="geometry",this.style_=null,this.styleFunction_=void 0,this.geometryChangeKey_=null,Object(r.a)(this,Object(s.b)(this.geometryName_),this.handleGeometryChanged_,this),e)if("function"==typeof e.getSimplifiedGeometry){var i=e;this.setGeometry(i)}else{var n=e;this.setProperties(n)}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.clone=function(){var t=new e(this.getProperties());t.setGeometryName(this.getGeometryName());var i=this.getGeometry();i&&t.setGeometry(i.clone());var n=this.getStyle();return n&&t.setStyle(n),t},e.prototype.getGeometry=function(){return this.get(this.geometryName_)},e.prototype.getId=function(){return this.id_},e.prototype.getGeometryName=function(){return this.geometryName_},e.prototype.getStyle=function(){return this.style_},e.prototype.getStyleFunction=function(){return this.styleFunction_},e.prototype.handleGeometryChange_=function(){this.changed()},e.prototype.handleGeometryChanged_=function(){this.geometryChangeKey_&&(Object(r.e)(this.geometryChangeKey_),this.geometryChangeKey_=null);var t=this.getGeometry();t&&(this.geometryChangeKey_=Object(r.a)(t,o.a.CHANGE,this.handleGeometryChange_,this)),this.changed()},e.prototype.setGeometry=function(t){this.set(this.geometryName_,t)},e.prototype.setStyle=function(t){this.style_=t,this.styleFunction_=t?h(t):void 0,this.changed()},e.prototype.setId=function(t){this.id_=t,this.changed()},e.prototype.setGeometryName=function(t){Object(r.c)(this,Object(s.b)(this.geometryName_),this.handleGeometryChanged_,this),this.geometryName_=t,Object(r.a)(this,Object(s.b)(this.geometryName_),this.handleGeometryChanged_,this),this.handleGeometryChanged_()},e}(s.a);function h(t){return"function"==typeof t?t:(Array.isArray(t)?e=t:(Object(n.a)("function"==typeof t.getZIndex,41),e=[t]),function(){return e});var e}e.default=a},function(t,e,i){"use strict";function n(t,e,i){return void 0===i&&(i=[0,0]),i[0]=t[0]+2*e,i[1]=t[1]+2*e,i}function r(t){return t[0]>0&&t[1]>0}function o(t,e,i){return void 0===i&&(i=[0,0]),i[0]=t[0]*e+.5|0,i[1]=t[1]*e+.5|0,i}function s(t,e){return Array.isArray(t)?t:(void 0===e?e=[t,t]:e[0]=e[1]=t,e)}i.d(e,"a",function(){return n}),i.d(e,"b",function(){return r}),i.d(e,"c",function(){return o}),i.d(e,"d",function(){return s})},,function(t,e,i){"use strict";function n(t,e,i){var n=void 0!==i?t.toFixed(i):""+t,r=n.indexOf(".");return(r=-1===r?n.length:r)>e?n:new Array(1+e-r).join("0")+n}function r(t,e){for(var i=(""+t).split("."),n=(""+e).split("."),r=0;r<Math.max(i.length,n.length);r++){var o=parseInt(i[r]||"0",10),s=parseInt(n[r]||"0",10);if(o>s)return 1;if(s>o)return-1}return 0}i.d(e,"b",function(){return n}),i.d(e,"a",function(){return r})},function(t,e,i){"use strict";var n=i(3),r=i(62),o=i.n(r),s=i(1),a=i(5),h=function(t){this.rbush_=o()(t,void 0),this.items_={}};h.prototype.insert=function(t,e){var i={minX:t[0],minY:t[1],maxX:t[2],maxY:t[3],value:e};this.rbush_.insert(i),this.items_[Object(n.c)(e)]=i},h.prototype.load=function(t,e){for(var i=new Array(e.length),r=0,o=e.length;r<o;r++){var s=t[r],a=e[r],h={minX:s[0],minY:s[1],maxX:s[2],maxY:s[3],value:a};i[r]=h,this.items_[Object(n.c)(a)]=h}this.rbush_.load(i)},h.prototype.remove=function(t){var e=Object(n.c)(t),i=this.items_[e];return delete this.items_[e],null!==this.rbush_.remove(i)},h.prototype.update=function(t,e){var i=this.items_[Object(n.c)(e)],r=[i.minX,i.minY,i.maxX,i.maxY];Object(s.p)(r,t)||(this.remove(e),this.insert(t,e))},h.prototype.getAll=function(){return this.rbush_.all().map(function(t){return t.value})},h.prototype.getInExtent=function(t){var e={minX:t[0],minY:t[1],maxX:t[2],maxY:t[3]};return this.rbush_.search(e).map(function(t){return t.value})},h.prototype.forEach=function(t,e){return this.forEach_(this.getAll(),t,e)},h.prototype.forEachInExtent=function(t,e,i){return this.forEach_(this.getInExtent(t),e,i)},h.prototype.forEach_=function(t,e,i){for(var n,r=0,o=t.length;r<o;r++)if(n=e.call(i,t[r]))return n;return n},h.prototype.isEmpty=function(){return Object(a.d)(this.items_)},h.prototype.clear=function(){this.rbush_.clear(),this.items_={}},h.prototype.getExtent=function(t){var e=this.rbush_.toJSON();return Object(s.k)(e.minX,e.minY,e.maxX,e.maxY,t)},h.prototype.concat=function(t){for(var e in this.rbush_.load(t.rbush_.all()),t.items_)this.items_[e]=t.items_[e]},e.a=h},function(t,e,i){"use strict";e.a={ADDFEATURE:"addfeature",CHANGEFEATURE:"changefeature",CLEAR:"clear",REMOVEFEATURE:"removefeature"}},function(t,e,i){"use strict";var n=i(3),r=i(12),o=i(15),s=i(16),a=function(t){function e(e){t.call(this),this.projection_=Object(o.d)(e.projection),this.attributions_=h(e.attributions),this.attributionsCollapsible_=void 0===e.attributionsCollapsible||e.attributionsCollapsible,this.loading=!1,this.state_=void 0!==e.state?e.state:s.a.READY,this.wrapX_=void 0!==e.wrapX&&e.wrapX}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getAttributions=function(){return this.attributions_},e.prototype.getAttributionsCollapsible=function(){return this.attributionsCollapsible_},e.prototype.getProjection=function(){return this.projection_},e.prototype.getResolutions=function(){return Object(n.b)()},e.prototype.getState=function(){return this.state_},e.prototype.getWrapX=function(){return this.wrapX_},e.prototype.refresh=function(){this.changed()},e.prototype.setAttributions=function(t){this.attributions_=h(t),this.changed()},e.prototype.setState=function(t){this.state_=t,this.changed()},e}(r.a);function h(t){return t?Array.isArray(t)?function(e){return t}:"function"==typeof t?t:function(e){return[t]}:null}e.a=a},,function(t,e,i){"use strict";e.a={OPACITY:"opacity",VISIBLE:"visible",EXTENT:"extent",Z_INDEX:"zIndex",MAX_RESOLUTION:"maxResolution",MIN_RESOLUTION:"minResolution",SOURCE:"source"}},,function(t,e,i){"use strict";var n=i(3),r=i(12),o=i(56),s=i(6),a=i(5),h=function(t){function e(e){t.call(this);var i=Object(a.a)({},e);i[o.a.OPACITY]=void 0!==e.opacity?e.opacity:1,i[o.a.VISIBLE]=void 0===e.visible||e.visible,i[o.a.Z_INDEX]=e.zIndex,i[o.a.MAX_RESOLUTION]=void 0!==e.maxResolution?e.maxResolution:1/0,i[o.a.MIN_RESOLUTION]=void 0!==e.minResolution?e.minResolution:0,this.setProperties(i),this.state_=null,this.type}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getType=function(){return this.type},e.prototype.getLayerState=function(){var t=this.state_||{layer:this,managed:!0};return t.opacity=Object(s.a)(this.getOpacity(),0,1),t.sourceState=this.getSourceState(),t.visible=this.getVisible(),t.extent=this.getExtent(),t.zIndex=this.getZIndex()||0,t.maxResolution=this.getMaxResolution(),t.minResolution=Math.max(this.getMinResolution(),0),this.state_=t,t},e.prototype.getLayersArray=function(t){return Object(n.b)()},e.prototype.getLayerStatesArray=function(t){return Object(n.b)()},e.prototype.getExtent=function(){return this.get(o.a.EXTENT)},e.prototype.getMaxResolution=function(){return this.get(o.a.MAX_RESOLUTION)},e.prototype.getMinResolution=function(){return this.get(o.a.MIN_RESOLUTION)},e.prototype.getOpacity=function(){return this.get(o.a.OPACITY)},e.prototype.getSourceState=function(){return Object(n.b)()},e.prototype.getVisible=function(){return this.get(o.a.VISIBLE)},e.prototype.getZIndex=function(){return this.get(o.a.Z_INDEX)},e.prototype.setExtent=function(t){this.set(o.a.EXTENT,t)},e.prototype.setMaxResolution=function(t){this.set(o.a.MAX_RESOLUTION,t)},e.prototype.setMinResolution=function(t){this.set(o.a.MIN_RESOLUTION,t)},e.prototype.setOpacity=function(t){this.set(o.a.OPACITY,t)},e.prototype.setVisible=function(t){this.set(o.a.VISIBLE,t)},e.prototype.setZIndex=function(t){this.set(o.a.Z_INDEX,t)},e}(r.a);e.a=h},function(t,e,i){"use strict";i.d(e,"a",function(){return o}),i.d(e,"b",function(){return s});var n=i(7),r=i(36);function o(t,e,i,o,s,a,h){for(var l,c,u,p,d,f,_,g=s[a+1],y=[],v=0,m=i.length;v<m;++v){var b=i[v];for(p=t[b-o],f=t[b-o+1],l=e;l<b;l+=o)d=t[l],_=t[l+1],(g<=f&&_<=g||f<=g&&g<=_)&&(u=(g-f)/(_-f)*(d-p)+p,y.push(u)),p=d,f=_}var E=NaN,O=-1/0;for(y.sort(n.i),p=y[0],l=1,c=y.length;l<c;++l){d=y[l];var x=Math.abs(d-p);x>O&&(u=(p+d)/2,Object(r.c)(t,e,i,o,u,g)&&(E=u,O=x)),p=d}return isNaN(E)&&(E=s[a]),h?(h.push(E,g,O),h):[E,g,O]}function s(t,e,i,n,r){for(var s=[],a=0,h=i.length;a<h;++a){var l=i[a];s=o(t,e,l,n,r,2*a,s),e=l[l.length-1]}return s}},function(t,e,i){"use strict";function n(t,e,i,n,r,o){for(var s,a=[t[e],t[e+1]],h=[];e+n<i;e+=n){if(h[0]=t[e+n],h[1]=t[e+n+1],s=r.call(o,a,h))return s;a[0]=h[0],a[1]=h[1]}return!1}i.d(e,"a",function(){return n})},function(t,e,i){"use strict";e.a={IMAGE:"image",VECTOR:"vector"}},function(t,e,i){"use strict";t.exports=r,t.exports.default=r;var n=i(75);function r(t,e){if(!(this instanceof r))return new r(t,e);this._maxEntries=Math.max(4,t||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),e&&this._initFormat(e),this.clear()}function o(t,e,i){if(!i)return e.indexOf(t);for(var n=0;n<e.length;n++)if(i(t,e[n]))return n;return-1}function s(t,e){a(t,0,t.children.length,e,t)}function a(t,e,i,n,r){r||(r=_(null)),r.minX=1/0,r.minY=1/0,r.maxX=-1/0,r.maxY=-1/0;for(var o,s=e;s<i;s++)o=t.children[s],h(r,t.leaf?n(o):o);return r}function h(t,e){return t.minX=Math.min(t.minX,e.minX),t.minY=Math.min(t.minY,e.minY),t.maxX=Math.max(t.maxX,e.maxX),t.maxY=Math.max(t.maxY,e.maxY),t}function l(t,e){return t.minX-e.minX}function c(t,e){return t.minY-e.minY}function u(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function p(t){return t.maxX-t.minX+(t.maxY-t.minY)}function d(t,e){return t.minX<=e.minX&&t.minY<=e.minY&&e.maxX<=t.maxX&&e.maxY<=t.maxY}function f(t,e){return e.minX<=t.maxX&&e.minY<=t.maxY&&e.maxX>=t.minX&&e.maxY>=t.minY}function _(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function g(t,e,i,r,o){for(var s,a=[e,i];a.length;)(i=a.pop())-(e=a.pop())<=r||(s=e+Math.ceil((i-e)/r/2)*r,n(t,s,e,i,o),a.push(e,s,s,i))}r.prototype={all:function(){return this._all(this.data,[])},search:function(t){var e=this.data,i=[],n=this.toBBox;if(!f(t,e))return i;for(var r,o,s,a,h=[];e;){for(r=0,o=e.children.length;r<o;r++)s=e.children[r],f(t,a=e.leaf?n(s):s)&&(e.leaf?i.push(s):d(t,a)?this._all(s,i):h.push(s));e=h.pop()}return i},collides:function(t){var e=this.data,i=this.toBBox;if(!f(t,e))return!1;for(var n,r,o,s,a=[];e;){for(n=0,r=e.children.length;n<r;n++)if(o=e.children[n],f(t,s=e.leaf?i(o):o)){if(e.leaf||d(t,s))return!0;a.push(o)}e=a.pop()}return!1},load:function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var e=0,i=t.length;e<i;e++)this.insert(t[e]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},insert:function(t){return t&&this._insert(t,this.data.height-1),this},clear:function(){return this.data=_([]),this},remove:function(t,e){if(!t)return this;for(var i,n,r,s,a=this.data,h=this.toBBox(t),l=[],c=[];a||l.length;){if(a||(a=l.pop(),n=l[l.length-1],i=c.pop(),s=!0),a.leaf&&-1!==(r=o(t,a.children,e)))return a.children.splice(r,1),l.push(a),this._condense(l),this;s||a.leaf||!d(a,h)?n?(i++,a=n.children[i],s=!1):a=null:(l.push(a),c.push(i),i=0,n=a,a=a.children[0])}return this},toBBox:function(t){return t},compareMinX:l,compareMinY:c,toJSON:function(){return this.data},fromJSON:function(t){return this.data=t,this},_all:function(t,e){for(var i=[];t;)t.leaf?e.push.apply(e,t.children):i.push.apply(i,t.children),t=i.pop();return e},_build:function(t,e,i,n){var r,o=i-e+1,a=this._maxEntries;if(o<=a)return s(r=_(t.slice(e,i+1)),this.toBBox),r;n||(n=Math.ceil(Math.log(o)/Math.log(a)),a=Math.ceil(o/Math.pow(a,n-1))),(r=_([])).leaf=!1,r.height=n;var h,l,c,u,p=Math.ceil(o/a),d=p*Math.ceil(Math.sqrt(a));for(g(t,e,i,d,this.compareMinX),h=e;h<=i;h+=d)for(g(t,h,c=Math.min(h+d-1,i),p,this.compareMinY),l=h;l<=c;l+=p)u=Math.min(l+p-1,c),r.children.push(this._build(t,l,u,n-1));return s(r,this.toBBox),r},_chooseSubtree:function(t,e,i,n){for(var r,o,s,a,h,l,c,p,d,f;n.push(e),!e.leaf&&n.length-1!==i;){for(c=p=1/0,r=0,o=e.children.length;r<o;r++)h=u(s=e.children[r]),d=t,f=s,(l=(Math.max(f.maxX,d.maxX)-Math.min(f.minX,d.minX))*(Math.max(f.maxY,d.maxY)-Math.min(f.minY,d.minY))-h)<p?(p=l,c=h<c?h:c,a=s):l===p&&h<c&&(c=h,a=s);e=a||e.children[0]}return e},_insert:function(t,e,i){var n=this.toBBox,r=i?t:n(t),o=[],s=this._chooseSubtree(r,this.data,e,o);for(s.children.push(t),h(s,r);e>=0&&o[e].children.length>this._maxEntries;)this._split(o,e),e--;this._adjustParentBBoxes(r,o,e)},_split:function(t,e){var i=t[e],n=i.children.length,r=this._minEntries;this._chooseSplitAxis(i,r,n);var o=this._chooseSplitIndex(i,r,n),a=_(i.children.splice(o,i.children.length-o));a.height=i.height,a.leaf=i.leaf,s(i,this.toBBox),s(a,this.toBBox),e?t[e-1].children.push(a):this._splitRoot(i,a)},_splitRoot:function(t,e){this.data=_([t,e]),this.data.height=t.height+1,this.data.leaf=!1,s(this.data,this.toBBox)},_chooseSplitIndex:function(t,e,i){var n,r,o,s,h,l,c,p,d,f,_,g,y,v;for(l=c=1/0,n=e;n<=i-e;n++)r=a(t,0,n,this.toBBox),o=a(t,n,i,this.toBBox),d=r,f=o,_=void 0,g=void 0,y=void 0,v=void 0,_=Math.max(d.minX,f.minX),g=Math.max(d.minY,f.minY),y=Math.min(d.maxX,f.maxX),v=Math.min(d.maxY,f.maxY),s=Math.max(0,y-_)*Math.max(0,v-g),h=u(r)+u(o),s<l?(l=s,p=n,c=h<c?h:c):s===l&&h<c&&(c=h,p=n);return p},_chooseSplitAxis:function(t,e,i){var n=t.leaf?this.compareMinX:l,r=t.leaf?this.compareMinY:c;this._allDistMargin(t,e,i,n)<this._allDistMargin(t,e,i,r)&&t.children.sort(n)},_allDistMargin:function(t,e,i,n){t.children.sort(n);var r,o,s=this.toBBox,l=a(t,0,e,s),c=a(t,i-e,i,s),u=p(l)+p(c);for(r=e;r<i-e;r++)o=t.children[r],h(l,t.leaf?s(o):o),u+=p(l);for(r=i-e-1;r>=e;r--)o=t.children[r],h(c,t.leaf?s(o):o),u+=p(c);return u},_adjustParentBBoxes:function(t,e,i){for(var n=i;n>=0;n--)h(e[n],t)},_condense:function(t){for(var e,i=t.length-1;i>=0;i--)0===t[i].children.length?i>0?(e=t[i-1].children).splice(e.indexOf(t[i]),1):this.clear():s(t[i],this.toBBox)},_initFormat:function(t){var e=["return a"," - b",";"];this.compareMinX=new Function("a","b",e.join(t[0])),this.compareMinY=new Function("a","b",e.join(t[1])),this.toBBox=new Function("a","return {minX: a"+t[0]+", minY: a"+t[1]+", maxX: a"+t[2]+", maxY: a"+t[3]+"};")}}},function(t,e,i){"use strict";i.d(e,"b",function(){return n}),i.d(e,"a",function(){return r});var n=.5,r=!0},function(t,e,i){"use strict";i.d(e,"a",function(){return n}),i.d(e,"b",function(){return r});var n=42,r=256},,function(t,e,i){"use strict";function n(t,e,i,n){for(;e<i-n;){for(var r=0;r<n;++r){var o=t[e+r];t[e+r]=t[i-n+r],t[i-n+r]=o}e+=n,i-=n}}function r(t,e,i,n){for(var r=0,o=t[i-n],s=t[i-n+1];e<i;e+=n){var a=t[e],h=t[e+1];r+=(a-o)*(h+s),o=a,s=h}return r>0}function o(t,e,i,n,o){for(var s=void 0!==o&&o,a=0,h=i.length;a<h;++a){var l=i[a],c=r(t,e,l,n);if(0===a){if(s&&c||!s&&!c)return!1}else if(s&&!c||!s&&c)return!1;e=l}return!0}function s(t,e,i,n,r){for(var s=0,a=i.length;s<a;++s)if(!o(t,e,i[s],n,r))return!1;return!0}function a(t,e,i,o,s){for(var a=void 0!==s&&s,h=0,l=i.length;h<l;++h){var c=i[h],u=r(t,e,c,o);(0===h?a&&u||!a&&!u:a&&!u||!a&&u)&&n(t,e,c,o),e=c}return e}function h(t,e,i,n,r){for(var o=0,s=i.length;o<s;++o)e=a(t,e,i[o],n,r);return e}i.d(e,"a",function(){return o}),i.d(e,"b",function(){return s}),i.d(e,"c",function(){return a}),i.d(e,"d",function(){return h})},,,,function(t,e,i){"use strict";var n=function(t,e){this.dispatcher=t,this.mapping_=e};n.prototype.getEvents=function(){return Object.keys(this.mapping_)},n.prototype.getHandlerForEvent=function(t){return this.mapping_[t]},e.a=n},function(t,e,i){"use strict";i.d(e,"a",function(){return s});var n=i(44),r=function(){this.cache_={},this.cacheSize_=0,this.maxCacheSize_=32};function o(t,e,i){return e+":"+t+":"+(i?Object(n.b)(i):"null")}r.prototype.clear=function(){this.cache_={},this.cacheSize_=0},r.prototype.expire=function(){if(this.cacheSize_>this.maxCacheSize_){var t=0;for(var e in this.cache_){var i=this.cache_[e];0!=(3&t++)||i.hasListener()||(delete this.cache_[e],--this.cacheSize_)}}},r.prototype.get=function(t,e,i){var n=o(t,e,i);return n in this.cache_?this.cache_[n]:null},r.prototype.set=function(t,e,i,n){var r=o(t,e,i);this.cache_[r]=n,++this.cacheSize_},r.prototype.setSize=function(t){this.maxCacheSize_=t,this.expire()};var s=new r},function(t,e,i){"use strict";var n=i(8),r={ARRAY_BUFFER:"arraybuffer",JSON:"json",TEXT:"text",XML:"xml"};function o(t,e,i,n){return function(o,s,a){var h=new XMLHttpRequest;h.open("GET","function"==typeof t?t(o,s,a):t,!0),e.getType()==r.ARRAY_BUFFER&&(h.responseType="arraybuffer"),h.onload=function(t){if(!h.status||h.status>=200&&h.status<300){var o,s=e.getType();s==r.JSON||s==r.TEXT?o=h.responseText:s==r.XML?(o=h.responseXML)||(o=(new DOMParser).parseFromString(h.responseText,"application/xml")):s==r.ARRAY_BUFFER&&(o=h.response),o?i.call(this,e.readFeatures(o,{featureProjection:a}),e.readProjection(o),e.getLastExtent()):n.call(this)}else n.call(this)}.bind(this),h.onerror=function(){n.call(this)}.bind(this),h.send()}}function s(t,e){return o(t,e,function(t,e){"function"==typeof this.addFeatures&&this.addFeatures(t)},n.c)}i.d(e,"a",function(){return o}),i.d(e,"b",function(){return s})},,,function(t,e,i){t.exports=function(){"use strict";function t(t,e,i){var n=t[e];t[e]=t[i],t[i]=n}function e(t,e){return t<e?-1:t>e?1:0}return function(i,n,r,o,s){!function e(i,n,r,o,s){for(;o>r;){if(o-r>600){var a=o-r+1,h=n-r+1,l=Math.log(a),c=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*c*(a-c)/a)*(h-a/2<0?-1:1),p=Math.max(r,Math.floor(n-h*c/a+u)),d=Math.min(o,Math.floor(n+(a-h)*c/a+u));e(i,n,p,d,s)}var f=i[n],_=r,g=o;for(t(i,r,n),s(i[o],f)>0&&t(i,r,o);_<g;){for(t(i,_,g),_++,g--;s(i[_],f)<0;)_++;for(;s(i[g],f)>0;)g--}0===s(i[r],f)?t(i,r,g):t(i,++g,o),g<=n&&(r=g+1),n<=g&&(o=g-1)}}(i,n,r||0,o||i.length-1,s||e)}}()},function(t,e,i){"use strict";i.d(e,"a",function(){return r}),i.d(e,"b",function(){return o}),i.d(e,"d",function(){return p});var n=i(70),r=1,o="mouse";function s(t){if(!this.isEventSimulatedFromTouch_(t)){r.toString()in this.pointerMap&&this.cancel(t);var e=p(t,this.dispatcher);this.pointerMap[r.toString()]=t,this.dispatcher.down(e,t)}}function a(t){if(!this.isEventSimulatedFromTouch_(t)){var e=p(t,this.dispatcher);this.dispatcher.move(e,t)}}function h(t){if(!this.isEventSimulatedFromTouch_(t)){var e=this.pointerMap[r.toString()];if(e&&e.button===t.button){var i=p(t,this.dispatcher);this.dispatcher.up(i,t),this.cleanupMouse()}}}function l(t){if(!this.isEventSimulatedFromTouch_(t)){var e=p(t,this.dispatcher);this.dispatcher.enterOver(e,t)}}function c(t){if(!this.isEventSimulatedFromTouch_(t)){var e=p(t,this.dispatcher);this.dispatcher.leaveOut(e,t)}}var u=function(t){function e(e){var i={mousedown:s,mousemove:a,mouseup:h,mouseover:l,mouseout:c};t.call(this,e,i),this.pointerMap=e.pointerMap,this.lastTouches=[]}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.isEventSimulatedFromTouch_=function(t){for(var e=this.lastTouches,i=t.clientX,n=t.clientY,r=0,o=e.length,s=void 0;r<o&&(s=e[r]);r++){var a=Math.abs(i-s[0]),h=Math.abs(n-s[1]);if(a<=25&&h<=25)return!0}return!1},e.prototype.cancel=function(t){var e=p(t,this.dispatcher);this.dispatcher.cancel(e,t),this.cleanupMouse()},e.prototype.cleanupMouse=function(){delete this.pointerMap[r.toString()]},e}(n.a);function p(t,e){var i=e.cloneEvent(t,t),n=i.preventDefault;return i.preventDefault=function(){t.preventDefault(),n()},i.pointerId=r,i.isPrimary=!0,i.pointerType=o,i}e.c=u},function(t,e,i){"use strict";var n=i(7),r=i(69),o=i(1),s=i(10),a=i(20),h=i(68),l=i(28),c=i(90),u=i(38),p=i(17),d=function(t){function e(e,i,n,r,o){t.call(this),this.context_=e,this.pixelRatio_=i,this.extent_=n,this.transform_=r,this.viewRotation_=o,this.contextFillState_=null,this.contextStrokeState_=null,this.contextTextState_=null,this.fillState_=null,this.strokeState_=null,this.image_=null,this.imageAnchorX_=0,this.imageAnchorY_=0,this.imageHeight_=0,this.imageOpacity_=0,this.imageOriginX_=0,this.imageOriginY_=0,this.imageRotateWithView_=!1,this.imageRotation_=0,this.imageScale_=0,this.imageWidth_=0,this.text_="",this.textOffsetX_=0,this.textOffsetY_=0,this.textRotateWithView_=!1,this.textRotation_=0,this.textScale_=0,this.textFillState_=null,this.textStrokeState_=null,this.textState_=null,this.pixelCoordinates_=[],this.tmpLocalTransform_=Object(p.c)()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.drawImages_=function(t,e,i,n){if(this.image_){var r=Object(h.c)(t,e,i,2,this.transform_,this.pixelCoordinates_),o=this.context_,s=this.tmpLocalTransform_,a=o.globalAlpha;1!=this.imageOpacity_&&(o.globalAlpha=a*this.imageOpacity_);var l=this.imageRotation_;this.imageRotateWithView_&&(l+=this.viewRotation_);for(var c=0,u=r.length;c<u;c+=2){var d=r[c]-this.imageAnchorX_,f=r[c+1]-this.imageAnchorY_;if(0!==l||1!=this.imageScale_){var _=d+this.imageAnchorX_,g=f+this.imageAnchorY_;Object(p.b)(s,_,g,this.imageScale_,this.imageScale_,l,-_,-g),o.setTransform.apply(o,s)}o.drawImage(this.image_,this.imageOriginX_,this.imageOriginY_,this.imageWidth_,this.imageHeight_,d,f,this.imageWidth_,this.imageHeight_)}0===l&&1==this.imageScale_||o.setTransform(1,0,0,1,0,0),1!=this.imageOpacity_&&(o.globalAlpha=a)}},e.prototype.drawText_=function(t,e,i,n){if(this.textState_&&""!==this.text_){this.textFillState_&&this.setContextFillState_(this.textFillState_),this.textStrokeState_&&this.setContextStrokeState_(this.textStrokeState_),this.setContextTextState_(this.textState_);var r=Object(h.c)(t,e,i,n,this.transform_,this.pixelCoordinates_),o=this.context_,s=this.textRotation_;for(this.textRotateWithView_&&(s+=this.viewRotation_);e<i;e+=n){var a=r[e]+this.textOffsetX_,l=r[e+1]+this.textOffsetY_;if(0!==s||1!=this.textScale_){var c=Object(p.b)(this.tmpLocalTransform_,a,l,this.textScale_,this.textScale_,s,-a,-l);o.setTransform.apply(o,c)}this.textStrokeState_&&o.strokeText(this.text_,a,l),this.textFillState_&&o.fillText(this.text_,a,l)}0===s&&1==this.textScale_||o.setTransform(1,0,0,1,0,0)}},e.prototype.moveToLineTo_=function(t,e,i,n,r){var o=this.context_,s=Object(h.c)(t,e,i,n,this.transform_,this.pixelCoordinates_);o.moveTo(s[0],s[1]);var a=s.length;r&&(a-=2);for(var l=2;l<a;l+=2)o.lineTo(s[l],s[l+1]);return r&&o.closePath(),i},e.prototype.drawRings_=function(t,e,i,n){for(var r=0,o=i.length;r<o;++r)e=this.moveToLineTo_(t,e,i[r],n,!0);return e},e.prototype.drawCircle=function(t){if(Object(o.F)(this.extent_,t.getExtent())){if(this.fillState_||this.strokeState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);var e=Object(a.b)(t,this.transform_,this.pixelCoordinates_),i=e[2]-e[0],n=e[3]-e[1],r=Math.sqrt(i*i+n*n),s=this.context_;s.beginPath(),s.arc(e[0],e[1],r,0,2*Math.PI),this.fillState_&&s.fill(),this.strokeState_&&s.stroke()}""!==this.text_&&this.drawText_(t.getCenter(),0,2,2)}},e.prototype.setStyle=function(t){this.setFillStrokeStyle(t.getFill(),t.getStroke()),this.setImageStyle(t.getImage()),this.setTextStyle(t.getText())},e.prototype.drawGeometry=function(t){switch(t.getType()){case s.a.POINT:this.drawPoint(t);break;case s.a.LINE_STRING:this.drawLineString(t);break;case s.a.POLYGON:this.drawPolygon(t);break;case s.a.MULTI_POINT:this.drawMultiPoint(t);break;case s.a.MULTI_LINE_STRING:this.drawMultiLineString(t);break;case s.a.MULTI_POLYGON:this.drawMultiPolygon(t);break;case s.a.GEOMETRY_COLLECTION:this.drawGeometryCollection(t);break;case s.a.CIRCLE:this.drawCircle(t)}},e.prototype.drawFeature=function(t,e){var i=e.getGeometryFunction()(t);i&&Object(o.F)(this.extent_,i.getExtent())&&(this.setStyle(e),this.drawGeometry(i))},e.prototype.drawGeometryCollection=function(t){for(var e=t.getGeometriesArray(),i=0,n=e.length;i<n;++i)this.drawGeometry(e[i])},e.prototype.drawPoint=function(t){var e=t.getFlatCoordinates(),i=t.getStride();this.image_&&this.drawImages_(e,0,e.length,i),""!==this.text_&&this.drawText_(e,0,e.length,i)},e.prototype.drawMultiPoint=function(t){var e=t.getFlatCoordinates(),i=t.getStride();this.image_&&this.drawImages_(e,0,e.length,i),""!==this.text_&&this.drawText_(e,0,e.length,i)},e.prototype.drawLineString=function(t){if(Object(o.F)(this.extent_,t.getExtent())){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);var e=this.context_,i=t.getFlatCoordinates();e.beginPath(),this.moveToLineTo_(i,0,i.length,t.getStride(),!1),e.stroke()}if(""!==this.text_){var n=t.getFlatMidpoint();this.drawText_(n,0,2,2)}}},e.prototype.drawMultiLineString=function(t){var e=t.getExtent();if(Object(o.F)(this.extent_,e)){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);var i=this.context_,n=t.getFlatCoordinates(),r=0,s=t.getEnds(),a=t.getStride();i.beginPath();for(var h=0,l=s.length;h<l;++h)r=this.moveToLineTo_(n,r,s[h],a,!1);i.stroke()}if(""!==this.text_){var c=t.getFlatMidpoints();this.drawText_(c,0,c.length,2)}}},e.prototype.drawPolygon=function(t){if(Object(o.F)(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);var e=this.context_;e.beginPath(),this.drawRings_(t.getOrientedFlatCoordinates(),0,t.getEnds(),t.getStride()),this.fillState_&&e.fill(),this.strokeState_&&e.stroke()}if(""!==this.text_){var i=t.getFlatInteriorPoint();this.drawText_(i,0,2,2)}}},e.prototype.drawMultiPolygon=function(t){if(Object(o.F)(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);var e=this.context_,i=t.getOrientedFlatCoordinates(),n=0,r=t.getEndss(),s=t.getStride();e.beginPath();for(var a=0,h=r.length;a<h;++a){var l=r[a];n=this.drawRings_(i,n,l,s)}this.fillState_&&e.fill(),this.strokeState_&&e.stroke()}if(""!==this.text_){var c=t.getFlatInteriorPoints();this.drawText_(c,0,c.length,2)}}},e.prototype.setContextFillState_=function(t){var e=this.context_,i=this.contextFillState_;i?i.fillStyle!=t.fillStyle&&(i.fillStyle=e.fillStyle=t.fillStyle):(e.fillStyle=t.fillStyle,this.contextFillState_={fillStyle:t.fillStyle})},e.prototype.setContextStrokeState_=function(t){var e=this.context_,i=this.contextStrokeState_;i?(i.lineCap!=t.lineCap&&(i.lineCap=e.lineCap=t.lineCap),l.a&&(Object(n.b)(i.lineDash,t.lineDash)||e.setLineDash(i.lineDash=t.lineDash),i.lineDashOffset!=t.lineDashOffset&&(i.lineDashOffset=e.lineDashOffset=t.lineDashOffset)),i.lineJoin!=t.lineJoin&&(i.lineJoin=e.lineJoin=t.lineJoin),i.lineWidth!=t.lineWidth&&(i.lineWidth=e.lineWidth=t.lineWidth),i.miterLimit!=t.miterLimit&&(i.miterLimit=e.miterLimit=t.miterLimit),i.strokeStyle!=t.strokeStyle&&(i.strokeStyle=e.strokeStyle=t.strokeStyle)):(e.lineCap=t.lineCap,l.a&&(e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset),e.lineJoin=t.lineJoin,e.lineWidth=t.lineWidth,e.miterLimit=t.miterLimit,e.strokeStyle=t.strokeStyle,this.contextStrokeState_={lineCap:t.lineCap,lineDash:t.lineDash,lineDashOffset:t.lineDashOffset,lineJoin:t.lineJoin,lineWidth:t.lineWidth,miterLimit:t.miterLimit,strokeStyle:t.strokeStyle})},e.prototype.setContextTextState_=function(t){var e=this.context_,i=this.contextTextState_,n=t.textAlign?t.textAlign:u.l;i?(i.font!=t.font&&(i.font=e.font=t.font),i.textAlign!=n&&(i.textAlign=e.textAlign=n),i.textBaseline!=t.textBaseline&&(i.textBaseline=e.textBaseline=t.textBaseline)):(e.font=t.font,e.textAlign=n,e.textBaseline=t.textBaseline,this.contextTextState_={font:t.font,textAlign:n,textBaseline:t.textBaseline})},e.prototype.setFillStrokeStyle=function(t,e){if(t){var i=t.getColor();this.fillState_={fillStyle:Object(r.a)(i||u.b)}}else this.fillState_=null;if(e){var n=e.getColor(),o=e.getLineCap(),s=e.getLineDash(),a=e.getLineDashOffset(),h=e.getLineJoin(),l=e.getWidth(),c=e.getMiterLimit();this.strokeState_={lineCap:void 0!==o?o:u.d,lineDash:s||u.e,lineDashOffset:a||u.f,lineJoin:void 0!==h?h:u.g,lineWidth:this.pixelRatio_*(void 0!==l?l:u.h),miterLimit:void 0!==c?c:u.i,strokeStyle:Object(r.a)(n||u.k)}}else this.strokeState_=null},e.prototype.setImageStyle=function(t){if(t){var e=t.getAnchor(),i=t.getImage(1),n=t.getOrigin(),r=t.getSize();this.imageAnchorX_=e[0],this.imageAnchorY_=e[1],this.imageHeight_=r[1],this.image_=i,this.imageOpacity_=t.getOpacity(),this.imageOriginX_=n[0],this.imageOriginY_=n[1],this.imageRotateWithView_=t.getRotateWithView(),this.imageRotation_=t.getRotation(),this.imageScale_=t.getScale()*this.pixelRatio_,this.imageWidth_=r[0]}else this.image_=null},e.prototype.setTextStyle=function(t){if(t){var e=t.getFill();if(e){var i=e.getColor();this.textFillState_={fillStyle:Object(r.a)(i||u.b)}}else this.textFillState_=null;var n=t.getStroke();if(n){var o=n.getColor(),s=n.getLineCap(),a=n.getLineDash(),h=n.getLineDashOffset(),l=n.getLineJoin(),c=n.getWidth(),p=n.getMiterLimit();this.textStrokeState_={lineCap:void 0!==s?s:u.d,lineDash:a||u.e,lineDashOffset:h||u.f,lineJoin:void 0!==l?l:u.g,lineWidth:void 0!==c?c:u.h,miterLimit:void 0!==p?p:u.i,strokeStyle:Object(r.a)(o||u.k)}}else this.textStrokeState_=null;var d=t.getFont(),f=t.getOffsetX(),_=t.getOffsetY(),g=t.getRotateWithView(),y=t.getRotation(),v=t.getScale(),m=t.getText(),b=t.getTextAlign(),E=t.getTextBaseline();this.textState_={font:void 0!==d?d:u.c,textAlign:void 0!==b?b:u.l,textBaseline:void 0!==E?E:u.m},this.text_=void 0!==m?m:"",this.textOffsetX_=void 0!==f?this.pixelRatio_*f:0,this.textOffsetY_=void 0!==_?this.pixelRatio_*_:0,this.textRotateWithView_=void 0!==g&&g,this.textRotation_=void 0!==y?y:0,this.textScale_=this.pixelRatio_*(void 0!==v?v:1)}else this.text_=""},e}(c.a);e.a=d},function(t,e,i){"use strict";var n=function(t){function e(e,i,n,r,o){t.call(this,e),this.vectorContext=i,this.frameState=n,this.context=r,this.glContext=o}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(i(11).a);e.a=n},function(t,e,i){"use strict";var n=i(80),r=i(30),o=function(t){function e(e,i,n,o,s){var a=void 0!==s?r.a.IDLE:r.a.LOADED;t.call(this,e,i,n,a),this.loader_=void 0!==s?s:null,this.canvas_=o,this.error_=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getError=function(){return this.error_},e.prototype.handleLoad_=function(t){t?(this.error_=t,this.state=r.a.ERROR):this.state=r.a.LOADED,this.changed()},e.prototype.load=function(){this.state==r.a.IDLE&&(this.state=r.a.LOADING,this.changed(),this.loader_(this.handleLoad_.bind(this)))},e.prototype.getImage=function(){return this.canvas_},e}(n.a);e.a=o},function(t,e,i){"use strict";var n=i(3),r=i(40),o=i(2),s=function(t){function e(e,i,n,r){t.call(this),this.extent=e,this.pixelRatio_=n,this.resolution=i,this.state=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.changed=function(){this.dispatchEvent(o.a.CHANGE)},e.prototype.getExtent=function(){return this.extent},e.prototype.getImage=function(){return Object(n.b)()},e.prototype.getPixelRatio=function(){return this.pixelRatio_},e.prototype.getResolution=function(){return this.resolution},e.prototype.getState=function(){return this.state},e.prototype.load=function(){Object(n.b)()},e}(r.a);e.a=s},function(t,e,i){"use strict";var n=i(3),r=i(18),o=i(13),s=i(1),a=i(97),h=i(17),l=function(t){function e(e){t.call(this,e),this.coordinateToCanvasPixelTransform=Object(h.c)(),this.hitCanvasContext_=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.composeFrame=function(t,e,i){this.preCompose(i,t);var n=this.getImage();if(n){var r=e.extent,o=void 0!==r&&!Object(s.g)(r,t.extent)&&Object(s.F)(r,t.extent);o&&this.clip(i,t,r);var a=this.getImageTransform(),h=i.globalAlpha;i.globalAlpha=e.opacity;var l=a[4],c=a[5],u=n.width*a[0],p=n.height*a[3];u>=.5&&p>=.5&&i.drawImage(n,0,0,+n.width,+n.height,Math.round(l),Math.round(c),Math.round(u),Math.round(p)),i.globalAlpha=h,o&&i.restore()}this.postCompose(i,t,e)},e.prototype.getImage=function(){return Object(n.b)()},e.prototype.getImageTransform=function(){return Object(n.b)()},e.prototype.forEachLayerAtCoordinate=function(t,e,i,n,s){if(this.getImage()){var a=Object(h.a)(this.coordinateToCanvasPixelTransform,t.slice());Object(r.g)(a,e.viewState.resolution/this.renderedResolution),this.hitCanvasContext_||(this.hitCanvasContext_=Object(o.a)(1,1)),this.hitCanvasContext_.clearRect(0,0,1,1),this.hitCanvasContext_.drawImage(this.getImage(),a[0],a[1],1,1,0,0,1,1);var l=this.hitCanvasContext_.getImageData(0,0,1,1).data;return l[3]>0?n.call(s,this.getLayer(),l):void 0}},e}(a.a);e.a=l},,,function(t,e,i){"use strict";function n(t,e,i,n){for(var r=t[e],o=t[e+1],s=0,a=e+n;a<i;a+=n){var h=t[a],l=t[a+1];s+=Math.sqrt((h-r)*(h-r)+(l-o)*(l-o)),r=h,o=l}return s}i.d(e,"a",function(){return n})},,,function(t,e,i){"use strict";var n=function(t){function e(e,i,n,r,o){t.call(this,e,i,n.originalEvent,r,o),this.pointerEvent=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(i(88).a);e.a=n},function(t,e,i){"use strict";var n=function(t){function e(e,i,n,r,o){t.call(this,e,i,o),this.originalEvent=n,this.pixel=i.getEventPixel(n),this.coordinate=i.getCoordinateFromPixel(this.pixel),this.dragging=void 0!==r&&r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.preventDefault=function(){t.prototype.preventDefault.call(this),this.originalEvent.preventDefault()},e.prototype.stopPropagation=function(){t.prototype.stopPropagation.call(this),this.originalEvent.stopPropagation()},e}(i(89).a);e.a=n},function(t,e,i){"use strict";var n=function(t){function e(e,i,n){t.call(this,e),this.map=i,this.frameState=void 0!==n?n:null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(i(11).a);e.a=n},function(t,e,i){"use strict";var n=function(){};n.prototype.drawCustom=function(t,e,i){},n.prototype.drawGeometry=function(t){},n.prototype.setStyle=function(t){},n.prototype.drawCircle=function(t,e){},n.prototype.drawFeature=function(t,e){},n.prototype.drawGeometryCollection=function(t,e){},n.prototype.drawLineString=function(t,e){},n.prototype.drawMultiLineString=function(t,e){},n.prototype.drawMultiPoint=function(t,e){},n.prototype.drawMultiPolygon=function(t,e){},n.prototype.drawPoint=function(t,e){},n.prototype.drawPolygon=function(t,e){},n.prototype.drawText=function(t,e){},n.prototype.setFillStrokeStyle=function(t,e){},n.prototype.setImageStyle=function(t,e){},n.prototype.setTextStyle=function(t,e){},e.a=n},function(t,e,i){"use strict";var n=i(3),r=i(29),o=i(92),s=i(19),a=i(14),h=i(13),l=i(1),c=i(81),u=i(17),p=function(t){function e(e,i){t.call(this,e),this.context=i?null:Object(h.a)(),this.oversampling_,this.renderedExtent_=null,this.renderedRevision,this.renderedTiles=[],this.newTiles_=!1,this.tmpExtent=Object(l.j)(),this.tmpTileRange_=new o.b(0,0,0,0),this.imageTransform_=Object(u.c)(),this.zDirection=0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.isDrawableTile_=function(t){var e=this.getLayer(),i=t.getState(),n=e.getUseInterimTilesOnError();return i==s.a.LOADED||i==s.a.EMPTY||i==s.a.ERROR&&!n},e.prototype.getTile=function(t,e,i,n,r){var o=this.getLayer(),a=o.getSource().getTile(t,e,i,n,r);return a.getState()==s.a.ERROR&&(o.getUseInterimTilesOnError()?o.getPreload()>0&&(this.newTiles_=!0):a.setState(s.a.LOADED)),this.isDrawableTile_(a)||(a=a.getInterimTile()),a},e.prototype.prepareFrame=function(t,e){var i=t.pixelRatio,r=t.size,o=t.viewState,h=o.projection,c=o.resolution,p=o.center,d=this.getLayer(),f=d.getSource(),_=f.getRevision(),g=f.getTileGridForProjection(h),y=g.getZForResolution(c,this.zDirection),v=g.getResolution(y),m=Math.round(c/v)||1,b=t.extent;if(void 0!==e.extent&&(b=Object(l.B)(b,e.extent)),Object(l.H)(b))return!1;var E=g.getTileRangeForExtentAndZ(b,y),O=g.getTileRangeExtent(y,E),x=f.getTilePixelRatio(i),C={};C[y]={};var T,R,S,I=this.createLoadedTileFinder(f,h,C),j=t.viewHints,w=j[a.a.ANIMATING]||j[a.a.INTERACTING],L=this.tmpExtent,F=this.tmpTileRange_;for(this.newTiles_=!1,R=E.minX;R<=E.maxX;++R)for(S=E.minY;S<=E.maxY;++S)if(!(Date.now()-t.time>16&&w)){if(T=this.getTile(y,R,S,i,h),this.isDrawableTile_(T)){var M=Object(n.c)(this);if(T.getState()==s.a.LOADED){C[y][T.tileCoord.toString()]=T;var P=T.inTransition(M);this.newTiles_||!P&&-1!==this.renderedTiles.indexOf(T)||(this.newTiles_=!0)}if(1===T.getAlpha(M,t.time))continue}var A=g.getTileCoordChildTileRange(T.tileCoord,F,L),D=!1;A&&(D=I(y+1,A)),D||g.forEachTileCoordParentTileRange(T.tileCoord,I,null,F,L)}var N=v*i/x*m;if(!(this.renderedResolution&&Date.now()-t.time>16&&w)&&(this.newTiles_||!this.renderedExtent_||!Object(l.g)(this.renderedExtent_,b)||this.renderedRevision!=_||m!=this.oversampling_||!w&&N!=this.renderedResolution)){var k=this.context;if(k){var G=f.getTilePixelSize(y,i,h),Y=Math.round(E.getWidth()*G[0]/m),X=Math.round(E.getHeight()*G[1]/m),K=k.canvas;K.width!=Y||K.height!=X?(this.oversampling_=m,K.width=Y,K.height=X):(this.renderedExtent_&&!Object(l.p)(O,this.renderedExtent_)&&k.clearRect(0,0,Y,X),m=this.oversampling_)}this.renderedTiles.length=0;var B,V,U,W,H,z,Z,q,J,Q,$=Object.keys(C).map(Number);for($.sort(function(t,e){return t===y?1:e===y?-1:t>e?1:t<e?-1:0}),W=0,H=$.length;W<H;++W)for(var tt in U=$[W],V=f.getTilePixelSize(U,i,h),B=g.getResolution(U)/v,Z=x*f.getGutterForProjection(h),q=C[U])T=q[tt],R=((z=g.getTileCoordExtent(T.getTileCoord(),L))[0]-O[0])/v*x/m,S=(O[3]-z[3])/v*x/m,J=V[0]*B/m,Q=V[1]*B/m,this.drawTileImage(T,t,e,R,S,J,Q,Z,y===U),this.renderedTiles.push(T);this.renderedRevision=_,this.renderedResolution=v*i/x*m,this.renderedExtent_=O}var et=this.renderedResolution/c,it=Object(u.b)(this.imageTransform_,i*r[0]/2,i*r[1]/2,et,et,0,(this.renderedExtent_[0]-p[0])/this.renderedResolution*i,(p[1]-this.renderedExtent_[3])/this.renderedResolution*i);return Object(u.b)(this.coordinateToCanvasPixelTransform,i*r[0]/2-it[4],i*r[1]/2-it[5],i/c,-i/c,0,-p[0],-p[1]),this.updateUsedTiles(t.usedTiles,f,y,E),this.manageTilePyramid(t,f,g,i,h,b,y,d.getPreload()),this.scheduleExpireCache(t,f),this.renderedTiles.length>0},e.prototype.drawTileImage=function(t,e,i,r,o,s,a,h,l){var c=this.getTileImage(t);if(c){var u=Object(n.c)(this),p=l?t.getAlpha(u,e.time):1,d=this.getLayer().getSource();1!==p||d.getOpaque(e.viewState.projection)||this.context.clearRect(r,o,s,a);var f=p!==this.context.globalAlpha;f&&(this.context.save(),this.context.globalAlpha=p),this.context.drawImage(c,h,h,c.width-2*h,c.height-2*h,r,o,s,a),f&&this.context.restore(),1!==p?e.animate=!0:l&&t.endTransition(u)}},e.prototype.getImage=function(){var t=this.context;return t?t.canvas:null},e.prototype.getImageTransform=function(){return this.imageTransform_},e.prototype.getTileImage=function(t){return t.getImage()},e}(c.a);p.handles=function(t){return t.getType()===r.a.TILE},p.create=function(t,e){return new p(e)},p.prototype.getLayer,e.a=p},function(t,e,i){"use strict";i.d(e,"a",function(){return r});var n=function(t,e,i,n){this.minX=t,this.maxX=e,this.minY=i,this.maxY=n};function r(t,e,i,r,o){return void 0!==o?(o.minX=t,o.maxX=e,o.minY=i,o.maxY=r,o):new n(t,e,i,r)}n.prototype.contains=function(t){return this.containsXY(t[1],t[2])},n.prototype.containsTileRange=function(t){return this.minX<=t.minX&&t.maxX<=this.maxX&&this.minY<=t.minY&&t.maxY<=this.maxY},n.prototype.containsXY=function(t,e){return this.minX<=t&&t<=this.maxX&&this.minY<=e&&e<=this.maxY},n.prototype.equals=function(t){return this.minX==t.minX&&this.minY==t.minY&&this.maxX==t.maxX&&this.maxY==t.maxY},n.prototype.extend=function(t){t.minX<this.minX&&(this.minX=t.minX),t.maxX>this.maxX&&(this.maxX=t.maxX),t.minY<this.minY&&(this.minY=t.minY),t.maxY>this.maxY&&(this.maxY=t.maxY)},n.prototype.getHeight=function(){return this.maxY-this.minY+1},n.prototype.getSize=function(){return[this.getWidth(),this.getHeight()]},n.prototype.getWidth=function(){return this.maxX-this.minX+1},n.prototype.intersects=function(t){return this.minX<=t.maxX&&this.maxX>=t.minX&&this.minY<=t.maxY&&this.maxY>=t.minY},e.b=n},function(t,e,i){"use strict";i.d(e,"a",function(){return o});var n=i(9),r=i(5),o=1/0,s=function(t,e){this.priorityFunction_=t,this.keyFunction_=e,this.elements_=[],this.priorities_=[],this.queuedElements_={}};s.prototype.clear=function(){this.elements_.length=0,this.priorities_.length=0,Object(r.b)(this.queuedElements_)},s.prototype.dequeue=function(){var t=this.elements_,e=this.priorities_,i=t[0];1==t.length?(t.length=0,e.length=0):(t[0]=t.pop(),e[0]=e.pop(),this.siftUp_(0));var n=this.keyFunction_(i);return delete this.queuedElements_[n],i},s.prototype.enqueue=function(t){Object(n.a)(!(this.keyFunction_(t)in this.queuedElements_),31);var e=this.priorityFunction_(t);return e!=o&&(this.elements_.push(t),this.priorities_.push(e),this.queuedElements_[this.keyFunction_(t)]=!0,this.siftDown_(0,this.elements_.length-1),!0)},s.prototype.getCount=function(){return this.elements_.length},s.prototype.getLeftChildIndex_=function(t){return 2*t+1},s.prototype.getRightChildIndex_=function(t){return 2*t+2},s.prototype.getParentIndex_=function(t){return t-1>>1},s.prototype.heapify_=function(){var t;for(t=(this.elements_.length>>1)-1;t>=0;t--)this.siftUp_(t)},s.prototype.isEmpty=function(){return 0===this.elements_.length},s.prototype.isKeyQueued=function(t){return t in this.queuedElements_},s.prototype.isQueued=function(t){return this.isKeyQueued(this.keyFunction_(t))},s.prototype.siftUp_=function(t){for(var e=this.elements_,i=this.priorities_,n=e.length,r=e[t],o=i[t],s=t;t<n>>1;){var a=this.getLeftChildIndex_(t),h=this.getRightChildIndex_(t),l=h<n&&i[h]<i[a]?h:a;e[t]=e[l],i[t]=i[l],t=l}e[t]=r,i[t]=o,this.siftDown_(s,t)},s.prototype.siftDown_=function(t,e){for(var i=this.elements_,n=this.priorities_,r=i[e],o=n[e];e>t;){var s=this.getParentIndex_(e);if(!(n[s]>o))break;i[e]=i[s],n[e]=n[s],e=s}i[e]=r,n[e]=o},s.prototype.reprioritize=function(){var t,e,i,n=this.priorityFunction_,r=this.elements_,s=this.priorities_,a=0,h=r.length;for(e=0;e<h;++e)(i=n(t=r[e]))==o?delete this.queuedElements_[this.keyFunction_(t)]:(s[a]=i,r[a++]=t);r.length=a,s.length=a,this.heapify_()},e.b=s},function(t,e,i){"use strict";var n=i(3),r=i(25),o=i(21),s=i(12),a=i(50),h=i(9),l=i(4),c=i(2),u=i(1),p=i(58),d=i(5),f=i(16),_={LAYERS:"layers"},g=function(t){function e(e){var i=e||{},n=Object(d.a)({},i);delete n.layers;var o=i.layers;t.call(this,n),this.layersListenerKeys_=[],this.listenerKeys_={},Object(l.a)(this,Object(s.b)(_.LAYERS),this.handleLayersChanged_,this),o?Array.isArray(o)?o=new r.a(o.slice(),{unique:!0}):Object(h.a)("function"==typeof o.getArray,43):o=new r.a(void 0,{unique:!0}),this.setLayers(o)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleLayerChange_=function(){this.changed()},e.prototype.handleLayersChanged_=function(){this.layersListenerKeys_.forEach(l.e),this.layersListenerKeys_.length=0;var t=this.getLayers();for(var e in this.layersListenerKeys_.push(Object(l.a)(t,o.a.ADD,this.handleLayersAdd_,this),Object(l.a)(t,o.a.REMOVE,this.handleLayersRemove_,this)),this.listenerKeys_)this.listenerKeys_[e].forEach(l.e);Object(d.b)(this.listenerKeys_);for(var i=t.getArray(),r=0,s=i.length;r<s;r++){var h=i[r];this.listenerKeys_[Object(n.c)(h)]=[Object(l.a)(h,a.a.PROPERTYCHANGE,this.handleLayerChange_,this),Object(l.a)(h,c.a.CHANGE,this.handleLayerChange_,this)]}this.changed()},e.prototype.handleLayersAdd_=function(t){var e=t.element;this.listenerKeys_[Object(n.c)(e)]=[Object(l.a)(e,a.a.PROPERTYCHANGE,this.handleLayerChange_,this),Object(l.a)(e,c.a.CHANGE,this.handleLayerChange_,this)],this.changed()},e.prototype.handleLayersRemove_=function(t){var e=t.element,i=Object(n.c)(e);this.listenerKeys_[i].forEach(l.e),delete this.listenerKeys_[i],this.changed()},e.prototype.getLayers=function(){return this.get(_.LAYERS)},e.prototype.setLayers=function(t){this.set(_.LAYERS,t)},e.prototype.getLayersArray=function(t){var e=void 0!==t?t:[];return this.getLayers().forEach(function(t){t.getLayersArray(e)}),e},e.prototype.getLayerStatesArray=function(t){var e=void 0!==t?t:[],i=e.length;this.getLayers().forEach(function(t){t.getLayerStatesArray(e)});for(var n=this.getLayerState(),r=i,o=e.length;r<o;r++){var s=e[r];s.opacity*=n.opacity,s.visible=s.visible&&n.visible,s.maxResolution=Math.min(s.maxResolution,n.maxResolution),s.minResolution=Math.max(s.minResolution,n.minResolution),void 0!==n.extent&&(void 0!==s.extent?s.extent=Object(u.B)(s.extent,n.extent):s.extent=n.extent)}return e},e.prototype.getSourceState=function(){return f.a.READY},e}(p.a);e.a=g},,function(t,e,i){"use strict";var n=i(17),r=i(7),o=i(55),s=i(13),a=i(32),h=i(78),l=i(41),c=i(38),u=i(77),p=i(3),d=i(57),f=i(4),_=i(2),g=i(1),y=i(8),v=i(71);function m(t,e){v.a.expire()}function b(t,e){return t.zIndex-e.zIndex}var E=function(t){function e(e){t.call(this),this.map_=e,this.layerRenderers_={},this.layerRendererListeners_={},this.layerRendererConstructors_=[]}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.dispatchRenderEvent=function(t,e){Object(p.b)()},e.prototype.registerLayerRenderers=function(t){this.layerRendererConstructors_.push.apply(this.layerRendererConstructors_,t)},e.prototype.calculateMatrices2D=function(t){var e=t.viewState,i=t.coordinateToPixelTransform,r=t.pixelToCoordinateTransform;Object(n.b)(i,t.size[0]/2,t.size[1]/2,1/e.resolution,-1/e.resolution,-e.rotation,-e.center[0],-e.center[1]),Object(n.d)(Object(n.g)(r,i))},e.prototype.removeLayerRenderers=function(){for(var t in this.layerRenderers_)this.removeLayerRendererByKey_(t).dispose()},e.prototype.forEachFeatureAtCoordinate=function(t,e,i,n,r,o,s){var h,l=e.viewState,c=l.resolution;function u(t,i){var o=e.layerStates[Object(p.c)(i)].managed;if(!(Object(p.c)(t)in e.skippedFeatureUids)||o)return n.call(r,t,o?i:null)}var d=l.projection,f=t;if(d.canWrapX()){var _=d.getExtent(),y=Object(g.E)(_),v=t[0];if(v<_[0]||v>_[2])f=[v+y*Math.ceil((_[0]-v)/y),t[1]]}var m,b=e.layerStatesArray;for(m=b.length-1;m>=0;--m){var E=b[m],O=E.layer;if(Object(a.b)(E,c)&&o.call(s,O)){var x=this.getLayerRenderer(O),C=O.getSource();if(C&&(h=x.forEachFeatureAtCoordinate(C.getWrapX()?f:t,e,i,u)),h)return h}}},e.prototype.forEachLayerAtPixel=function(t,e,i,n,r,o,s){return Object(p.b)()},e.prototype.hasFeatureAtCoordinate=function(t,e,i,n,r){return void 0!==this.forEachFeatureAtCoordinate(t,e,i,y.b,this,n,r)},e.prototype.getLayerRenderer=function(t){var e=Object(p.c)(t);if(e in this.layerRenderers_)return this.layerRenderers_[e];for(var i,n=0,r=this.layerRendererConstructors_.length;n<r;++n){var o=this.layerRendererConstructors_[n];if(o.handles(t)){i=o.create(this,t);break}}if(!i)throw new Error("Unable to create renderer for layer: "+t.getType());return this.layerRenderers_[e]=i,this.layerRendererListeners_[e]=Object(f.a)(i,_.a.CHANGE,this.handleLayerRendererChange_,this),i},e.prototype.getLayerRendererByKey=function(t){return this.layerRenderers_[t]},e.prototype.getLayerRenderers=function(){return this.layerRenderers_},e.prototype.getMap=function(){return this.map_},e.prototype.handleLayerRendererChange_=function(){this.map_.render()},e.prototype.removeLayerRendererByKey_=function(t){var e=this.layerRenderers_[t];return delete this.layerRenderers_[t],Object(f.e)(this.layerRendererListeners_[t]),delete this.layerRendererListeners_[t],e},e.prototype.removeUnusedLayerRenderers_=function(t,e){for(var i in this.layerRenderers_)e&&i in e.layerStates||this.removeLayerRendererByKey_(i).dispose()},e.prototype.renderFrame=function(t){Object(p.b)()},e.prototype.scheduleExpireIconCache=function(t){t.postRenderFunctions.push(m)},e.prototype.scheduleRemoveUnusedLayerRenderers=function(t){for(var e in this.layerRenderers_)if(!(e in t.layerStates))return void t.postRenderFunctions.push(this.removeUnusedLayerRenderers_.bind(this))},e}(d.a),O=i(16);i.d(e,"b",function(){return x});var x=[],C=function(t){function e(e){t.call(this,e);var i=e.getViewport();this.context_=Object(s.a)(),this.canvas_=this.context_.canvas,this.canvas_.style.width="100%",this.canvas_.style.height="100%",this.canvas_.style.display="block",this.canvas_.className=o.d,i.insertBefore(this.canvas_,i.childNodes[0]||null),this.renderedVisible_=!0,this.transform_=Object(n.c)()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.dispatchRenderEvent=function(t,e){var i=this.getMap(),n=this.context_;if(i.hasListener(t)){var r=e.extent,o=e.pixelRatio,s=e.viewState.rotation,a=this.getTransform(e),l=new u.a(n,o,r,a,s),c=new h.a(t,l,e,n,null);i.dispatchEvent(c)}},e.prototype.getTransform=function(t){var e=t.viewState,i=this.canvas_.width/2,r=this.canvas_.height/2,o=t.pixelRatio/e.resolution,s=-o,a=-e.rotation,h=-e.center[0],l=-e.center[1];return Object(n.b)(this.transform_,i,r,o,s,a,h,l)},e.prototype.renderFrame=function(t){if(t){var e=this.context_,i=t.pixelRatio,n=Math.round(t.size[0]*i),o=Math.round(t.size[1]*i);this.canvas_.width!=n||this.canvas_.height!=o?(this.canvas_.width=n,this.canvas_.height=o):e.clearRect(0,0,n,o);var s=t.viewState.rotation;this.calculateMatrices2D(t),this.dispatchRenderEvent(l.a.PRECOMPOSE,t);var h=t.layerStatesArray;Object(r.l)(h,b),s&&(e.save(),Object(c.s)(e,s,n/2,o/2));var u,p,d=t.viewState.resolution;for(u=0,p=h.length;u<p;++u){var f=h[u],_=f.layer,g=this.getLayerRenderer(_);Object(a.b)(f,d)&&f.sourceState==O.a.READY&&(g.prepareFrame(t,f)&&g.composeFrame(t,f,e))}s&&e.restore(),this.dispatchRenderEvent(l.a.POSTCOMPOSE,t),this.renderedVisible_||(this.canvas_.style.display="",this.renderedVisible_=!0),this.scheduleRemoveUnusedLayerRenderers(t),this.scheduleExpireIconCache(t)}else this.renderedVisible_&&(this.canvas_.style.display="none",this.renderedVisible_=!1)},e.prototype.forEachLayerAtPixel=function(t,e,i,r,o,s,h){var l,c,u=e.viewState.resolution,p=e.layerStatesArray,d=p.length,f=Object(n.a)(e.pixelToCoordinateTransform,t.slice());for(c=d-1;c>=0;--c){var _=p[c],g=_.layer;if(Object(a.b)(_,u)&&s.call(h,g))if(l=this.getLayerRenderer(g).forEachLayerAtCoordinate(f,e,i,r,o))return l}},e.prototype.registerLayerRenderers=function(e){t.prototype.registerLayerRenderers.call(this,e);for(var i=0,n=e.length;i<n;++i){var o=e[i];Object(r.f)(x,o)||x.push(o)}},e}(E);e.a=C},function(t,e,i){"use strict";var n=i(3),r=i(1),o=i(8),s=i(78),a=i(41),h=i(38),l=i(77),c=i(30),u=i(73),p=i(19),d=i(4),f=i(2),_=i(16),g=function(t){function e(e){t.call(this),this.layer_=e}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.createLoadedTileFinder=function(t,e,i){return function(n,r){return t.forEachLoadedTile(e,n,r,function(t){i[n]||(i[n]={}),i[n][t.tileCoord.toString()]=t})}},e.prototype.forEachFeatureAtCoordinate=function(t,e,i,n){},e.prototype.getLayer=function(){return this.layer_},e.prototype.handleImageChange_=function(t){t.target.getState()===c.a.LOADED&&this.renderIfReadyAndVisible()},e.prototype.hasFeatureAtCoordinate=function(t,e){return!1},e.prototype.loadImage=function(t){var e=t.getState();return e!=c.a.LOADED&&e!=c.a.ERROR&&Object(d.a)(t,f.a.CHANGE,this.handleImageChange_,this),e==c.a.IDLE&&(t.load(),e=t.getState()),e==c.a.LOADED},e.prototype.renderIfReadyAndVisible=function(){var t=this.getLayer();t.getVisible()&&t.getSourceState()==_.a.READY&&this.changed()},e.prototype.scheduleExpireCache=function(t,e){if(e.canExpireCache()){var i=function(t,e,i){var r=Object(n.c)(t);r in i.usedTiles&&t.expireCache(i.viewState.projection,i.usedTiles[r])}.bind(null,e);t.postRenderFunctions.push(i)}},e.prototype.updateUsedTiles=function(t,e,i,r){var o=Object(n.c)(e),s=i.toString();o in t?s in t[o]?t[o][s].extend(r):t[o][s]=r:(t[o]={},t[o][s]=r)},e.prototype.manageTilePyramid=function(t,e,i,r,o,s,a,h,l,c){var u=Object(n.c)(e);u in t.wantedTiles||(t.wantedTiles[u]={});var d,f,_,g,y,v,m=t.wantedTiles[u],b=t.tileQueue;for(v=i.getMinZoom();v<=a;++v)for(f=i.getTileRangeForExtentAndZ(s,v,f),_=i.getResolution(v),g=f.minX;g<=f.maxX;++g)for(y=f.minY;y<=f.maxY;++y)a-v<=h?((d=e.getTile(v,g,y,r,o)).getState()==p.a.IDLE&&(m[d.getKey()]=!0,b.isKeyQueued(d.getKey())||b.enqueue([d,u,i.getTileCoordCenter(d.tileCoord),_])),void 0!==l&&l.call(c,d)):e.useTile(v,g,y,o)},e}(u.a),y=i(17),v=function(t){function e(e){t.call(this,e),this.renderedResolution,this.transform_=Object(y.c)()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.clip=function(t,e,i){var n=e.pixelRatio,o=e.size[0]*n,s=e.size[1]*n,a=e.viewState.rotation,l=Object(r.C)(i),c=Object(r.D)(i),u=Object(r.w)(i),p=Object(r.v)(i);Object(y.a)(e.coordinateToPixelTransform,l),Object(y.a)(e.coordinateToPixelTransform,c),Object(y.a)(e.coordinateToPixelTransform,u),Object(y.a)(e.coordinateToPixelTransform,p),t.save(),Object(h.s)(t,-a,o/2,s/2),t.beginPath(),t.moveTo(l[0]*n,l[1]*n),t.lineTo(c[0]*n,c[1]*n),t.lineTo(u[0]*n,u[1]*n),t.lineTo(p[0]*n,p[1]*n),t.clip(),Object(h.s)(t,a,o/2,s/2)},e.prototype.dispatchComposeEvent_=function(t,e,i,n){var r=this.getLayer();if(r.hasListener(t)){var o=i.size[0]*i.pixelRatio,a=i.size[1]*i.pixelRatio,c=i.viewState.rotation;Object(h.s)(e,-c,o/2,a/2);var u=void 0!==n?n:this.getTransform(i,0),p=new l.a(e,i.pixelRatio,i.extent,u,i.viewState.rotation),d=new s.a(t,p,i,e,null);r.dispatchEvent(d),Object(h.s)(e,c,o/2,a/2)}},e.prototype.forEachLayerAtCoordinate=function(t,e,i,n,r){return this.forEachFeatureAtCoordinate(t,e,i,o.b)?n.call(r,this.getLayer(),null):void 0},e.prototype.postCompose=function(t,e,i,n){this.dispatchComposeEvent_(a.a.POSTCOMPOSE,t,e,n)},e.prototype.preCompose=function(t,e,i){this.dispatchComposeEvent_(a.a.PRECOMPOSE,t,e,i)},e.prototype.dispatchRenderEvent=function(t,e,i){this.dispatchComposeEvent_(a.a.RENDER,t,e,i)},e.prototype.getTransform=function(t,e){var i=t.viewState,n=t.pixelRatio,r=n*t.size[0]/2,o=n*t.size[1]/2,s=n/i.resolution,a=-s,h=-i.rotation,l=-i.center[0]+e,c=-i.center[1];return Object(y.b)(this.transform_,r,o,s,a,h,l,c)},e.prototype.composeFrame=function(t,e,i){Object(n.b)()},e.prototype.prepareFrame=function(t,e){return Object(n.b)()},e}(g);e.a=v},,,,function(t,e,i){"use strict";var n=i(63),r=i(79),o=i(29),s=i(14),a=i(7),h=i(1),l=i(61),c=i(5),u=i(96),p=i(81),d=i(17),f=function(t){function e(i){if(t.call(this,i),this.image_=null,this.imageTransform_=Object(d.c)(),this.skippedFeatures_=[],this.vectorRenderer_=null,i.getType()===o.a.VECTOR)for(var n=0,r=u.b.length;n<r;++n){var s=u.b[n];if(s!==e&&s.handles(i)){this.vectorRenderer_=new s(i);break}}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.disposeInternal=function(){this.vectorRenderer_&&this.vectorRenderer_.dispose(),t.prototype.disposeInternal.call(this)},e.prototype.getImage=function(){return this.image_?this.image_.getImage():null},e.prototype.getImageTransform=function(){return this.imageTransform_},e.prototype.prepareFrame=function(t,e){var i,o=t.pixelRatio,l=t.size,u=t.viewState,p=u.center,f=u.resolution,_=this.getLayer().getSource(),g=t.viewHints,y=this.vectorRenderer_,v=t.extent;if(y||void 0===e.extent||(v=Object(h.B)(v,e.extent)),!g[s.a.ANIMATING]&&!g[s.a.INTERACTING]&&!Object(h.H)(v)){var m=u.projection;if(!n.a){var b=_.getProjection();b&&(m=b)}var E=this.skippedFeatures_;if(y){var O=y.context,x=Object(c.a)({},t,{size:[Object(h.E)(v)/f,Object(h.A)(v)/f],viewState:Object(c.a)({},t.viewState,{rotation:0})}),C=Object.keys(x.skippedFeatureUids).sort();i=new r.a(v,f,o,O.canvas,function(t){!y.prepareFrame(x,e)||!y.replayGroupChanged&&Object(a.b)(E,C)||(O.canvas.width=x.size[0]*o,O.canvas.height=x.size[1]*o,y.compose(O,x,e),E=C,t())})}else i=_.getImage(v,f,o,m);i&&this.loadImage(i)&&(this.image_=i,this.skippedFeatures_=E)}if(this.image_){var T=(i=this.image_).getExtent(),R=i.getResolution(),S=i.getPixelRatio(),I=o*R/(f*S),j=Object(d.b)(this.imageTransform_,o*l[0]/2,o*l[1]/2,I,I,0,S*(T[0]-p[0])/R,S*(p[1]-T[3])/R);Object(d.b)(this.coordinateToCanvasPixelTransform,o*l[0]/2-j[4],o*l[1]/2-j[5],o/f,-o/f,0,-p[0],-p[1]),this.renderedResolution=R*o/S}return!!this.image_},e.prototype.forEachFeatureAtCoordinate=function(e,i,n,r){return this.vectorRenderer_?this.vectorRenderer_.forEachFeatureAtCoordinate(e,i,n,r):t.prototype.forEachFeatureAtCoordinate.call(this,e,i,n,r)},e}(p.a);f.handles=function(t){return t.getType()===o.a.IMAGE||t.getType()===o.a.VECTOR&&t.getRenderMode()===l.a.IMAGE},f.create=function(t,e){return new f(e)},e.a=f},function(t,e,i){"use strict";e.a={POINT:"point",LINE:"line"}},function(t,e,i){"use strict";e.a={IMAGE:"image",HYBRID:"hybrid",VECTOR:"vector"}},function(t,e,i){"use strict";var n=i(19),r=i(4),o=i(2),s=function(t){function e(e,i){t.call(this,function(t){return e.apply(null,t)},function(t){return t[0].getKey()}),this.tileChangeCallback_=i,this.tilesLoading_=0,this.tilesLoadingKeys_={}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.enqueue=function(e){var i=t.prototype.enqueue.call(this,e);if(i){var n=e[0];Object(r.a)(n,o.a.CHANGE,this.handleTileChange,this)}return i},e.prototype.getTilesLoading=function(){return this.tilesLoading_},e.prototype.handleTileChange=function(t){var e=t.target,i=e.getState();if(i===n.a.LOADED||i===n.a.ERROR||i===n.a.EMPTY||i===n.a.ABORT){Object(r.c)(e,o.a.CHANGE,this.handleTileChange,this);var s=e.getKey();s in this.tilesLoadingKeys_&&(delete this.tilesLoadingKeys_[s],--this.tilesLoading_),this.tileChangeCallback_()}},e.prototype.loadMoreTiles=function(t,e){for(var i,r,o,s=0,a=!1;this.tilesLoading_<t&&s<e&&this.getCount()>0;)o=(r=this.dequeue()[0]).getKey(),(i=r.getState())===n.a.ABORT?a=!0:i!==n.a.IDLE||o in this.tilesLoadingKeys_||(this.tilesLoadingKeys_[o]=!0,++this.tilesLoading_,++s,r.load());0===s&&a&&this.tileChangeCallback_()},e}(i(93).b);e.a=s},,,,,,function(t,e,i){"use strict";i.r(e);var n=i(25),r=function(t,e,i){this.decay_=t,this.minVelocity_=e,this.delay_=i,this.points_=[],this.angle_=0,this.initialVelocity_=0};r.prototype.begin=function(){this.points_.length=0,this.angle_=0,this.initialVelocity_=0},r.prototype.update=function(t,e){this.points_.push(t,e,Date.now())},r.prototype.end=function(){if(this.points_.length<6)return!1;var t=Date.now()-this.delay_,e=this.points_.length-3;if(this.points_[e+2]<t)return!1;for(var i=e-3;i>0&&this.points_[i+2]>t;)i-=3;var n=this.points_[e+2]-this.points_[i+2];if(n<1e3/60)return!1;var r=this.points_[e]-this.points_[i],o=this.points_[e+1]-this.points_[i+1];return this.angle_=Math.atan2(o,r),this.initialVelocity_=Math.sqrt(r*r+o*o)/n,this.initialVelocity_>this.minVelocity_},r.prototype.getDistance=function(){return(this.minVelocity_-this.initialVelocity_)/this.decay_},r.prototype.getAngle=function(){return this.angle_};var o=r,s=i(26),a=i(12),h=i(24),l={ACTIVE:"active"},c=i(6);function u(t,e,i,n){e=t.constrainRotation(e,0),p(t,e,i,n)}function p(t,e,i,n){if(void 0!==e){var r=t.getRotation(),o=t.getCenter();void 0!==r&&o&&n>0?t.animate({rotation:e,anchor:i,duration:n,easing:h.b}):t.rotate(e,i)}}function d(t,e,i,n,r){e=t.constrainResolution(e,0,r),_(t,e,i,n)}function f(t,e,i,n){var r=t.getResolution(),o=t.constrainResolution(r,e,0);if(void 0!==o){var s=t.getResolutions();o=Object(c.a)(o,t.getMinResolution()||s[s.length-1],t.getMaxResolution()||s[0])}if(i&&void 0!==o&&o!==r){var a=t.getCenter(),h=t.calculateCenterZoom(o,i);h=t.constrainCenter(h),i=[(o*a[0]-r*h[0])/(o-r),(o*a[1]-r*h[1])/(o-r)]}_(t,o,i,n)}function _(t,e,i,n){if(e){var r=t.getResolution(),o=t.getCenter();if(void 0!==r&&o&&e!==r&&n)t.animate({resolution:e,anchor:i,duration:n,easing:h.b});else{if(i){var s=t.calculateCenterZoom(e,i);t.setCenter(s)}t.setResolution(e)}}}var g=function(t){function e(e){t.call(this),e.handleEvent&&(this.handleEvent=e.handleEvent),this.map_=null,this.setActive(!0)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getActive=function(){return this.get(l.ACTIVE)},e.prototype.getMap=function(){return this.map_},e.prototype.handleEvent=function(t){return!0},e.prototype.setActive=function(t){this.set(l.ACTIVE,t)},e.prototype.setMap=function(t){this.map_=t},e}(a.a);function y(t){var e=!1;if(t.type==s.a.DBLCLICK){var i=t.originalEvent,n=t.map,r=t.coordinate,o=i.shiftKey?-this.delta_:this.delta_;f(n.getView(),o,r,this.duration_),t.preventDefault(),e=!0}return!e}var v=function(t){function e(e){t.call(this,{handleEvent:y});var i=e||{};this.delta_=i.delta?i.delta:1,this.duration_=void 0!==i.duration?i.duration:250}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(g),m=i(14),b=i(18),E=i(9),O=i(8),x=i(28),C=function(t){var e=t.originalEvent;return e.altKey&&!(e.metaKey||e.ctrlKey)&&!e.shiftKey},T=function(t){var e=t.originalEvent;return e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},R=function(t){return t.target.getTargetElement()===document.activeElement},S=O.b,I=function(t){var e=t.originalEvent;return 0==e.button&&!(x.j&&x.e&&e.ctrlKey)},j=O.a,w=function(t){return"pointermove"==t.type},L=function(t){return t.type==s.a.SINGLECLICK},F=function(t){var e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&!e.shiftKey},M=function(t){var e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},P=function(t){var e=t.originalEvent.target.tagName;return"INPUT"!==e&&"SELECT"!==e&&"TEXTAREA"!==e},A=function(t){var e=t.pointerEvent;return Object(E.a)(void 0!==e,56),"mouse"==e.pointerType},D=function(t){var e=t.pointerEvent;return Object(E.a)(void 0!==e,56),e.isPrimary&&0===e.button},N=i(5);function k(t){for(var e=t.length,i=0,n=0,r=0;r<e;r++)i+=t[r].clientX,n+=t[r].clientY;return[i/e,n/e]}var G=function(t){function e(e){var i=e||{};t.call(this,i),i.handleDownEvent&&(this.handleDownEvent=i.handleDownEvent),i.handleDragEvent&&(this.handleDragEvent=i.handleDragEvent),i.handleMoveEvent&&(this.handleMoveEvent=i.handleMoveEvent),i.handleUpEvent&&(this.handleUpEvent=i.handleUpEvent),i.stopDown&&(this.stopDown=i.stopDown),this.handlingDownUpSequence=!1,this.trackedPointers_={},this.targetPointers=[]}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleDownEvent=function(t){return!1},e.prototype.handleDragEvent=function(t){},e.prototype.handleEvent=function(t){if(!t.pointerEvent)return!0;var e=!1;if(this.updateTrackedPointers_(t),this.handlingDownUpSequence){if(t.type==s.a.POINTERDRAG)this.handleDragEvent(t);else if(t.type==s.a.POINTERUP){var i=this.handleUpEvent(t);this.handlingDownUpSequence=i&&this.targetPointers.length>0}}else if(t.type==s.a.POINTERDOWN){var n=this.handleDownEvent(t);n&&t.preventDefault(),this.handlingDownUpSequence=n,e=this.stopDown(n)}else t.type==s.a.POINTERMOVE&&this.handleMoveEvent(t);return!e},e.prototype.handleMoveEvent=function(t){},e.prototype.handleUpEvent=function(t){return!1},e.prototype.stopDown=function(t){return t},e.prototype.updateTrackedPointers_=function(t){if(function(t){var e=t.type;return e===s.a.POINTERDOWN||e===s.a.POINTERDRAG||e===s.a.POINTERUP}(t)){var e=t.pointerEvent,i=e.pointerId.toString();t.type==s.a.POINTERUP?delete this.trackedPointers_[i]:t.type==s.a.POINTERDOWN?this.trackedPointers_[i]=e:i in this.trackedPointers_&&(this.trackedPointers_[i]=e),this.targetPointers=Object(N.c)(this.trackedPointers_)}},e}(g),Y=function(t){function e(e){t.call(this,{stopDown:O.a});var i=e||{};this.kinetic_=i.kinetic,this.lastCentroid=null,this.lastPointersCount_,this.panning_=!1,this.condition_=i.condition?i.condition:F,this.noKinetic_=!1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleDragEvent=function(t){this.panning_||(this.panning_=!0,this.getMap().getView().setHint(m.a.INTERACTING,1));var e=this.targetPointers,i=k(e);if(e.length==this.lastPointersCount_){if(this.kinetic_&&this.kinetic_.update(i[0],i[1]),this.lastCentroid){var n=this.lastCentroid[0]-i[0],r=i[1]-this.lastCentroid[1],o=t.map.getView(),s=[n,r];Object(b.g)(s,o.getResolution()),Object(b.f)(s,o.getRotation()),Object(b.a)(s,o.getCenter()),s=o.constrainCenter(s),o.setCenter(s)}}else this.kinetic_&&this.kinetic_.begin();this.lastCentroid=i,this.lastPointersCount_=e.length},e.prototype.handleUpEvent=function(t){var e=t.map,i=e.getView();if(0===this.targetPointers.length){if(!this.noKinetic_&&this.kinetic_&&this.kinetic_.end()){var n=this.kinetic_.getDistance(),r=this.kinetic_.getAngle(),o=i.getCenter(),s=e.getPixelFromCoordinate(o),a=e.getCoordinateFromPixel([s[0]-n*Math.cos(r),s[1]-n*Math.sin(r)]);i.animate({center:i.constrainCenter(a),duration:500,easing:h.b})}return this.panning_&&(this.panning_=!1,i.setHint(m.a.INTERACTING,-1)),!1}return this.kinetic_&&this.kinetic_.begin(),this.lastCentroid=null,!0},e.prototype.handleDownEvent=function(t){if(this.targetPointers.length>0&&this.condition_(t)){var e=t.map.getView();return this.lastCentroid=null,e.getAnimating()&&e.setCenter(t.frameState.viewState.center),this.kinetic_&&this.kinetic_.begin(),this.noKinetic_=this.targetPointers.length>1,!0}return!1},e}(G),X=i(47),K=function(t){function e(e){var i=e||{};t.call(this,{stopDown:O.a}),this.condition_=i.condition?i.condition:T,this.lastAngle_=void 0,this.duration_=void 0!==i.duration?i.duration:250}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleDragEvent=function(t){if(A(t)){var e=t.map,i=e.getView();if(i.getConstraints().rotation!==X.c){var n=e.getSize(),r=t.pixel,o=Math.atan2(n[1]/2-r[1],r[0]-n[0]/2);if(void 0!==this.lastAngle_){var s=o-this.lastAngle_,a=i.getRotation();p(i,a-s)}this.lastAngle_=o}}},e.prototype.handleUpEvent=function(t){if(!A(t))return!0;var e=t.map.getView();e.setHint(m.a.INTERACTING,-1);var i=e.getRotation();return u(e,i,void 0,this.duration_),!1},e.prototype.handleDownEvent=function(t){return!!A(t)&&(!(!I(t)||!this.condition_(t))&&(t.map.getView().setHint(m.a.INTERACTING,1),this.lastAngle_=void 0,!0))},e}(G),B=i(1),V=i(11),U=i(57),W=i(31),H=function(t){function e(e){t.call(this),this.geometry_=null,this.element_=document.createElement("div"),this.element_.style.position="absolute",this.element_.className="ol-box "+e,this.map_=null,this.startPixel_=null,this.endPixel_=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.disposeInternal=function(){this.setMap(null)},e.prototype.render_=function(){var t=this.startPixel_,e=this.endPixel_,i=this.element_.style;i.left=Math.min(t[0],e[0])+"px",i.top=Math.min(t[1],e[1])+"px",i.width=Math.abs(e[0]-t[0])+"px",i.height=Math.abs(e[1]-t[1])+"px"},e.prototype.setMap=function(t){if(this.map_){this.map_.getOverlayContainer().removeChild(this.element_);var e=this.element_.style;e.left=e.top=e.width=e.height="inherit"}this.map_=t,this.map_&&this.map_.getOverlayContainer().appendChild(this.element_)},e.prototype.setPixels=function(t,e){this.startPixel_=t,this.endPixel_=e,this.createOrUpdateGeometry(),this.render_()},e.prototype.createOrUpdateGeometry=function(){var t=this.startPixel_,e=this.endPixel_,i=[t,[t[0],e[1]],e,[e[0],t[1]]].map(this.map_.getCoordinateFromPixel,this.map_);i[4]=i[0].slice(),this.geometry_?this.geometry_.setCoordinates([i]):this.geometry_=new W.b([i])},e.prototype.getGeometry=function(){return this.geometry_},e}(U.a),z="boxstart",Z="boxdrag",q="boxend",J=function(t){function e(e,i,n){t.call(this,e),this.coordinate=i,this.mapBrowserEvent=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(V.a),Q=function(t){function e(e){t.call(this);var i=e||{};this.box_=new H(i.className||"ol-dragbox"),this.minArea_=void 0!==i.minArea?i.minArea:64,this.onBoxEnd_=i.onBoxEnd?i.onBoxEnd:O.c,this.startPixel_=null,this.condition_=i.condition?i.condition:S,this.boxEndCondition_=i.boxEndCondition?i.boxEndCondition:this.defaultBoxEndCondition}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.defaultBoxEndCondition=function(t,e,i){var n=i[0]-e[0],r=i[1]-e[1];return n*n+r*r>=this.minArea_},e.prototype.getGeometry=function(){return this.box_.getGeometry()},e.prototype.handleDragEvent=function(t){A(t)&&(this.box_.setPixels(this.startPixel_,t.pixel),this.dispatchEvent(new J(Z,t.coordinate,t)))},e.prototype.handleUpEvent=function(t){return!A(t)||(this.box_.setMap(null),this.boxEndCondition_(t,this.startPixel_,t.pixel)&&(this.onBoxEnd_(t),this.dispatchEvent(new J(q,t.coordinate,t))),!1)},e.prototype.handleDownEvent=function(t){return!!A(t)&&(!(!I(t)||!this.condition_(t))&&(this.startPixel_=t.pixel,this.box_.setMap(t.map),this.box_.setPixels(this.startPixel_,this.startPixel_),this.dispatchEvent(new J(z,t.coordinate,t)),!0))},e}(G);function $(){var t=this.getMap(),e=t.getView(),i=t.getSize(),n=this.getGeometry().getExtent();if(this.out_){var r=e.calculateExtent(i),o=Object(B.n)([t.getPixelFromCoordinate(Object(B.v)(n)),t.getPixelFromCoordinate(Object(B.D)(n))]),s=e.getResolutionForExtent(o,i);Object(B.J)(r,1/s),n=r}var a=e.constrainResolution(e.getResolutionForExtent(n,i)),l=Object(B.x)(n);l=e.constrainCenter(l),e.animate({resolution:a,center:l,duration:this.duration_,easing:h.b})}var tt=function(t){function e(e){var i=e||{},n=i.condition?i.condition:M;t.call(this,{condition:n,className:i.className||"ol-dragzoom",onBoxEnd:$}),this.duration_=void 0!==i.duration?i.duration:200,this.out_=void 0!==i.out&&i.out}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(Q),et=i(2),it={LEFT:37,UP:38,RIGHT:39,DOWN:40};function nt(t){var e=!1;if(t.type==et.a.KEYDOWN){var i=t.originalEvent.keyCode;if(this.condition_(t)&&(i==it.DOWN||i==it.LEFT||i==it.RIGHT||i==it.UP)){var n=t.map.getView(),r=n.getResolution()*this.pixelDelta_,o=0,s=0;i==it.DOWN?s=-r:i==it.LEFT?o=-r:i==it.RIGHT?o=r:s=r;var a=[o,s];Object(b.f)(a,n.getRotation()),function(t,e,i){var n=t.getCenter();if(n){var r=t.constrainCenter([n[0]+e[0],n[1]+e[1]]);i?t.animate({duration:i,easing:h.d,center:r}):t.setCenter(r)}}(n,a,this.duration_),t.preventDefault(),e=!0}}return!e}var rt=function(t){function e(e){t.call(this,{handleEvent:nt});var i=e||{};this.defaultCondition_=function(t){return F(t)&&P(t)},this.condition_=void 0!==i.condition?i.condition:this.defaultCondition_,this.duration_=void 0!==i.duration?i.duration:100,this.pixelDelta_=void 0!==i.pixelDelta?i.pixelDelta:128}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(g);function ot(t){var e=!1;if(t.type==et.a.KEYDOWN||t.type==et.a.KEYPRESS){var i=t.originalEvent.charCode;if(this.condition_(t)&&(i=="+".charCodeAt(0)||i=="-".charCodeAt(0))){var n=t.map,r=i=="+".charCodeAt(0)?this.delta_:-this.delta_;f(n.getView(),r,void 0,this.duration_),t.preventDefault(),e=!0}}return!e}var st=function(t){function e(e){t.call(this,{handleEvent:ot});var i=e||{};this.condition_=i.condition?i.condition:P,this.delta_=i.delta?i.delta:1,this.duration_=void 0!==i.duration?i.duration:100}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(g),at="trackpad",ht="wheel",lt=function(t){function e(e){var i=e||{};t.call(this,i),this.delta_=0,this.duration_=void 0!==i.duration?i.duration:250,this.timeout_=void 0!==i.timeout?i.timeout:80,this.useAnchor_=void 0===i.useAnchor||i.useAnchor,this.constrainResolution_=i.constrainResolution||!1,this.condition_=i.condition?i.condition:S,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_,this.mode_=void 0,this.trackpadEventGap_=400,this.trackpadTimeoutId_,this.trackpadDeltaPerZoom_=300,this.trackpadZoomBuffer_=1.5}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.decrementInteractingHint_=function(){this.trackpadTimeoutId_=void 0,this.getMap().getView().setHint(m.a.INTERACTING,-1)},e.prototype.handleEvent=function(t){if(!this.condition_(t))return!0;var e=t.type;if(e!==et.a.WHEEL&&e!==et.a.MOUSEWHEEL)return!0;t.preventDefault();var i,n=t.map,r=t.originalEvent;if(this.useAnchor_&&(this.lastAnchor_=t.coordinate),t.type==et.a.WHEEL?(i=r.deltaY,x.c&&r.deltaMode===WheelEvent.DOM_DELTA_PIXEL&&(i/=x.b),r.deltaMode===WheelEvent.DOM_DELTA_LINE&&(i*=40)):t.type==et.a.MOUSEWHEEL&&(i=-r.wheelDeltaY,x.h&&(i/=3)),0===i)return!1;var o=Date.now();if(void 0===this.startTime_&&(this.startTime_=o),(!this.mode_||o-this.startTime_>this.trackpadEventGap_)&&(this.mode_=Math.abs(i)<4?at:ht),this.mode_===at){var s=n.getView();this.trackpadTimeoutId_?clearTimeout(this.trackpadTimeoutId_):s.setHint(m.a.INTERACTING,1),this.trackpadTimeoutId_=setTimeout(this.decrementInteractingHint_.bind(this),this.trackpadEventGap_);var a=s.getResolution()*Math.pow(2,i/this.trackpadDeltaPerZoom_),l=s.getMinResolution(),c=s.getMaxResolution(),u=0;if(a<l?(a=Math.max(a,l/this.trackpadZoomBuffer_),u=1):a>c&&(a=Math.min(a,c*this.trackpadZoomBuffer_),u=-1),this.lastAnchor_){var p=s.calculateCenterZoom(a,this.lastAnchor_);s.setCenter(s.constrainCenter(p))}return s.setResolution(a),0===u&&this.constrainResolution_&&s.animate({resolution:s.constrainResolution(a,i>0?-1:1),easing:h.b,anchor:this.lastAnchor_,duration:this.duration_}),u>0?s.animate({resolution:l,easing:h.b,anchor:this.lastAnchor_,duration:500}):u<0&&s.animate({resolution:c,easing:h.b,anchor:this.lastAnchor_,duration:500}),this.startTime_=o,!1}this.delta_+=i;var d=Math.max(this.timeout_-(o-this.startTime_),0);return clearTimeout(this.timeoutId_),this.timeoutId_=setTimeout(this.handleWheelZoom_.bind(this,n),d),!1},e.prototype.handleWheelZoom_=function(t){var e=t.getView();e.getAnimating()&&e.cancelAnimations();f(e,-Object(c.a)(this.delta_,-1,1),this.lastAnchor_,this.duration_),this.mode_=void 0,this.delta_=0,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_=void 0},e.prototype.setMouseAnchor=function(t){this.useAnchor_=t,t||(this.lastAnchor_=null)},e}(g),ct=function(t){function e(e){var i=e||{},n=i;n.stopDown||(n.stopDown=O.a),t.call(this,n),this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.threshold_=void 0!==i.threshold?i.threshold:.3,this.duration_=void 0!==i.duration?i.duration:250}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleDragEvent=function(t){var e=0,i=this.targetPointers[0],n=this.targetPointers[1],r=Math.atan2(n.clientY-i.clientY,n.clientX-i.clientX);if(void 0!==this.lastAngle_){var o=r-this.lastAngle_;this.rotationDelta_+=o,!this.rotating_&&Math.abs(this.rotationDelta_)>this.threshold_&&(this.rotating_=!0),e=o}this.lastAngle_=r;var s=t.map,a=s.getView();if(a.getConstraints().rotation!==X.c){var h=s.getViewport().getBoundingClientRect(),l=k(this.targetPointers);if(l[0]-=h.left,l[1]-=h.top,this.anchor_=s.getCoordinateFromPixel(l),this.rotating_){var c=a.getRotation();s.render(),p(a,c+e,this.anchor_)}}},e.prototype.handleUpEvent=function(t){if(this.targetPointers.length<2){var e=t.map.getView();if(e.setHint(m.a.INTERACTING,-1),this.rotating_){var i=e.getRotation();u(e,i,this.anchor_,this.duration_)}return!1}return!0},e.prototype.handleDownEvent=function(t){if(this.targetPointers.length>=2){var e=t.map;return this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.handlingDownUpSequence||e.getView().setHint(m.a.INTERACTING,1),!0}return!1},e}(G),ut=function(t){function e(e){var i=e||{},n=i;n.stopDown||(n.stopDown=O.a),t.call(this,n),this.constrainResolution_=i.constrainResolution||!1,this.anchor_=null,this.duration_=void 0!==i.duration?i.duration:400,this.lastDistance_=void 0,this.lastScaleDelta_=1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleDragEvent=function(t){var e=1,i=this.targetPointers[0],n=this.targetPointers[1],r=i.clientX-n.clientX,o=i.clientY-n.clientY,s=Math.sqrt(r*r+o*o);void 0!==this.lastDistance_&&(e=this.lastDistance_/s),this.lastDistance_=s;var a=t.map,h=a.getView(),l=h.getResolution(),c=h.getMaxResolution(),u=h.getMinResolution(),p=l*e;p>c?(e=c/l,p=c):p<u&&(e=u/l,p=u),1!=e&&(this.lastScaleDelta_=e);var d=a.getViewport().getBoundingClientRect(),f=k(this.targetPointers);f[0]-=d.left,f[1]-=d.top,this.anchor_=a.getCoordinateFromPixel(f),a.render(),_(h,p,this.anchor_)},e.prototype.handleUpEvent=function(t){if(this.targetPointers.length<2){var e=t.map.getView();e.setHint(m.a.INTERACTING,-1);var i=e.getResolution();if(this.constrainResolution_||i<e.getMinResolution()||i>e.getMaxResolution()){var n=this.lastScaleDelta_-1;d(e,i,this.anchor_,this.duration_,n)}return!1}return!0},e.prototype.handleDownEvent=function(t){if(this.targetPointers.length>=2){var e=t.map;return this.anchor_=null,this.lastDistance_=void 0,this.lastScaleDelta_=1,this.handlingDownUpSequence||e.getView().setHint(m.a.INTERACTING,1),!0}return!1},e}(G),pt=i(4),dt=i(15),ft="addfeatures",_t=function(t){function e(e,i,n,r){t.call(this,e),this.features=n,this.file=i,this.projection=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(V.a);function gt(t){for(var e=t.dataTransfer.files,i=0,n=e.length;i<n;++i){var r=e.item(i),o=new FileReader;o.addEventListener(et.a.LOAD,this.handleResult_.bind(this,r)),o.readAsText(r)}}function yt(t){t.stopPropagation(),t.preventDefault(),t.dataTransfer.dropEffect="copy"}var vt=function(t){function e(e){var i=e||{};t.call(this,{handleEvent:O.b}),this.formatConstructors_=i.formatConstructors?i.formatConstructors:[],this.projection_=i.projection?Object(dt.d)(i.projection):null,this.dropListenKeys_=null,this.source_=i.source||null,this.target=i.target?i.target:null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleResult_=function(t,e){var i=e.target.result,n=this.getMap(),r=this.projection_;r||(r=n.getView().getProjection());for(var o=this.formatConstructors_,s=[],a=0,h=o.length;a<h;++a){var l=new o[a];if((s=this.tryReadFeatures_(l,i,{featureProjection:r}))&&s.length>0)break}this.source_&&(this.source_.clear(),this.source_.addFeatures(s)),this.dispatchEvent(new _t(ft,t,s,r))},e.prototype.registerListeners_=function(){var t=this.getMap();if(t){var e=this.target?this.target:t.getViewport();this.dropListenKeys_=[Object(pt.a)(e,et.a.DROP,gt,this),Object(pt.a)(e,et.a.DRAGENTER,yt,this),Object(pt.a)(e,et.a.DRAGOVER,yt,this),Object(pt.a)(e,et.a.DROP,yt,this)]}},e.prototype.setActive=function(e){t.prototype.setActive.call(this,e),e?this.registerListeners_():this.unregisterListeners_()},e.prototype.setMap=function(e){this.unregisterListeners_(),t.prototype.setMap.call(this,e),this.getActive()&&this.registerListeners_()},e.prototype.tryReadFeatures_=function(t,e,i){try{return t.readFeatures(e,i)}catch(t){return null}},e.prototype.unregisterListeners_=function(){this.dropListenKeys_&&(this.dropListenKeys_.forEach(pt.e),this.dropListenKeys_=null)},e}(g),mt=function(t){function e(e){var i=e||{};t.call(this,i),this.condition_=i.condition?i.condition:M,this.lastAngle_=void 0,this.lastMagnitude_=void 0,this.lastScaleDelta_=0,this.duration_=void 0!==i.duration?i.duration:400}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleDragEvent=function(t){if(A(t)){var e=t.map,i=e.getSize(),n=t.pixel,r=n[0]-i[0]/2,o=i[1]/2-n[1],s=Math.atan2(o,r),a=Math.sqrt(r*r+o*o),h=e.getView();if(h.getConstraints().rotation!==X.c&&void 0!==this.lastAngle_){var l=s-this.lastAngle_;p(h,h.getRotation()-l)}if(this.lastAngle_=s,void 0!==this.lastMagnitude_){var c=this.lastMagnitude_*(h.getResolution()/a);_(h,c)}void 0!==this.lastMagnitude_&&(this.lastScaleDelta_=this.lastMagnitude_/a),this.lastMagnitude_=a}},e.prototype.handleUpEvent=function(t){if(!A(t))return!0;var e=t.map.getView();e.setHint(m.a.INTERACTING,-1);var i=this.lastScaleDelta_-1;return u(e,e.getRotation()),d(e,e.getResolution(),void 0,this.duration_,i),this.lastScaleDelta_=0,!1},e.prototype.handleDownEvent=function(t){return!!A(t)&&(!!this.condition_(t)&&(t.map.getView().setHint(m.a.INTERACTING,1),this.lastAngle_=void 0,this.lastMagnitude_=void 0,!0))},e}(G),bt=i(48),Et=i(87),Ot=i(10),xt=i(20),Ct=i(23),Tt=function(t){function e(e,i,n){if(t.call(this),void 0!==n&&void 0===i)this.setFlatCoordinates(n,e);else{var r=i||0;this.setCenterAndRadius(e,r,n)}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),void 0,this.layout)},e.prototype.closestPointXY=function(t,e,i,n){var r=this.flatCoordinates,o=t-r[0],s=e-r[1],a=o*o+s*s;if(a<n){if(0===a)for(var h=0;h<this.stride;++h)i[h]=r[h];else{var l=this.getRadius()/Math.sqrt(a);i[0]=r[0]+l*o,i[1]=r[1]+l*s;for(var c=2;c<this.stride;++c)i[c]=r[c]}return i.length=this.stride,a}return n},e.prototype.containsXY=function(t,e){var i=this.flatCoordinates,n=t-i[0],r=e-i[1];return n*n+r*r<=this.getRadiusSquared_()},e.prototype.getCenter=function(){return this.flatCoordinates.slice(0,this.stride)},e.prototype.computeExtent=function(t){var e=this.flatCoordinates,i=e[this.stride]-e[0];return Object(B.k)(e[0]-i,e[1]-i,e[0]+i,e[1]+i,t)},e.prototype.getRadius=function(){return Math.sqrt(this.getRadiusSquared_())},e.prototype.getRadiusSquared_=function(){var t=this.flatCoordinates[this.stride]-this.flatCoordinates[0],e=this.flatCoordinates[this.stride+1]-this.flatCoordinates[1];return t*t+e*e},e.prototype.getType=function(){return Ot.a.CIRCLE},e.prototype.intersectsExtent=function(t){var e=this.getExtent();if(Object(B.F)(t,e)){var i=this.getCenter();return t[0]<=i[0]&&t[2]>=i[0]||(t[1]<=i[1]&&t[3]>=i[1]||Object(B.t)(t,this.intersectsCoordinate,this))}return!1},e.prototype.setCenter=function(t){var e=this.stride,i=this.flatCoordinates[e]-this.flatCoordinates[0],n=t.slice();n[e]=n[0]+i;for(var r=1;r<e;++r)n[e+r]=t[r];this.setFlatCoordinates(this.layout,n),this.changed()},e.prototype.setCenterAndRadius=function(t,e,i){this.setLayout(i,t,0),this.flatCoordinates||(this.flatCoordinates=[]);var n=this.flatCoordinates,r=Object(Ct.a)(n,0,t,this.stride);n[r++]=n[0]+e;for(var o=1,s=this.stride;o<s;++o)n[r++]=n[o];n.length=r,this.changed()},e.prototype.getCoordinates=function(){return null},e.prototype.setCoordinates=function(t,e){},e.prototype.setRadius=function(t){this.flatCoordinates[this.stride]=this.flatCoordinates[0]+t,this.changed()},e}(xt.a);Tt.prototype.transform;var Rt=Tt,St=i(7),It=i(37),jt=i(33),wt=i(22);function Lt(t,e,i,n,r,o){var s=NaN,a=NaN,h=(i-e)/n;if(1===h)s=t[e],a=t[e+1];else if(2==h)s=(1-r)*t[e]+r*t[e+n],a=(1-r)*t[e+1]+r*t[e+n+1];else if(0!==h){for(var l=t[e],u=t[e+1],p=0,d=[0],f=e+n;f<i;f+=n){var _=t[f],g=t[f+1];p+=Math.sqrt((_-l)*(_-l)+(g-u)*(g-u)),d.push(p),l=_,u=g}var y=r*p,v=Object(St.a)(d,y);if(v<0){var m=(y-d[-v-2])/(d[-v-1]-d[-v-2]),b=e+(-v-2)*n;s=Object(c.c)(t[b],t[b+n],m),a=Object(c.c)(t[b+1],t[b+n+1],m)}else s=t[e+v*n],a=t[e+v*n+1]}return o?(o[0]=s,o[1]=a,o):[s,a]}function Ft(t,e,i,n,r,o){if(i==e)return null;var s;if(r<t[e+n-1])return o?((s=t.slice(e,e+n))[n-1]=r,s):null;if(t[i-1]<r)return o?((s=t.slice(i-n,i))[n-1]=r,s):null;if(r==t[e+n-1])return t.slice(e,e+n);for(var a=e/n,h=i/n;a<h;){var l=a+h>>1;r<t[(l+1)*n-1]?h=l:a=l+1}var u=t[a*n-1];if(r==u)return t.slice((a-1)*n,(a-1)*n+n);var p=(r-u)/(t[(a+1)*n-1]-u);s=[];for(var d=0;d<n-1;++d)s.push(Object(c.c)(t[(a-1)*n+d],t[a*n+d],p));return s.push(r),s}var Mt=i(43),Pt=i(84),At=i(60),Dt=i(27),Nt=function(t){function e(e,i){t.call(this),this.flatMidpoint_=null,this.flatMidpointRevision_=-1,this.maxDelta_=-1,this.maxDeltaRevision_=-1,void 0===i||Array.isArray(e[0])?this.setCoordinates(e,i):this.setFlatCoordinates(i,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.appendCoordinate=function(t){this.flatCoordinates?Object(St.c)(this.flatCoordinates,t):this.flatCoordinates=t.slice(),this.changed()},e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout)},e.prototype.closestPointXY=function(t,e,i,n){return n<Object(B.e)(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(Object(jt.e)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),Object(jt.d)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!1,t,e,i,n))},e.prototype.forEachSegment=function(t){return Object(At.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t)},e.prototype.getCoordinateAtM=function(t,e){if(this.layout!=It.a.XYM&&this.layout!=It.a.XYZM)return null;var i=void 0!==e&&e;return Ft(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,i)},e.prototype.getCoordinates=function(){return Object(wt.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getCoordinateAt=function(t,e){return Lt(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,e)},e.prototype.getLength=function(){return Object(Pt.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getFlatMidpoint=function(){return this.flatMidpointRevision_!=this.getRevision()&&(this.flatMidpoint_=this.getCoordinateAt(.5,this.flatMidpoint_),this.flatMidpointRevision_=this.getRevision()),this.flatMidpoint_},e.prototype.getSimplifiedGeometryInternal=function(t){var i=[];return i.length=Object(Dt.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,i,0),new e(i,It.a.XY)},e.prototype.getType=function(){return Ot.a.LINE_STRING},e.prototype.intersectsExtent=function(t){return Object(Mt.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t)},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=Object(Ct.b)(this.flatCoordinates,0,t,this.stride),this.changed()},e}(xt.a),kt=function(t){function e(e,i,n){if(t.call(this),this.ends_=[],this.maxDelta_=-1,this.maxDeltaRevision_=-1,Array.isArray(e[0]))this.setCoordinates(e,i);else if(void 0!==i&&n)this.setFlatCoordinates(i,e),this.ends_=n;else{for(var r=this.getLayout(),o=e,s=[],a=[],h=0,l=o.length;h<l;++h){var c=o[h];0===h&&(r=c.getLayout()),Object(St.c)(s,c.getFlatCoordinates()),a.push(s.length)}this.setFlatCoordinates(r,s),this.ends_=a}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.appendLineString=function(t){this.flatCoordinates?Object(St.c)(this.flatCoordinates,t.getFlatCoordinates().slice()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.ends_.push(this.flatCoordinates.length),this.changed()},e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout,this.ends_.slice())},e.prototype.closestPointXY=function(t,e,i,n){return n<Object(B.e)(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(Object(jt.a)(this.flatCoordinates,0,this.ends_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),Object(jt.b)(this.flatCoordinates,0,this.ends_,this.stride,this.maxDelta_,!1,t,e,i,n))},e.prototype.getCoordinateAtM=function(t,e,i){if(this.layout!=It.a.XYM&&this.layout!=It.a.XYZM||0===this.flatCoordinates.length)return null;var n=void 0!==e&&e,r=void 0!==i&&i;return function(t,e,i,n,r,o,s){if(s)return Ft(t,e,i[i.length-1],n,r,o);var a;if(r<t[n-1])return o?((a=t.slice(0,n))[n-1]=r,a):null;if(t[t.length-1]<r)return o?((a=t.slice(t.length-n))[n-1]=r,a):null;for(var h=0,l=i.length;h<l;++h){var c=i[h];if(e!=c){if(r<t[e+n-1])return null;if(r<=t[c-1])return Ft(t,e,c,n,r,!1);e=c}}return null}(this.flatCoordinates,0,this.ends_,this.stride,t,n,r)},e.prototype.getCoordinates=function(){return Object(wt.b)(this.flatCoordinates,0,this.ends_,this.stride)},e.prototype.getEnds=function(){return this.ends_},e.prototype.getLineString=function(t){return t<0||this.ends_.length<=t?null:new Nt(this.flatCoordinates.slice(0===t?0:this.ends_[t-1],this.ends_[t]),this.layout)},e.prototype.getLineStrings=function(){for(var t=this.flatCoordinates,e=this.ends_,i=this.layout,n=[],r=0,o=0,s=e.length;o<s;++o){var a=e[o],h=new Nt(t.slice(r,a),i);n.push(h),r=a}return n},e.prototype.getFlatMidpoints=function(){for(var t=[],e=this.flatCoordinates,i=0,n=this.ends_,r=this.stride,o=0,s=n.length;o<s;++o){var a=n[o],h=Lt(e,i,a,r,.5);Object(St.c)(t,h),i=a}return t},e.prototype.getSimplifiedGeometryInternal=function(t){var i=[],n=[];return i.length=Object(Dt.b)(this.flatCoordinates,0,this.ends_,this.stride,t,i,0,n),new e(i,It.a.XY,n)},e.prototype.getType=function(){return Ot.a.MULTI_LINE_STRING},e.prototype.intersectsExtent=function(t){return Object(Mt.b)(this.flatCoordinates,0,this.ends_,this.stride,t)},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,2),this.flatCoordinates||(this.flatCoordinates=[]);var i=Object(Ct.c)(this.flatCoordinates,0,t,this.stride,this.ends_);this.flatCoordinates.length=0===i.length?0:i[i.length-1],this.changed()},e}(xt.a),Gt=i(42),Yt=function(t){function e(e,i){t.call(this),i&&!Array.isArray(e[0])?this.setFlatCoordinates(i,e):this.setCoordinates(e,i)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.appendPoint=function(t){this.flatCoordinates?Object(St.c)(this.flatCoordinates,t.getFlatCoordinates()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.changed()},e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout)},e.prototype.closestPointXY=function(t,e,i,n){if(n<Object(B.e)(this.getExtent(),t,e))return n;for(var r=this.flatCoordinates,o=this.stride,s=0,a=r.length;s<a;s+=o){var h=Object(c.f)(t,e,r[s],r[s+1]);if(h<n){n=h;for(var l=0;l<o;++l)i[l]=r[s+l];i.length=o}}return n},e.prototype.getCoordinates=function(){return Object(wt.a)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getPoint=function(t){var e=this.flatCoordinates?this.flatCoordinates.length/this.stride:0;return t<0||e<=t?null:new Gt.default(this.flatCoordinates.slice(t*this.stride,(t+1)*this.stride),this.layout)},e.prototype.getPoints=function(){for(var t=this.flatCoordinates,e=this.layout,i=this.stride,n=[],r=0,o=t.length;r<o;r+=i){var s=new Gt.default(t.slice(r,r+i),e);n.push(s)}return n},e.prototype.getType=function(){return Ot.a.MULTI_POINT},e.prototype.intersectsExtent=function(t){for(var e=this.flatCoordinates,i=this.stride,n=0,r=e.length;n<r;n+=i){var o=e[n],s=e[n+1];if(Object(B.h)(t,o,s))return!0}return!1},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=Object(Ct.b)(this.flatCoordinates,0,t,this.stride),this.changed()},e}(xt.a),Xt=i(46);var Kt=i(36),Bt=i(59),Vt=i(66),Ut=function(t){function e(e,i,n){if(t.call(this),this.endss_=[],this.flatInteriorPointsRevision_=-1,this.flatInteriorPoints_=null,this.maxDelta_=-1,this.maxDeltaRevision_=-1,this.orientedRevision_=-1,this.orientedFlatCoordinates_=null,!n&&!Array.isArray(e[0])){for(var r=this.getLayout(),o=e,s=[],a=[],h=0,l=o.length;h<l;++h){var c=o[h];0===h&&(r=c.getLayout());for(var u=s.length,p=c.getEnds(),d=0,f=p.length;d<f;++d)p[d]+=u;Object(St.c)(s,c.getFlatCoordinates()),a.push(p)}i=r,e=s,n=a}void 0!==i&&n?(this.setFlatCoordinates(i,e),this.endss_=n):this.setCoordinates(e,i)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.appendPolygon=function(t){var e;if(this.flatCoordinates){var i=this.flatCoordinates.length;Object(St.c)(this.flatCoordinates,t.getFlatCoordinates());for(var n=0,r=(e=t.getEnds().slice()).length;n<r;++n)e[n]+=i}else this.flatCoordinates=t.getFlatCoordinates().slice(),e=t.getEnds().slice(),this.endss_.push();this.endss_.push(e),this.changed()},e.prototype.clone=function(){for(var t=this.endss_.length,i=new Array(t),n=0;n<t;++n)i[n]=this.endss_[n].slice();return new e(this.flatCoordinates.slice(),this.layout,i)},e.prototype.closestPointXY=function(t,e,i,n){return n<Object(B.e)(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(Object(jt.f)(this.flatCoordinates,0,this.endss_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),Object(jt.c)(this.getOrientedFlatCoordinates(),0,this.endss_,this.stride,this.maxDelta_,!0,t,e,i,n))},e.prototype.containsXY=function(t,e){return Object(Kt.d)(this.getOrientedFlatCoordinates(),0,this.endss_,this.stride,t,e)},e.prototype.getArea=function(){return Object(Xt.c)(this.getOrientedFlatCoordinates(),0,this.endss_,this.stride)},e.prototype.getCoordinates=function(t){var e;return void 0!==t?(e=this.getOrientedFlatCoordinates().slice(),Object(Vt.d)(e,0,this.endss_,this.stride,t)):e=this.flatCoordinates,Object(wt.c)(e,0,this.endss_,this.stride)},e.prototype.getEndss=function(){return this.endss_},e.prototype.getFlatInteriorPoints=function(){if(this.flatInteriorPointsRevision_!=this.getRevision()){var t=function(t,e,i,n){for(var r=[],o=Object(B.j)(),s=0,a=i.length;s<a;++s){var h=i[s];o=Object(B.o)(t,e,h[0],n),r.push((o[0]+o[2])/2,(o[1]+o[3])/2),e=h[h.length-1]}return r}(this.flatCoordinates,0,this.endss_,this.stride);this.flatInteriorPoints_=Object(Bt.b)(this.getOrientedFlatCoordinates(),0,this.endss_,this.stride,t),this.flatInteriorPointsRevision_=this.getRevision()}return this.flatInteriorPoints_},e.prototype.getInteriorPoints=function(){return new Yt(this.getFlatInteriorPoints().slice(),It.a.XYM)},e.prototype.getOrientedFlatCoordinates=function(){if(this.orientedRevision_!=this.getRevision()){var t=this.flatCoordinates;Object(Vt.b)(t,0,this.endss_,this.stride)?this.orientedFlatCoordinates_=t:(this.orientedFlatCoordinates_=t.slice(),this.orientedFlatCoordinates_.length=Object(Vt.d)(this.orientedFlatCoordinates_,0,this.endss_,this.stride)),this.orientedRevision_=this.getRevision()}return this.orientedFlatCoordinates_},e.prototype.getSimplifiedGeometryInternal=function(t){var i=[],n=[];return i.length=Object(Dt.d)(this.flatCoordinates,0,this.endss_,this.stride,Math.sqrt(t),i,0,n),new e(i,It.a.XY,n)},e.prototype.getPolygon=function(t){if(t<0||this.endss_.length<=t)return null;var e;if(0===t)e=0;else{var i=this.endss_[t-1];e=i[i.length-1]}var n=this.endss_[t].slice(),r=n[n.length-1];if(0!==e)for(var o=0,s=n.length;o<s;++o)n[o]-=e;return new W.b(this.flatCoordinates.slice(e,r),this.layout,n)},e.prototype.getPolygons=function(){for(var t=this.layout,e=this.flatCoordinates,i=this.endss_,n=[],r=0,o=0,s=i.length;o<s;++o){var a=i[o].slice(),h=a[a.length-1];if(0!==r)for(var l=0,c=a.length;l<c;++l)a[l]-=r;var u=new W.b(e.slice(r,h),t,a);n.push(u),r=h}return n},e.prototype.getType=function(){return Ot.a.MULTI_POLYGON},e.prototype.intersectsExtent=function(t){return Object(Mt.d)(this.getOrientedFlatCoordinates(),0,this.endss_,this.stride,t)},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,3),this.flatCoordinates||(this.flatCoordinates=[]);var i=Object(Ct.d)(this.flatCoordinates,0,t,this.stride,this.endss_);if(0===i.length)this.flatCoordinates.length=0;else{var n=i[i.length-1];this.flatCoordinates.length=0===n.length?0:n[n.length-1]}this.changed()},e}(xt.a),Wt=i(76),Ht=i(34),zt=i(39),Zt=i(35),qt={POINT:"Point",LINE_STRING:"LineString",POLYGON:"Polygon",CIRCLE:"Circle"},Jt="drawstart",Qt="drawend",$t=function(t){function e(e,i){t.call(this,e),this.feature=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(V.a);var te=function(t){function e(e){var i=e;i.stopDown||(i.stopDown=O.a),t.call(this,i),this.shouldHandle_=!1,this.downPx_=null,this.downTimeout_,this.lastDragTime_,this.freehand_=!1,this.source_=e.source?e.source:null,this.features_=e.features?e.features:null,this.snapTolerance_=e.snapTolerance?e.snapTolerance:12,this.type_=e.type,this.mode_=function(t){var e;t===Ot.a.POINT||t===Ot.a.MULTI_POINT?e=qt.POINT:t===Ot.a.LINE_STRING||t===Ot.a.MULTI_LINE_STRING?e=qt.LINE_STRING:t===Ot.a.POLYGON||t===Ot.a.MULTI_POLYGON?e=qt.POLYGON:t===Ot.a.CIRCLE&&(e=qt.CIRCLE);return e}(this.type_),this.stopClick_=!!e.stopClick,this.minPoints_=e.minPoints?e.minPoints:this.mode_===qt.POLYGON?3:2,this.maxPoints_=e.maxPoints?e.maxPoints:1/0,this.finishCondition_=e.finishCondition?e.finishCondition:O.b;var n,r=e.geometryFunction;if(!r)if(this.type_===Ot.a.CIRCLE)r=function(t,e){var i=e||new Rt([NaN,NaN]),n=Object(b.h)(t[0],t[1]);return i.setCenterAndRadius(t[0],Math.sqrt(n)),i};else{var o,s=this.mode_;s===qt.POINT?o=Gt.default:s===qt.LINE_STRING?o=Nt:s===qt.POLYGON&&(o=W.b),r=function(t,e){var i=e;return i?s===qt.POLYGON?t[0].length?i.setCoordinates([t[0].concat([t[0][0]])]):i.setCoordinates([]):i.setCoordinates(t):i=new o(t),i}}this.geometryFunction_=r,this.dragVertexDelay_=void 0!==e.dragVertexDelay?e.dragVertexDelay:500,this.finishCoordinate_=null,this.sketchFeature_=null,this.sketchPoint_=null,this.sketchCoords_=null,this.sketchLine_=null,this.sketchLineCoords_=null,this.squaredClickTolerance_=e.clickTolerance?e.clickTolerance*e.clickTolerance:36,this.overlay_=new Ht.a({source:new zt.a({useSpatialIndex:!1,wrapX:!!e.wrapX&&e.wrapX}),style:e.style?e.style:(n=Object(Zt.b)(),function(t,e){return n[t.getGeometry().getType()]}),updateWhileInteracting:!0}),this.geometryName_=e.geometryName,this.condition_=e.condition?e.condition:F,this.freehandCondition_,e.freehand?this.freehandCondition_=S:this.freehandCondition_=e.freehandCondition?e.freehandCondition:M,Object(pt.a)(this,Object(a.b)(l.ACTIVE),this.updateState_,this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setMap=function(e){t.prototype.setMap.call(this,e),this.updateState_()},e.prototype.getOverlay=function(){return this.overlay_},e.prototype.handleEvent=function(e){e.originalEvent.type===et.a.CONTEXTMENU&&e.preventDefault(),this.freehand_=this.mode_!==qt.POINT&&this.freehandCondition_(e);var i=e.type===s.a.POINTERMOVE,n=!0;!this.freehand_&&this.lastDragTime_&&e.type===s.a.POINTERDRAG&&(Date.now()-this.lastDragTime_>=this.dragVertexDelay_?(this.downPx_=e.pixel,this.shouldHandle_=!this.freehand_,i=!0):this.lastDragTime_=void 0,this.shouldHandle_&&void 0!==this.downTimeout_&&(clearTimeout(this.downTimeout_),this.downTimeout_=void 0));return this.freehand_&&e.type===s.a.POINTERDRAG&&null!==this.sketchFeature_?(this.addToDrawing_(e),n=!1):this.freehand_&&e.type===s.a.POINTERDOWN?n=!1:i?(n=e.type===s.a.POINTERMOVE)&&this.freehand_?n=this.handlePointerMove_(e):(e.pointerEvent.pointerType==Wt.b||e.type===s.a.POINTERDRAG&&void 0===this.downTimeout_)&&this.handlePointerMove_(e):e.type===s.a.DBLCLICK&&(n=!1),t.prototype.handleEvent.call(this,e)&&n},e.prototype.handleDownEvent=function(t){return this.shouldHandle_=!this.freehand_,this.freehand_?(this.downPx_=t.pixel,this.finishCoordinate_||this.startDrawing_(t),!0):!!this.condition_(t)&&(this.lastDragTime_=Date.now(),this.downTimeout_=setTimeout(function(){this.handlePointerMove_(new Et.a(s.a.POINTERMOVE,t.map,t.pointerEvent,!1,t.frameState))}.bind(this),this.dragVertexDelay_),this.downPx_=t.pixel,!0)},e.prototype.handleUpEvent=function(t){var e=!0;this.downTimeout_&&(clearTimeout(this.downTimeout_),this.downTimeout_=void 0),this.handlePointerMove_(t);var i=this.mode_===qt.CIRCLE;return this.shouldHandle_?(this.finishCoordinate_?this.freehand_||i?this.finishDrawing():this.atFinish_(t)?this.finishCondition_(t)&&this.finishDrawing():this.addToDrawing_(t):(this.startDrawing_(t),this.mode_===qt.POINT&&this.finishDrawing()),e=!1):this.freehand_&&(this.finishCoordinate_=null,this.abortDrawing_()),!e&&this.stopClick_&&t.stopPropagation(),e},e.prototype.handlePointerMove_=function(t){if(this.downPx_&&(!this.freehand_&&this.shouldHandle_||this.freehand_&&!this.shouldHandle_)){var e=this.downPx_,i=t.pixel,n=e[0]-i[0],r=e[1]-i[1],o=n*n+r*r;if(this.shouldHandle_=this.freehand_?o>this.squaredClickTolerance_:o<=this.squaredClickTolerance_,!this.shouldHandle_)return!0}return this.finishCoordinate_?this.modifyDrawing_(t):this.createOrUpdateSketchPoint_(t),!0},e.prototype.atFinish_=function(t){var e=!1;if(this.sketchFeature_){var i=!1,n=[this.finishCoordinate_];if(this.mode_===qt.LINE_STRING)i=this.sketchCoords_.length>this.minPoints_;else if(this.mode_===qt.POLYGON){var r=this.sketchCoords_;i=r[0].length>this.minPoints_,n=[r[0][0],r[0][r[0].length-2]]}if(i)for(var o=t.map,s=0,a=n.length;s<a;s++){var h=n[s],l=o.getPixelFromCoordinate(h),c=t.pixel,u=c[0]-l[0],p=c[1]-l[1],d=this.freehand_?1:this.snapTolerance_;if(e=Math.sqrt(u*u+p*p)<=d){this.finishCoordinate_=h;break}}}return e},e.prototype.createOrUpdateSketchPoint_=function(t){var e=t.coordinate.slice();this.sketchPoint_?this.sketchPoint_.getGeometry().setCoordinates(e):(this.sketchPoint_=new bt.default(new Gt.default(e)),this.updateSketchFeatures_())},e.prototype.startDrawing_=function(t){var e=t.coordinate;this.finishCoordinate_=e,this.mode_===qt.POINT?this.sketchCoords_=e.slice():this.mode_===qt.POLYGON?(this.sketchCoords_=[[e.slice(),e.slice()]],this.sketchLineCoords_=this.sketchCoords_[0]):this.sketchCoords_=[e.slice(),e.slice()],this.sketchLineCoords_&&(this.sketchLine_=new bt.default(new Nt(this.sketchLineCoords_)));var i=this.geometryFunction_(this.sketchCoords_);this.sketchFeature_=new bt.default,this.geometryName_&&this.sketchFeature_.setGeometryName(this.geometryName_),this.sketchFeature_.setGeometry(i),this.updateSketchFeatures_(),this.dispatchEvent(new $t(Jt,this.sketchFeature_))},e.prototype.modifyDrawing_=function(t){var e,i,n,r=t.coordinate,o=this.sketchFeature_.getGeometry();(this.mode_===qt.POINT?i=this.sketchCoords_:this.mode_===qt.POLYGON?(i=(e=this.sketchCoords_[0])[e.length-1],this.atFinish_(t)&&(r=this.finishCoordinate_.slice())):i=(e=this.sketchCoords_)[e.length-1],i[0]=r[0],i[1]=r[1],this.geometryFunction_(this.sketchCoords_,o),this.sketchPoint_)&&this.sketchPoint_.getGeometry().setCoordinates(r);if(o.getType()==Ot.a.POLYGON&&this.mode_!==qt.POLYGON){this.sketchLine_||(this.sketchLine_=new bt.default);var s=o.getLinearRing(0);(n=this.sketchLine_.getGeometry())?(n.setFlatCoordinates(s.getLayout(),s.getFlatCoordinates()),n.changed()):(n=new Nt(s.getFlatCoordinates(),s.getLayout()),this.sketchLine_.setGeometry(n))}else this.sketchLineCoords_&&(n=this.sketchLine_.getGeometry()).setCoordinates(this.sketchLineCoords_);this.updateSketchFeatures_()},e.prototype.addToDrawing_=function(t){var e,i,n=t.coordinate,r=this.sketchFeature_.getGeometry();this.mode_===qt.LINE_STRING?(this.finishCoordinate_=n.slice(),(i=this.sketchCoords_).length>=this.maxPoints_&&(this.freehand_?i.pop():e=!0),i.push(n.slice()),this.geometryFunction_(i,r)):this.mode_===qt.POLYGON&&((i=this.sketchCoords_[0]).length>=this.maxPoints_&&(this.freehand_?i.pop():e=!0),i.push(n.slice()),e&&(this.finishCoordinate_=i[0]),this.geometryFunction_(this.sketchCoords_,r)),this.updateSketchFeatures_(),e&&this.finishDrawing()},e.prototype.removeLastPoint=function(){if(this.sketchFeature_){var t,e=this.sketchFeature_.getGeometry();this.mode_===qt.LINE_STRING?((t=this.sketchCoords_).splice(-2,1),this.geometryFunction_(t,e),t.length>=2&&(this.finishCoordinate_=t[t.length-2].slice())):this.mode_===qt.POLYGON&&((t=this.sketchCoords_[0]).splice(-2,1),this.sketchLine_.getGeometry().setCoordinates(t),this.geometryFunction_(this.sketchCoords_,e)),0===t.length&&(this.finishCoordinate_=null),this.updateSketchFeatures_()}},e.prototype.finishDrawing=function(){var t=this.abortDrawing_();if(t){var e=this.sketchCoords_,i=t.getGeometry();this.mode_===qt.LINE_STRING?(e.pop(),this.geometryFunction_(e,i)):this.mode_===qt.POLYGON&&(e[0].pop(),this.geometryFunction_(e,i),e=i.getCoordinates()),this.type_===Ot.a.MULTI_POINT?t.setGeometry(new Yt([e])):this.type_===Ot.a.MULTI_LINE_STRING?t.setGeometry(new kt([e])):this.type_===Ot.a.MULTI_POLYGON&&t.setGeometry(new Ut([e])),this.dispatchEvent(new $t(Qt,t)),this.features_&&this.features_.push(t),this.source_&&this.source_.addFeature(t)}},e.prototype.abortDrawing_=function(){this.finishCoordinate_=null;var t=this.sketchFeature_;return t&&(this.sketchFeature_=null,this.sketchPoint_=null,this.sketchLine_=null,this.overlay_.getSource().clear(!0)),t},e.prototype.extend=function(t){var e=t.getGeometry();this.sketchFeature_=t,this.sketchCoords_=e.getCoordinates();var i=this.sketchCoords_[this.sketchCoords_.length-1];this.finishCoordinate_=i.slice(),this.sketchCoords_.push(i.slice()),this.updateSketchFeatures_(),this.dispatchEvent(new $t(Jt,this.sketchFeature_))},e.prototype.updateSketchFeatures_=function(){var t=[];this.sketchFeature_&&t.push(this.sketchFeature_),this.sketchLine_&&t.push(this.sketchLine_),this.sketchPoint_&&t.push(this.sketchPoint_);var e=this.overlay_.getSource();e.clear(!0),e.addFeatures(t)},e.prototype.updateState_=function(){var t=this.getMap(),e=this.getActive();t&&e||this.abortDrawing_(),this.overlay_.setMap(e?t:null)},e}(G),ee={EXTENTCHANGED:"extentchanged"},ie=function(t){function e(e){t.call(this,ee.EXTENTCHANGED),this.extent=e}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(V.a);function ne(){var t=Object(Zt.b)();return function(e,i){return t[Ot.a.POINT]}}function re(t){return function(e){return Object(B.b)([t,e])}}function oe(t,e){return t[0]==e[0]?function(i){return Object(B.b)([t,[i[0],e[1]]])}:t[1]==e[1]?function(i){return Object(B.b)([t,[e[0],i[1]]])}:null}var se=function(t){function e(e){var i,n=e||{};t.call(this,n),this.extent_=null,this.pointerHandler_=null,this.pixelTolerance_=void 0!==n.pixelTolerance?n.pixelTolerance:10,this.snappedToVertex_=!1,this.extentFeature_=null,this.vertexFeature_=null,e||(e={}),this.extentOverlay_=new Ht.a({source:new zt.a({useSpatialIndex:!1,wrapX:!!e.wrapX}),style:e.boxStyle?e.boxStyle:(i=Object(Zt.b)(),function(t,e){return i[Ot.a.POLYGON]}),updateWhileAnimating:!0,updateWhileInteracting:!0}),this.vertexOverlay_=new Ht.a({source:new zt.a({useSpatialIndex:!1,wrapX:!!e.wrapX}),style:e.pointerStyle?e.pointerStyle:ne(),updateWhileAnimating:!0,updateWhileInteracting:!0}),e.extent&&this.setExtent(e.extent)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.snapToVertex_=function(t,e){var i=e.getCoordinateFromPixel(t),n=this.getExtent();if(n){var r=function(t){return[[[t[0],t[1]],[t[0],t[3]]],[[t[0],t[3]],[t[2],t[3]]],[[t[2],t[3]],[t[2],t[1]]],[[t[2],t[1]],[t[0],t[1]]]]}(n);r.sort(function(t,e){return Object(b.i)(i,t)-Object(b.i)(i,e)});var o=r[0],s=Object(b.c)(i,o),a=e.getPixelFromCoordinate(s);if(Object(b.d)(t,a)<=this.pixelTolerance_){var h=e.getPixelFromCoordinate(o[0]),l=e.getPixelFromCoordinate(o[1]),c=Object(b.h)(a,h),u=Object(b.h)(a,l),p=Math.sqrt(Math.min(c,u));return this.snappedToVertex_=p<=this.pixelTolerance_,this.snappedToVertex_&&(s=c>u?o[1]:o[0]),s}}return null},e.prototype.handlePointerMove_=function(t){var e=t.pixel,i=t.map,n=this.snapToVertex_(e,i);n||(n=i.getCoordinateFromPixel(e)),this.createOrUpdatePointerFeature_(n)},e.prototype.createOrUpdateExtentFeature_=function(t){var e=this.extentFeature_;return e?t?e.setGeometry(Object(W.d)(t)):e.setGeometry(void 0):(e=t?new bt.default(Object(W.d)(t)):new bt.default({}),this.extentFeature_=e,this.extentOverlay_.getSource().addFeature(e)),e},e.prototype.createOrUpdatePointerFeature_=function(t){var e=this.vertexFeature_;e?e.getGeometry().setCoordinates(t):(e=new bt.default(new Gt.default(t)),this.vertexFeature_=e,this.vertexOverlay_.getSource().addFeature(e));return e},e.prototype.handleEvent=function(e){return!e.pointerEvent||(e.type!=s.a.POINTERMOVE||this.handlingDownUpSequence||this.handlePointerMove_(e),t.prototype.handleEvent.call(this,e),!1)},e.prototype.handleDownEvent=function(t){var e=t.pixel,i=t.map,n=this.getExtent(),r=this.snapToVertex_(e,i),o=function(t){var e=null,i=null;return t[0]==n[0]?e=n[2]:t[0]==n[2]&&(e=n[0]),t[1]==n[1]?i=n[3]:t[1]==n[3]&&(i=n[1]),null!==e&&null!==i?[e,i]:null};if(r&&n){var s=r[0]==n[0]||r[0]==n[2]?r[0]:null,a=r[1]==n[1]||r[1]==n[3]?r[1]:null;null!==s&&null!==a?this.pointerHandler_=re(o(r)):null!==s?this.pointerHandler_=oe(o([s,n[1]]),o([s,n[3]])):null!==a&&(this.pointerHandler_=oe(o([n[0],a]),o([n[2],a])))}else r=i.getCoordinateFromPixel(e),this.setExtent([r[0],r[1],r[0],r[1]]),this.pointerHandler_=re(r);return!0},e.prototype.handleDragEvent=function(t){if(this.pointerHandler_){var e=t.coordinate;this.setExtent(this.pointerHandler_(e)),this.createOrUpdatePointerFeature_(e)}return!0},e.prototype.handleUpEvent=function(t){this.pointerHandler_=null;var e=this.getExtent();return e&&0!==Object(B.u)(e)||this.setExtent(null),!1},e.prototype.setMap=function(e){this.extentOverlay_.setMap(e),this.vertexOverlay_.setMap(e),t.prototype.setMap.call(this,e)},e.prototype.getExtent=function(){return this.extent_},e.prototype.setExtent=function(t){this.extent_=t||null,this.createOrUpdateExtentFeature_(t),this.dispatchEvent(new ie(this.extent_))},e}(G),ae=i(3),he=i(21),le=i(53),ce=i(52),ue=1,pe="modifystart",de="modifyend",fe=function(t){function e(e,i,n){t.call(this,e),this.features=i,this.mapBrowserEvent=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(V.a);function _e(t,e){return t.index-e.index}function ge(t,e){var i=e.geometry;if(i.getType()===Ot.a.CIRCLE){var n=i;if(e.index===ue){var r=Object(b.h)(n.getCenter(),t),o=Math.sqrt(r)-n.getRadius();return o*o}}return Object(b.i)(t,e.segment)}function ye(t,e){var i=e.geometry;return i.getType()===Ot.a.CIRCLE&&e.index===ue?i.getClosestPoint(t):Object(b.c)(t,e.segment)}var ve=function(t){function e(e){var i,r;if(t.call(this,e),this.condition_=e.condition?e.condition:D,this.defaultDeleteCondition_=function(t){return C(t)&&L(t)},this.deleteCondition_=e.deleteCondition?e.deleteCondition:this.defaultDeleteCondition_,this.insertVertexCondition_=e.insertVertexCondition?e.insertVertexCondition:S,this.vertexFeature_=null,this.vertexSegments_=null,this.lastPixel_=[0,0],this.ignoreNextSingleClick_=!1,this.modified_=!1,this.rBush_=new ce.a,this.pixelTolerance_=void 0!==e.pixelTolerance?e.pixelTolerance:10,this.snappedToVertex_=!1,this.changingFeature_=!1,this.dragSegments_=[],this.overlay_=new Ht.a({source:new zt.a({useSpatialIndex:!1,wrapX:!!e.wrapX}),style:e.style?e.style:(i=Object(Zt.b)(),function(t,e){return i[Ot.a.POINT]}),updateWhileAnimating:!0,updateWhileInteracting:!0}),this.SEGMENT_WRITERS_={Point:this.writePointGeometry_,LineString:this.writeLineStringGeometry_,LinearRing:this.writeLineStringGeometry_,Polygon:this.writePolygonGeometry_,MultiPoint:this.writeMultiPointGeometry_,MultiLineString:this.writeMultiLineStringGeometry_,MultiPolygon:this.writeMultiPolygonGeometry_,Circle:this.writeCircleGeometry_,GeometryCollection:this.writeGeometryCollectionGeometry_},this.source_=null,e.source?(this.source_=e.source,r=new n.a(this.source_.getFeatures()),Object(pt.a)(this.source_,le.a.ADDFEATURE,this.handleSourceAdd_,this),Object(pt.a)(this.source_,le.a.REMOVEFEATURE,this.handleSourceRemove_,this)):r=e.features,!r)throw new Error("The modify interaction requires features or a source");this.features_=r,this.features_.forEach(this.addFeature_.bind(this)),Object(pt.a)(this.features_,he.a.ADD,this.handleFeatureAdd_,this),Object(pt.a)(this.features_,he.a.REMOVE,this.handleFeatureRemove_,this),this.lastPointerEvent_=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.addFeature_=function(t){var e=t.getGeometry();e&&e.getType()in this.SEGMENT_WRITERS_&&this.SEGMENT_WRITERS_[e.getType()].call(this,t,e);var i=this.getMap();i&&i.isRendered()&&this.getActive()&&this.handlePointerAtPixel_(this.lastPixel_,i),Object(pt.a)(t,et.a.CHANGE,this.handleFeatureChange_,this)},e.prototype.willModifyFeatures_=function(t){this.modified_||(this.modified_=!0,this.dispatchEvent(new fe(pe,this.features_,t)))},e.prototype.removeFeature_=function(t){this.removeFeatureSegmentData_(t),this.vertexFeature_&&0===this.features_.getLength()&&(this.overlay_.getSource().removeFeature(this.vertexFeature_),this.vertexFeature_=null),Object(pt.c)(t,et.a.CHANGE,this.handleFeatureChange_,this)},e.prototype.removeFeatureSegmentData_=function(t){var e=this.rBush_,i=[];e.forEach(function(e){t===e.feature&&i.push(e)});for(var n=i.length-1;n>=0;--n)e.remove(i[n])},e.prototype.setActive=function(e){this.vertexFeature_&&!e&&(this.overlay_.getSource().removeFeature(this.vertexFeature_),this.vertexFeature_=null),t.prototype.setActive.call(this,e)},e.prototype.setMap=function(e){this.overlay_.setMap(e),t.prototype.setMap.call(this,e)},e.prototype.getOverlay=function(){return this.overlay_},e.prototype.handleSourceAdd_=function(t){t.feature&&this.features_.push(t.feature)},e.prototype.handleSourceRemove_=function(t){t.feature&&this.features_.remove(t.feature)},e.prototype.handleFeatureAdd_=function(t){this.addFeature_(t.element)},e.prototype.handleFeatureChange_=function(t){if(!this.changingFeature_){var e=t.target;this.removeFeature_(e),this.addFeature_(e)}},e.prototype.handleFeatureRemove_=function(t){var e=t.element;this.removeFeature_(e)},e.prototype.writePointGeometry_=function(t,e){var i=e.getCoordinates(),n={feature:t,geometry:e,segment:[i,i]};this.rBush_.insert(e.getExtent(),n)},e.prototype.writeMultiPointGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n){var o=i[n],s={feature:t,geometry:e,depth:[n],index:n,segment:[o,o]};this.rBush_.insert(e.getExtent(),s)}},e.prototype.writeLineStringGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length-1;n<r;++n){var o=i.slice(n,n+2),s={feature:t,geometry:e,index:n,segment:o};this.rBush_.insert(Object(B.b)(o),s)}},e.prototype.writeMultiLineStringGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n)for(var o=i[n],s=0,a=o.length-1;s<a;++s){var h=o.slice(s,s+2),l={feature:t,geometry:e,depth:[n],index:s,segment:h};this.rBush_.insert(Object(B.b)(h),l)}},e.prototype.writePolygonGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n)for(var o=i[n],s=0,a=o.length-1;s<a;++s){var h=o.slice(s,s+2),l={feature:t,geometry:e,depth:[n],index:s,segment:h};this.rBush_.insert(Object(B.b)(h),l)}},e.prototype.writeMultiPolygonGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n)for(var o=i[n],s=0,a=o.length;s<a;++s)for(var h=o[s],l=0,c=h.length-1;l<c;++l){var u=h.slice(l,l+2),p={feature:t,geometry:e,depth:[s,n],index:l,segment:u};this.rBush_.insert(Object(B.b)(u),p)}},e.prototype.writeCircleGeometry_=function(t,e){var i=e.getCenter(),n={feature:t,geometry:e,index:0,segment:[i,i]},r={feature:t,geometry:e,index:ue,segment:[i,i]},o=[n,r];n.featureSegments=r.featureSegments=o,this.rBush_.insert(Object(B.m)(i),n),this.rBush_.insert(e.getExtent(),r)},e.prototype.writeGeometryCollectionGeometry_=function(t,e){for(var i=e.getGeometriesArray(),n=0;n<i.length;++n)this.SEGMENT_WRITERS_[i[n].getType()].call(this,t,i[n])},e.prototype.createOrUpdateVertexFeature_=function(t){var e=this.vertexFeature_;e?e.getGeometry().setCoordinates(t):(e=new bt.default(new Gt.default(t)),this.vertexFeature_=e,this.overlay_.getSource().addFeature(e));return e},e.prototype.handleEvent=function(e){return!e.pointerEvent||(this.lastPointerEvent_=e,e.map.getView().getInteracting()||e.type!=s.a.POINTERMOVE||this.handlingDownUpSequence||this.handlePointerMove_(e),this.vertexFeature_&&this.deleteCondition_(e)&&(i=!(e.type!=s.a.SINGLECLICK||!this.ignoreNextSingleClick_)||this.removePoint()),e.type==s.a.SINGLECLICK&&(this.ignoreNextSingleClick_=!1),t.prototype.handleEvent.call(this,e)&&!i);var i},e.prototype.handleDragEvent=function(t){this.ignoreNextSingleClick_=!1,this.willModifyFeatures_(t);for(var e=t.coordinate,i=0,n=this.dragSegments_.length;i<n;++i){for(var r=this.dragSegments_[i],o=r[0],s=o.depth,a=o.geometry,h=void 0,l=o.segment,c=r[1];e.length<a.getStride();)e.push(l[c][e.length]);switch(a.getType()){case Ot.a.POINT:h=e,l[0]=l[1]=e;break;case Ot.a.MULTI_POINT:(h=a.getCoordinates())[o.index]=e,l[0]=l[1]=e;break;case Ot.a.LINE_STRING:(h=a.getCoordinates())[o.index+c]=e,l[c]=e;break;case Ot.a.MULTI_LINE_STRING:case Ot.a.POLYGON:(h=a.getCoordinates())[s[0]][o.index+c]=e,l[c]=e;break;case Ot.a.MULTI_POLYGON:(h=a.getCoordinates())[s[1]][s[0]][o.index+c]=e,l[c]=e;break;case Ot.a.CIRCLE:l[0]=l[1]=e,0===o.index?(this.changingFeature_=!0,a.setCenter(e),this.changingFeature_=!1):(this.changingFeature_=!0,a.setRadius(Object(b.d)(a.getCenter(),e)),this.changingFeature_=!1)}h&&this.setGeometryCoordinates_(a,h)}this.createOrUpdateVertexFeature_(e)},e.prototype.handleDownEvent=function(t){if(!this.condition_(t))return!1;this.handlePointerAtPixel_(t.pixel,t.map);var e=t.map.getCoordinateFromPixel(t.pixel);this.dragSegments_.length=0,this.modified_=!1;var i=this.vertexFeature_;if(i){var n=[],r=i.getGeometry().getCoordinates(),o=Object(B.b)([r]),s=this.rBush_.getInExtent(o),a={};s.sort(_e);for(var h=0,l=s.length;h<l;++h){var c=s[h],u=c.segment,p=Object(ae.c)(c.feature),d=c.depth;if(d&&(p+="-"+d.join("-")),a[p]||(a[p]=new Array(2)),c.geometry.getType()===Ot.a.CIRCLE&&c.index===ue){var f=ye(e,c);Object(b.e)(f,r)&&!a[p][0]&&(this.dragSegments_.push([c,0]),a[p][0]=c)}else if(Object(b.e)(u[0],r)&&!a[p][0])this.dragSegments_.push([c,0]),a[p][0]=c;else if(Object(b.e)(u[1],r)&&!a[p][1]){if((c.geometry.getType()===Ot.a.LINE_STRING||c.geometry.getType()===Ot.a.MULTI_LINE_STRING)&&a[p][0]&&0===a[p][0].index)continue;this.dragSegments_.push([c,1]),a[p][1]=c}else this.insertVertexCondition_(t)&&Object(ae.c)(u)in this.vertexSegments_&&!a[p][0]&&!a[p][1]&&n.push([c,r])}n.length&&this.willModifyFeatures_(t);for(var _=n.length-1;_>=0;--_)this.insertVertex_.apply(this,n[_])}return!!this.vertexFeature_},e.prototype.handleUpEvent=function(t){for(var e=this.dragSegments_.length-1;e>=0;--e){var i=this.dragSegments_[e][0],n=i.geometry;if(n.getType()===Ot.a.CIRCLE){var r=n.getCenter(),o=i.featureSegments[0],s=i.featureSegments[1];o.segment[0]=o.segment[1]=r,s.segment[0]=s.segment[1]=r,this.rBush_.update(Object(B.m)(r),o),this.rBush_.update(n.getExtent(),s)}else this.rBush_.update(Object(B.b)(i.segment),i)}return this.modified_&&(this.dispatchEvent(new fe(de,this.features_,t)),this.modified_=!1),!1},e.prototype.handlePointerMove_=function(t){this.lastPixel_=t.pixel,this.handlePointerAtPixel_(t.pixel,t.map)},e.prototype.handlePointerAtPixel_=function(t,e){var i=e.getCoordinateFromPixel(t),n=Object(B.c)(Object(B.m)(i),e.getView().getResolution()*this.pixelTolerance_),r=this.rBush_.getInExtent(n);if(r.length>0){r.sort(function(t,e){return ge(i,t)-ge(i,e)});var o=r[0],s=o.segment,a=ye(i,o),h=e.getPixelFromCoordinate(a),l=Object(b.d)(t,h);if(l<=this.pixelTolerance_){var c={};if(o.geometry.getType()===Ot.a.CIRCLE&&o.index===ue)this.snappedToVertex_=!0,this.createOrUpdateVertexFeature_(a);else{var u=e.getPixelFromCoordinate(s[0]),p=e.getPixelFromCoordinate(s[1]),d=Object(b.h)(h,u),f=Object(b.h)(h,p);l=Math.sqrt(Math.min(d,f)),this.snappedToVertex_=l<=this.pixelTolerance_,this.snappedToVertex_&&(a=d>f?s[1]:s[0]),this.createOrUpdateVertexFeature_(a);for(var _=1,g=r.length;_<g;++_){var y=r[_].segment;if(!(Object(b.e)(s[0],y[0])&&Object(b.e)(s[1],y[1])||Object(b.e)(s[0],y[1])&&Object(b.e)(s[1],y[0])))break;c[Object(ae.c)(y)]=!0}}return c[Object(ae.c)(s)]=!0,void(this.vertexSegments_=c)}}this.vertexFeature_&&(this.overlay_.getSource().removeFeature(this.vertexFeature_),this.vertexFeature_=null)},e.prototype.insertVertex_=function(t,e){for(var i,n=t.segment,r=t.feature,o=t.geometry,s=t.depth,a=t.index;e.length<o.getStride();)e.push(0);switch(o.getType()){case Ot.a.MULTI_LINE_STRING:case Ot.a.POLYGON:(i=o.getCoordinates())[s[0]].splice(a+1,0,e);break;case Ot.a.MULTI_POLYGON:(i=o.getCoordinates())[s[1]][s[0]].splice(a+1,0,e);break;case Ot.a.LINE_STRING:(i=o.getCoordinates()).splice(a+1,0,e);break;default:return}this.setGeometryCoordinates_(o,i);var h=this.rBush_;h.remove(t),this.updateSegmentIndices_(o,a,s,1);var l={segment:[n[0],e],feature:r,geometry:o,depth:s,index:a};h.insert(Object(B.b)(l.segment),l),this.dragSegments_.push([l,1]);var c={segment:[e,n[1]],feature:r,geometry:o,depth:s,index:a+1};h.insert(Object(B.b)(c.segment),c),this.dragSegments_.push([c,0]),this.ignoreNextSingleClick_=!0},e.prototype.removePoint=function(){if(this.lastPointerEvent_&&this.lastPointerEvent_.type!=s.a.POINTERDRAG){var t=this.lastPointerEvent_;return this.willModifyFeatures_(t),this.removeVertex_(),this.dispatchEvent(new fe(de,this.features_,t)),this.modified_=!1,!0}return!1},e.prototype.removeVertex_=function(){var t,e,i,n,r,o,s,a,h,l,c,u=this.dragSegments_,p={},d=!1;for(r=u.length-1;r>=0;--r)l=(i=u[r])[0],c=Object(ae.c)(l.feature),l.depth&&(c+="-"+l.depth.join("-")),c in p||(p[c]={}),0===i[1]?(p[c].right=l,p[c].index=l.index):1==i[1]&&(p[c].left=l,p[c].index=l.index+1);for(c in p){switch(h=p[c].right,s=p[c].left,(a=(o=p[c].index)-1)<0&&(a=0),t=e=(n=(l=void 0!==s?s:h).geometry).getCoordinates(),d=!1,n.getType()){case Ot.a.MULTI_LINE_STRING:e[l.depth[0]].length>2&&(e[l.depth[0]].splice(o,1),d=!0);break;case Ot.a.LINE_STRING:e.length>2&&(e.splice(o,1),d=!0);break;case Ot.a.MULTI_POLYGON:t=t[l.depth[1]];case Ot.a.POLYGON:(t=t[l.depth[0]]).length>4&&(o==t.length-1&&(o=0),t.splice(o,1),d=!0,0===o&&(t.pop(),t.push(t[0]),a=t.length-1))}if(d){this.setGeometryCoordinates_(n,e);var f=[];if(void 0!==s&&(this.rBush_.remove(s),f.push(s.segment[0])),void 0!==h&&(this.rBush_.remove(h),f.push(h.segment[1])),void 0!==s&&void 0!==h){var _={depth:l.depth,feature:l.feature,geometry:l.geometry,index:a,segment:f};this.rBush_.insert(Object(B.b)(_.segment),_)}this.updateSegmentIndices_(n,o,l.depth,-1),this.vertexFeature_&&(this.overlay_.getSource().removeFeature(this.vertexFeature_),this.vertexFeature_=null),u.length=0}}return d},e.prototype.setGeometryCoordinates_=function(t,e){this.changingFeature_=!0,t.setCoordinates(e),this.changingFeature_=!1},e.prototype.updateSegmentIndices_=function(t,e,i,n){this.rBush_.forEachInExtent(t.getExtent(),function(r){r.geometry===t&&(void 0===i||void 0===r.depth||Object(St.b)(r.depth,i))&&r.index>e&&(r.index+=n)})},e}(G),me={SELECT:"select"},be=function(t){function e(e,i,n,r){t.call(this,e),this.selected=i,this.deselected=n,this.mapBrowserEvent=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(V.a);function Ee(t){if(!this.condition_(t))return!0;var e=this.addCondition_(t),i=this.removeCondition_(t),n=this.toggleCondition_(t),r=!e&&!i&&!n,o=t.map,s=this.getFeatures(),a=[],h=[];if(r){Object(N.b)(this.featureLayerAssociation_),o.forEachFeatureAtPixel(t.pixel,function(t,e){if(this.filter_(t,e))return h.push(t),this.addFeatureLayerAssociation_(t,e),!this.multi_}.bind(this),{layerFilter:this.layerFilter_,hitTolerance:this.hitTolerance_});for(var l=s.getLength()-1;l>=0;--l){var c=s.item(l),u=h.indexOf(c);u>-1?h.splice(u,1):(s.remove(c),a.push(c))}0!==h.length&&s.extend(h)}else{o.forEachFeatureAtPixel(t.pixel,function(t,r){if(this.filter_(t,r))return!e&&!n||Object(St.f)(s.getArray(),t)?(i||n)&&Object(St.f)(s.getArray(),t)&&(a.push(t),this.removeFeatureLayerAssociation_(t)):(h.push(t),this.addFeatureLayerAssociation_(t,r)),!this.multi_}.bind(this),{layerFilter:this.layerFilter_,hitTolerance:this.hitTolerance_});for(var p=a.length-1;p>=0;--p)s.remove(a[p]);s.extend(h)}return(h.length>0||a.length>0)&&this.dispatchEvent(new be(me.SELECT,h,a,t)),w(t)}function Oe(){var t=Object(Zt.b)();return Object(St.c)(t[Ot.a.POLYGON],t[Ot.a.LINE_STRING]),Object(St.c)(t[Ot.a.GEOMETRY_COLLECTION],t[Ot.a.LINE_STRING]),function(e,i){return e.getGeometry()?t[e.getGeometry().getType()]:null}}var xe=function(t){function e(e){t.call(this,{handleEvent:Ee});var i=e||{};this.condition_=i.condition?i.condition:L,this.addCondition_=i.addCondition?i.addCondition:j,this.removeCondition_=i.removeCondition?i.removeCondition:j,this.toggleCondition_=i.toggleCondition?i.toggleCondition:M,this.multi_=!!i.multi&&i.multi,this.filter_=i.filter?i.filter:O.b,this.hitTolerance_=i.hitTolerance?i.hitTolerance:0;var n,r=new Ht.a({source:new zt.a({useSpatialIndex:!1,features:i.features,wrapX:i.wrapX}),style:i.style?i.style:Oe(),updateWhileAnimating:!0,updateWhileInteracting:!0});if(this.featureOverlay_=r,i.layers)if("function"==typeof i.layers)n=i.layers;else{var o=i.layers;n=function(t){return Object(St.f)(o,t)}}else n=O.b;this.layerFilter_=n,this.featureLayerAssociation_={};var s=this.getFeatures();Object(pt.a)(s,he.a.ADD,this.addFeature_,this),Object(pt.a)(s,he.a.REMOVE,this.removeFeature_,this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.addFeatureLayerAssociation_=function(t,e){this.featureLayerAssociation_[Object(ae.c)(t)]=e},e.prototype.getFeatures=function(){return this.featureOverlay_.getSource().getFeaturesCollection()},e.prototype.getHitTolerance=function(){return this.hitTolerance_},e.prototype.getLayer=function(t){return this.featureLayerAssociation_[Object(ae.c)(t)]},e.prototype.getOverlay=function(){return this.featureOverlay_},e.prototype.setHitTolerance=function(t){this.hitTolerance_=t},e.prototype.setMap=function(e){var i=this.getMap(),n=this.getFeatures();i&&n.forEach(i.unskipFeature.bind(i)),t.prototype.setMap.call(this,e),this.featureOverlay_.setMap(e),e&&n.forEach(e.skipFeature.bind(e))},e.prototype.addFeature_=function(t){var e=this.getMap();e&&e.skipFeature(t.element)},e.prototype.removeFeature_=function(t){var e=this.getMap();e&&e.unskipFeature(t.element)},e.prototype.removeFeatureLayerAssociation_=function(t){delete this.featureLayerAssociation_[Object(ae.c)(t)]},e}(g);function Ce(t){return t.feature?t.feature:t.element?t.element:void 0}var Te=function(t){function e(e){var i=e||{},n=i;n.handleDownEvent||(n.handleDownEvent=O.b),n.stopDown||(n.stopDown=O.a),t.call(this,n),this.source_=i.source?i.source:null,this.vertex_=void 0===i.vertex||i.vertex,this.edge_=void 0===i.edge||i.edge,this.features_=i.features?i.features:null,this.featuresListenerKeys_=[],this.featureChangeListenerKeys_={},this.indexedFeaturesExtents_={},this.pendingFeatures_={},this.pixelCoordinate_=null,this.pixelTolerance_=void 0!==i.pixelTolerance?i.pixelTolerance:10,this.sortByDistance_=function(t,e){var i=Object(b.i)(this.pixelCoordinate_,t.segment),n=Object(b.i)(this.pixelCoordinate_,e.segment);return i-n}.bind(this),this.rBush_=new ce.a,this.SEGMENT_WRITERS_={Point:this.writePointGeometry_,LineString:this.writeLineStringGeometry_,LinearRing:this.writeLineStringGeometry_,Polygon:this.writePolygonGeometry_,MultiPoint:this.writeMultiPointGeometry_,MultiLineString:this.writeMultiLineStringGeometry_,MultiPolygon:this.writeMultiPolygonGeometry_,GeometryCollection:this.writeGeometryCollectionGeometry_,Circle:this.writeCircleGeometry_}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.addFeature=function(t,e){var i=void 0===e||e,n=Object(ae.c)(t),r=t.getGeometry();if(r){var o=this.SEGMENT_WRITERS_[r.getType()];o&&(this.indexedFeaturesExtents_[n]=r.getExtent(Object(B.j)()),o.call(this,t,r))}i&&(this.featureChangeListenerKeys_[n]=Object(pt.a)(t,et.a.CHANGE,this.handleFeatureChange_,this))},e.prototype.forEachFeatureAdd_=function(t){this.addFeature(t)},e.prototype.forEachFeatureRemove_=function(t){this.removeFeature(t)},e.prototype.getFeatures_=function(){var t;return this.features_?t=this.features_:this.source_&&(t=this.source_.getFeatures()),t},e.prototype.handleEvent=function(e){var i=this.snapTo(e.pixel,e.coordinate,e.map);return i.snapped&&(e.coordinate=i.vertex.slice(0,2),e.pixel=i.vertexPixel),t.prototype.handleEvent.call(this,e)},e.prototype.handleFeatureAdd_=function(t){var e=Ce(t);this.addFeature(e)},e.prototype.handleFeatureRemove_=function(t){var e=Ce(t);this.removeFeature(e)},e.prototype.handleFeatureChange_=function(t){var e=t.target;if(this.handlingDownUpSequence){var i=Object(ae.c)(e);i in this.pendingFeatures_||(this.pendingFeatures_[i]=e)}else this.updateFeature_(e)},e.prototype.handleUpEvent=function(t){var e=Object(N.c)(this.pendingFeatures_);return e.length&&(e.forEach(this.updateFeature_.bind(this)),this.pendingFeatures_={}),!1},e.prototype.removeFeature=function(t,e){var i=void 0===e||e,n=Object(ae.c)(t),r=this.indexedFeaturesExtents_[n];if(r){var o=this.rBush_,s=[];o.forEachInExtent(r,function(e){t===e.feature&&s.push(e)});for(var a=s.length-1;a>=0;--a)o.remove(s[a])}i&&(Object(pt.e)(this.featureChangeListenerKeys_[n]),delete this.featureChangeListenerKeys_[n])},e.prototype.setMap=function(e){var i=this.getMap(),n=this.featuresListenerKeys_,r=this.getFeatures_();i&&(n.forEach(pt.e),n.length=0,r.forEach(this.forEachFeatureRemove_.bind(this))),t.prototype.setMap.call(this,e),e&&(this.features_?n.push(Object(pt.a)(this.features_,he.a.ADD,this.handleFeatureAdd_,this),Object(pt.a)(this.features_,he.a.REMOVE,this.handleFeatureRemove_,this)):this.source_&&n.push(Object(pt.a)(this.source_,le.a.ADDFEATURE,this.handleFeatureAdd_,this),Object(pt.a)(this.source_,le.a.REMOVEFEATURE,this.handleFeatureRemove_,this)),r.forEach(this.forEachFeatureAdd_.bind(this)))},e.prototype.snapTo=function(t,e,i){var n=i.getCoordinateFromPixel([t[0]-this.pixelTolerance_,t[1]+this.pixelTolerance_]),r=i.getCoordinateFromPixel([t[0]+this.pixelTolerance_,t[1]-this.pixelTolerance_]),o=Object(B.b)([n,r]),s=this.rBush_.getInExtent(o);this.vertex_&&!this.edge_&&(s=s.filter(function(t){return t.feature.getGeometry().getType()!==Ot.a.CIRCLE}));var a,h,l,c,u=!1,p=null,d=null;if(s.length>0){this.pixelCoordinate_=e,s.sort(this.sortByDistance_);var f=s[0].segment,_=s[0].feature.getGeometry().getType()===Ot.a.CIRCLE;this.vertex_&&!this.edge_?(a=i.getPixelFromCoordinate(f[0]),h=i.getPixelFromCoordinate(f[1]),l=Object(b.h)(t,a),c=Object(b.h)(t,h),Math.sqrt(Math.min(l,c))<=this.pixelTolerance_&&(u=!0,p=l>c?f[1]:f[0],d=i.getPixelFromCoordinate(p))):this.edge_&&(p=_?Object(b.b)(e,s[0].feature.getGeometry()):Object(b.c)(e,f),d=i.getPixelFromCoordinate(p),Object(b.d)(t,d)<=this.pixelTolerance_&&(u=!0,this.vertex_&&!_&&(a=i.getPixelFromCoordinate(f[0]),h=i.getPixelFromCoordinate(f[1]),l=Object(b.h)(d,a),c=Object(b.h)(d,h),Math.sqrt(Math.min(l,c))<=this.pixelTolerance_&&(p=l>c?f[1]:f[0],d=i.getPixelFromCoordinate(p))))),u&&(d=[Math.round(d[0]),Math.round(d[1])])}return{snapped:u,vertex:p,vertexPixel:d}},e.prototype.updateFeature_=function(t){this.removeFeature(t,!1),this.addFeature(t,!1)},e.prototype.writeCircleGeometry_=function(t,e){for(var i=Object(W.c)(e).getCoordinates()[0],n=0,r=i.length-1;n<r;++n){var o=i.slice(n,n+2),s={feature:t,segment:o};this.rBush_.insert(Object(B.b)(o),s)}},e.prototype.writeGeometryCollectionGeometry_=function(t,e){for(var i=e.getGeometriesArray(),n=0;n<i.length;++n){var r=this.SEGMENT_WRITERS_[i[n].getType()];r&&r.call(this,t,i[n])}},e.prototype.writeLineStringGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length-1;n<r;++n){var o=i.slice(n,n+2),s={feature:t,segment:o};this.rBush_.insert(Object(B.b)(o),s)}},e.prototype.writeMultiLineStringGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n)for(var o=i[n],s=0,a=o.length-1;s<a;++s){var h=o.slice(s,s+2),l={feature:t,segment:h};this.rBush_.insert(Object(B.b)(h),l)}},e.prototype.writeMultiPointGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n){var o=i[n],s={feature:t,segment:[o,o]};this.rBush_.insert(e.getExtent(),s)}},e.prototype.writeMultiPolygonGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n)for(var o=i[n],s=0,a=o.length;s<a;++s)for(var h=o[s],l=0,c=h.length-1;l<c;++l){var u=h.slice(l,l+2),p={feature:t,segment:u};this.rBush_.insert(Object(B.b)(u),p)}},e.prototype.writePointGeometry_=function(t,e){var i=e.getCoordinates(),n={feature:t,segment:[i,i]};this.rBush_.insert(e.getExtent(),n)},e.prototype.writePolygonGeometry_=function(t,e){for(var i=e.getCoordinates(),n=0,r=i.length;n<r;++n)for(var o=i[n],s=0,a=o.length-1;s<a;++s){var h=o.slice(s,s+2),l={feature:t,segment:h};this.rBush_.insert(Object(B.b)(h),l)}},e}(G),Re="translatestart",Se="translating",Ie="translateend",je=function(t){function e(e,i,n){t.call(this,e),this.features=i,this.coordinate=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(V.a),we=function(t){function e(e){var i,n=e||{};if(t.call(this,n),this.lastCoordinate_=null,this.features_=void 0!==n.features?n.features:null,n.layers)if("function"==typeof n.layers)i=n.layers;else{var r=n.layers;i=function(t){return Object(St.f)(r,t)}}else i=O.b;this.layerFilter_=i,this.hitTolerance_=n.hitTolerance?n.hitTolerance:0,this.lastFeature_=null,Object(pt.a)(this,Object(a.b)(l.ACTIVE),this.handleActiveChanged_,this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleDownEvent=function(t){if(this.lastFeature_=this.featuresAtPixel_(t.pixel,t.map),!this.lastCoordinate_&&this.lastFeature_){this.lastCoordinate_=t.coordinate,this.handleMoveEvent(t);var e=this.features_||new n.a([this.lastFeature_]);return this.dispatchEvent(new je(Re,e,t.coordinate)),!0}return!1},e.prototype.handleUpEvent=function(t){if(this.lastCoordinate_){this.lastCoordinate_=null,this.handleMoveEvent(t);var e=this.features_||new n.a([this.lastFeature_]);return this.dispatchEvent(new je(Ie,e,t.coordinate)),!0}return!1},e.prototype.handleDragEvent=function(t){if(this.lastCoordinate_){var e=t.coordinate,i=e[0]-this.lastCoordinate_[0],r=e[1]-this.lastCoordinate_[1],o=this.features_||new n.a([this.lastFeature_]);o.forEach(function(t){var e=t.getGeometry();e.translate(i,r),t.setGeometry(e)}),this.lastCoordinate_=e,this.dispatchEvent(new je(Se,o,e))}},e.prototype.handleMoveEvent=function(t){var e=t.map.getViewport();this.featuresAtPixel_(t.pixel,t.map)?(e.classList.remove(this.lastCoordinate_?"ol-grab":"ol-grabbing"),e.classList.add(this.lastCoordinate_?"ol-grabbing":"ol-grab")):e.classList.remove("ol-grab","ol-grabbing")},e.prototype.featuresAtPixel_=function(t,e){return e.forEachFeatureAtPixel(t,function(t){if(!this.features_||Object(St.f)(this.features_.getArray(),t))return t}.bind(this),{layerFilter:this.layerFilter_,hitTolerance:this.hitTolerance_})},e.prototype.getHitTolerance=function(){return this.hitTolerance_},e.prototype.setHitTolerance=function(t){this.hitTolerance_=t},e.prototype.setMap=function(e){var i=this.getMap();t.prototype.setMap.call(this,e),this.updateState_(i)},e.prototype.handleActiveChanged_=function(){this.updateState_(null)},e.prototype.updateState_=function(t){var e=this.getMap(),i=this.getActive();e&&i||(e=e||t)&&e.getViewport().classList.remove("ol-grab","ol-grabbing")},e}(G);function Le(t){var e=t||{},i=new n.a,r=new o(-.005,.05,100);return(void 0===e.altShiftDragRotate||e.altShiftDragRotate)&&i.push(new K),(void 0===e.doubleClickZoom||e.doubleClickZoom)&&i.push(new v({delta:e.zoomDelta,duration:e.zoomDuration})),(void 0===e.dragPan||e.dragPan)&&i.push(new Y({condition:e.onFocusOnly?R:void 0,kinetic:r})),(void 0===e.pinchRotate||e.pinchRotate)&&i.push(new ct),(void 0===e.pinchZoom||e.pinchZoom)&&i.push(new ut({constrainResolution:e.constrainResolution,duration:e.zoomDuration})),(void 0===e.keyboard||e.keyboard)&&(i.push(new rt),i.push(new st({delta:e.zoomDelta,duration:e.zoomDuration}))),(void 0===e.mouseWheelZoom||e.mouseWheelZoom)&&i.push(new lt({condition:e.onFocusOnly?R:void 0,constrainResolution:e.constrainResolution,duration:e.zoomDuration})),(void 0===e.shiftDragZoom||e.shiftDragZoom)&&i.push(new tt({duration:e.zoomDuration})),i}i.d(e,"defaults",function(){return Le}),i.d(e,"DoubleClickZoom",function(){return v}),i.d(e,"DragAndDrop",function(){return vt}),i.d(e,"DragBox",function(){return Q}),i.d(e,"DragPan",function(){return Y}),i.d(e,"DragRotate",function(){return K}),i.d(e,"DragRotateAndZoom",function(){return mt}),i.d(e,"DragZoom",function(){return tt}),i.d(e,"Draw",function(){return te}),i.d(e,"Extent",function(){return se}),i.d(e,"Interaction",function(){return g}),i.d(e,"KeyboardPan",function(){return rt}),i.d(e,"KeyboardZoom",function(){return st}),i.d(e,"Modify",function(){return ve}),i.d(e,"MouseWheelZoom",function(){return lt}),i.d(e,"PinchRotate",function(){return ct}),i.d(e,"PinchZoom",function(){return ut}),i.d(e,"Pointer",function(){return G}),i.d(e,"Select",function(){return xe}),i.d(e,"Snap",function(){return Te}),i.d(e,"Translate",function(){return we})},function(t,e,i){"use strict";i.r(e);var n=i(64),r=i(3),o=i(8),s=i(6);function a(t){return t}var h=i(12),l=i(7);var c=i(47),u=i(14),p="center",d="resolution",f="rotation",_=i(9),g=i(18),y=i(24),v=i(1),m=i(10),b=i(31),E=i(5),O=i(15),x=i(45);i.d(e,"createCenterConstraint",function(){return S}),i.d(e,"createResolutionConstraint",function(){return I}),i.d(e,"createRotationConstraint",function(){return j}),i.d(e,"isNoopAnimation",function(){return w});var C=0,T=function(t){function e(e){t.call(this);var i=Object(E.a)({},e);this.hints_=[0,0],this.animations_=[],this.updateAnimationKey_,this.updateAnimations_=this.updateAnimations_.bind(this),this.projection_=Object(O.b)(i.projection,"EPSG:3857"),this.applyOptions_(i)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.applyOptions_=function(t){var e={};e[p]=void 0!==t.center?t.center:null;var i=I(t);this.maxResolution_=i.maxResolution,this.minResolution_=i.minResolution,this.zoomFactor_=i.zoomFactor,this.resolutions_=t.resolutions,this.minZoom_=i.minZoom;var n=S(t),r=i.constraint,o=j(t);this.constraints_={center:n,resolution:r,rotation:o},void 0!==t.resolution?e[d]=t.resolution:void 0!==t.zoom&&(e[d]=this.constrainResolution(this.maxResolution_,t.zoom-this.minZoom_),this.resolutions_&&(e[d]=Object(s.a)(Number(this.getResolution()||e[d]),this.minResolution_,this.maxResolution_))),e[f]=void 0!==t.rotation?t.rotation:0,this.setProperties(e),this.options_=t},e.prototype.getUpdatedOptions_=function(t){var e=Object(E.a)({},this.options_);return void 0!==e.resolution?e.resolution=this.getResolution():e.zoom=this.getZoom(),e.center=this.getCenter(),e.rotation=this.getRotation(),Object(E.a)({},e,t)},e.prototype.animate=function(t){var e,i=arguments,n=arguments.length;if(n>1&&"function"==typeof arguments[n-1]&&(e=arguments[n-1],--n),!this.isDef()){var r=arguments[n-1];return r.center&&this.setCenter(r.center),void 0!==r.zoom&&this.setZoom(r.zoom),void 0!==r.rotation&&this.setRotation(r.rotation),void(e&&R(e,!0))}for(var o=Date.now(),a=this.getCenter().slice(),h=this.getResolution(),l=this.getRotation(),c=[],p=0;p<n;++p){var d=i[p],f={start:o,complete:!1,anchor:d.anchor,duration:void 0!==d.duration?d.duration:1e3,easing:d.easing||y.c};if(d.center&&(f.sourceCenter=a,f.targetCenter=d.center,a=f.targetCenter),void 0!==d.zoom?(f.sourceResolution=h,f.targetResolution=this.constrainResolution(this.maxResolution_,d.zoom-this.minZoom_,0),h=f.targetResolution):d.resolution&&(f.sourceResolution=h,f.targetResolution=d.resolution,h=f.targetResolution),void 0!==d.rotation){f.sourceRotation=l;var _=Object(s.d)(d.rotation-l+Math.PI,2*Math.PI)-Math.PI;f.targetRotation=l+_,l=f.targetRotation}f.callback=e,w(f)?f.complete=!0:o+=f.duration,c.push(f)}this.animations_.push(c),this.setHint(u.a.ANIMATING,1),this.updateAnimations_()},e.prototype.getAnimating=function(){return this.hints_[u.a.ANIMATING]>0},e.prototype.getInteracting=function(){return this.hints_[u.a.INTERACTING]>0},e.prototype.cancelAnimations=function(){this.setHint(u.a.ANIMATING,-this.hints_[u.a.ANIMATING]);for(var t=0,e=this.animations_.length;t<e;++t){var i=this.animations_[t];i[0].callback&&R(i[0].callback,!1)}this.animations_.length=0},e.prototype.updateAnimations_=function(){if(void 0!==this.updateAnimationKey_&&(cancelAnimationFrame(this.updateAnimationKey_),this.updateAnimationKey_=void 0),this.getAnimating()){for(var t=Date.now(),e=!1,i=this.animations_.length-1;i>=0;--i){for(var n=this.animations_[i],r=!0,o=0,a=n.length;o<a;++o){var h=n[o];if(!h.complete){var l=t-h.start,c=h.duration>0?l/h.duration:1;c>=1?(h.complete=!0,c=1):r=!1;var _=h.easing(c);if(h.sourceCenter){var g=h.sourceCenter[0],y=h.sourceCenter[1],v=g+_*(h.targetCenter[0]-g),m=y+_*(h.targetCenter[1]-y);this.set(p,[v,m])}if(h.sourceResolution&&h.targetResolution){var b=1===_?h.targetResolution:h.sourceResolution+_*(h.targetResolution-h.sourceResolution);h.anchor&&this.set(p,this.calculateCenterZoom(b,h.anchor)),this.set(d,b)}if(void 0!==h.sourceRotation&&void 0!==h.targetRotation){var E=1===_?Object(s.d)(h.targetRotation+Math.PI,2*Math.PI)-Math.PI:h.sourceRotation+_*(h.targetRotation-h.sourceRotation);h.anchor&&this.set(p,this.calculateCenterRotate(E,h.anchor)),this.set(f,E)}if(e=!0,!h.complete)break}}if(r){this.animations_[i]=null,this.setHint(u.a.ANIMATING,-1);var O=n[0].callback;O&&R(O,!0)}}this.animations_=this.animations_.filter(Boolean),e&&void 0===this.updateAnimationKey_&&(this.updateAnimationKey_=requestAnimationFrame(this.updateAnimations_))}},e.prototype.calculateCenterRotate=function(t,e){var i,n=this.getCenter();return void 0!==n&&(i=[n[0]-e[0],n[1]-e[1]],Object(g.f)(i,t-this.getRotation()),Object(g.a)(i,e)),i},e.prototype.calculateCenterZoom=function(t,e){var i,n=this.getCenter(),r=this.getResolution();void 0!==n&&void 0!==r&&(i=[e[0]-t*(e[0]-n[0])/r,e[1]-t*(e[1]-n[1])/r]);return i},e.prototype.getSizeFromViewport_=function(){var t=[100,100],e='.ol-viewport[data-view="'+Object(r.c)(this)+'"]',i=document.querySelector(e);if(i){var n=getComputedStyle(i);t[0]=parseInt(n.width,10),t[1]=parseInt(n.height,10)}return t},e.prototype.constrainCenter=function(t){return this.constraints_.center(t)},e.prototype.constrainResolution=function(t,e,i){var n=e||0,r=i||0;return this.constraints_.resolution(t,n,r)},e.prototype.constrainRotation=function(t,e){var i=e||0;return this.constraints_.rotation(t,i)},e.prototype.getCenter=function(){return this.get(p)},e.prototype.getConstraints=function(){return this.constraints_},e.prototype.getHints=function(t){return void 0!==t?(t[0]=this.hints_[0],t[1]=this.hints_[1],t):this.hints_.slice()},e.prototype.calculateExtent=function(t){var e=t||this.getSizeFromViewport_(),i=this.getCenter();Object(_.a)(i,1);var n=this.getResolution();Object(_.a)(void 0!==n,2);var r=this.getRotation();return Object(_.a)(void 0!==r,3),Object(v.z)(i,n,r,e)},e.prototype.getMaxResolution=function(){return this.maxResolution_},e.prototype.getMinResolution=function(){return this.minResolution_},e.prototype.getMaxZoom=function(){return this.getZoomForResolution(this.minResolution_)},e.prototype.setMaxZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({maxZoom:t}))},e.prototype.getMinZoom=function(){return this.getZoomForResolution(this.maxResolution_)},e.prototype.setMinZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({minZoom:t}))},e.prototype.getProjection=function(){return this.projection_},e.prototype.getResolution=function(){return this.get(d)},e.prototype.getResolutions=function(){return this.resolutions_},e.prototype.getResolutionForExtent=function(t,e){var i=e||this.getSizeFromViewport_(),n=Object(v.E)(t)/i[0],r=Object(v.A)(t)/i[1];return Math.max(n,r)},e.prototype.getResolutionForValueFunction=function(t){var e=t||2,i=this.maxResolution_,n=this.minResolution_,r=Math.log(i/n)/Math.log(e);return function(t){return i/Math.pow(e,t*r)}},e.prototype.getRotation=function(){return this.get(f)},e.prototype.getValueForResolutionFunction=function(t){var e=t||2,i=this.maxResolution_,n=this.minResolution_,r=Math.log(i/n)/Math.log(e);return function(t){return Math.log(i/t)/Math.log(e)/r}},e.prototype.getState=function(t){var e=this.getCenter(),i=this.getProjection(),n=this.getResolution(),r=n/t,o=this.getRotation();return{center:[Math.round(e[0]/r)*r,Math.round(e[1]/r)*r],projection:void 0!==i?i:null,resolution:n,rotation:o,zoom:this.getZoom()}},e.prototype.getZoom=function(){var t,e=this.getResolution();return void 0!==e&&(t=this.getZoomForResolution(e)),t},e.prototype.getZoomForResolution=function(t){var e,i,n=this.minZoom_||0;if(this.resolutions_){var r=Object(l.h)(this.resolutions_,t,1);n=r,e=this.resolutions_[r],i=r==this.resolutions_.length-1?2:e/this.resolutions_[r+1]}else e=this.maxResolution_,i=this.zoomFactor_;return n+Math.log(e/t)/Math.log(i)},e.prototype.getResolutionForZoom=function(t){return this.constrainResolution(this.maxResolution_,t-this.minZoom_,0)},e.prototype.fit=function(t,e){var i,n=e||{},r=n.size;r||(r=this.getSizeFromViewport_()),Object(_.a)(Array.isArray(t)||"function"==typeof t.getSimplifiedGeometry,24),Array.isArray(t)?(Object(_.a)(!Object(v.H)(t),25),i=Object(b.d)(t)):t.getType()===m.a.CIRCLE?(t=t.getExtent(),(i=Object(b.d)(t)).rotate(this.getRotation(),Object(v.x)(t))):i=t;var s,a=void 0!==n.padding?n.padding:[0,0,0,0],h=void 0===n.constrainResolution||n.constrainResolution,l=void 0!==n.nearest&&n.nearest;s=void 0!==n.minResolution?n.minResolution:void 0!==n.maxZoom?this.constrainResolution(this.maxResolution_,n.maxZoom-this.minZoom_,0):0;for(var c=i.getFlatCoordinates(),u=this.getRotation(),p=Math.cos(-u),d=Math.sin(-u),f=1/0,g=1/0,y=-1/0,E=-1/0,O=i.getStride(),x=0,C=c.length;x<C;x+=O){var T=c[x]*p-c[x+1]*d,S=c[x]*d+c[x+1]*p;f=Math.min(f,T),g=Math.min(g,S),y=Math.max(y,T),E=Math.max(E,S)}var I=this.getResolutionForExtent([f,g,y,E],[r[0]-a[1]-a[3],r[1]-a[0]-a[2]]);if(I=isNaN(I)?s:Math.max(I,s),h){var j=this.constrainResolution(I,0,0);!l&&j<I&&(j=this.constrainResolution(j,-1,0)),I=j}d=-d;var w=(f+y)/2,L=(g+E)/2,F=[(w+=(a[1]-a[3])/2*I)*p-(L+=(a[0]-a[2])/2*I)*d,L*p+w*d],M=n.callback?n.callback:o.c;void 0!==n.duration?this.animate({resolution:I,center:F,duration:n.duration,easing:n.easing},M):(this.setResolution(I),this.setCenter(F),R(M,!0))},e.prototype.centerOn=function(t,e,i){var n=this.getRotation(),r=Math.cos(-n),o=Math.sin(-n),s=t[0]*r-t[1]*o,a=t[1]*r+t[0]*o,h=this.getResolution(),l=(s+=(e[0]/2-i[0])*h)*r-(a+=(i[1]-e[1]/2)*h)*(o=-o),c=a*r+s*o;this.setCenter([l,c])},e.prototype.isDef=function(){return!!this.getCenter()&&void 0!==this.getResolution()},e.prototype.rotate=function(t,e){if(void 0!==e){var i=this.calculateCenterRotate(t,e);this.setCenter(i)}this.setRotation(t)},e.prototype.setCenter=function(t){this.set(p,t),this.getAnimating()&&this.cancelAnimations()},e.prototype.setHint=function(t,e){return this.hints_[t]+=e,this.changed(),this.hints_[t]},e.prototype.setResolution=function(t){this.set(d,t),this.getAnimating()&&this.cancelAnimations()},e.prototype.setRotation=function(t){this.set(f,t),this.getAnimating()&&this.cancelAnimations()},e.prototype.setZoom=function(t){this.setResolution(this.getResolutionForZoom(t))},e}(h.a);function R(t,e){setTimeout(function(){t(e)},0)}function S(t){return void 0!==t.extent?(e=t.extent,function(t){return t?[Object(s.a)(t[0],e[0],e[2]),Object(s.a)(t[1],e[1],e[3])]:void 0}):a;var e}function I(t){var e,i,r,o=void 0!==t.minZoom?t.minZoom:C,a=void 0!==t.maxZoom?t.maxZoom:28,h=void 0!==t.zoomFactor?t.zoomFactor:2;if(void 0!==t.resolutions){var c=t.resolutions;i=c[o],r=void 0!==c[a]?c[a]:c[c.length-1],e=function(t){return function(e,i,n){if(void 0!==e){var r=Object(l.h)(t,e,n);r=Object(s.a)(r+i,0,t.length-1);var o=Math.floor(r);if(r!=o&&o<t.length-1){var a=t[o]/t[o+1];return t[o]/Math.pow(a,r-o)}return t[o]}}}(c)}else{var u=Object(O.b)(t.projection,"EPSG:3857"),p=u.getExtent(),d=(p?Math.max(Object(v.E)(p),Object(v.A)(p)):360*O.a[x.b.DEGREES]/u.getMetersPerUnit())/n.b/Math.pow(2,C),f=d/Math.pow(2,28-C);void 0!==(i=t.maxResolution)?o=0:i=d/Math.pow(h,o),void 0===(r=t.minResolution)&&(r=void 0!==t.maxZoom?void 0!==t.maxResolution?i/Math.pow(h,a):d/Math.pow(h,a):f),a=o+Math.floor(Math.log(i/r)/Math.log(h)),r=i/Math.pow(h,a-o),e=function(t,e,i){return function(n,r,o){if(void 0!==n){var s=-o/2+.5,a=Math.floor(Math.log(e/n)/Math.log(t)+s),h=Math.max(a+r,0);return void 0!==i&&(h=Math.min(h,i)),e/Math.pow(t,h)}}}(h,i,a-o)}return{constraint:e,maxResolution:i,minResolution:r,minZoom:o,zoomFactor:h}}function j(t){if(void 0===t.enableRotation||t.enableRotation){var e=t.constrainRotation;return void 0===e||!0===e?Object(c.b)():!1===e?c.d:"number"==typeof e?Object(c.a)(e):c.d}return c.c}function w(t){return!(t.sourceCenter&&t.targetCenter&&!Object(g.e)(t.sourceCenter,t.targetCenter))&&(t.sourceResolution===t.targetResolution&&t.sourceRotation===t.targetRotation)}e.default=T},,,,,,function(t,e,i){"use strict";i.r(e);var n=i(3),r=i(25),o=i(21),s=i(88),a=i(28),h=i(26),l=i(87),c=i(4),u=i(40),p={POINTERMOVE:"pointermove",POINTERDOWN:"pointerdown",POINTERUP:"pointerup",POINTEROVER:"pointerover",POINTEROUT:"pointerout",POINTERENTER:"pointerenter",POINTERLEAVE:"pointerleave",POINTERCANCEL:"pointercancel"},d=i(76),f=i(70),_=["","unavailable","touch","pen","mouse"];function g(t){this.pointerMap[t.pointerId.toString()]=t;var e=this.prepareEvent_(t);this.dispatcher.down(e,t)}function y(t){var e=this.prepareEvent_(t);this.dispatcher.move(e,t)}function v(t){var e=this.prepareEvent_(t);this.dispatcher.up(e,t),this.cleanup(t.pointerId)}function m(t){var e=this.prepareEvent_(t);this.dispatcher.leaveOut(e,t)}function b(t){var e=this.prepareEvent_(t);this.dispatcher.enterOver(e,t)}function E(t){var e=this.prepareEvent_(t);this.dispatcher.cancel(e,t),this.cleanup(t.pointerId)}function O(t){var e=this.dispatcher.makeEvent("lostpointercapture",t,t);this.dispatcher.dispatchEvent(e)}function x(t){var e=this.dispatcher.makeEvent("gotpointercapture",t,t);this.dispatcher.dispatchEvent(e)}var C=function(t){function e(e){var i={MSPointerDown:g,MSPointerMove:y,MSPointerUp:v,MSPointerOut:m,MSPointerOver:b,MSPointerCancel:E,MSGotPointerCapture:x,MSLostPointerCapture:O};t.call(this,e,i),this.pointerMap=e.pointerMap}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.prepareEvent_=function(t){var e=t;return"number"==typeof t.pointerType&&((e=this.dispatcher.cloneEvent(t,t)).pointerType=_[t.pointerType]),e},e.prototype.cleanup=function(t){delete this.pointerMap[t.toString()]},e}(f.a);function T(t){this.dispatcher.fireNativeEvent(t)}function R(t){this.dispatcher.fireNativeEvent(t)}function S(t){this.dispatcher.fireNativeEvent(t)}function I(t){this.dispatcher.fireNativeEvent(t)}function j(t){this.dispatcher.fireNativeEvent(t)}function w(t){this.dispatcher.fireNativeEvent(t)}function L(t){this.dispatcher.fireNativeEvent(t)}function F(t){this.dispatcher.fireNativeEvent(t)}var M=function(t){function e(e){var i={pointerdown:T,pointermove:R,pointerup:S,pointerout:I,pointerover:j,pointercancel:w,gotpointercapture:F,lostpointercapture:L};t.call(this,e,i)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(f.a),P=i(11),A=!1,D=function(t){function e(e,i,n){t.call(this,e),this.originalEvent=i;var r=n||{};this.buttons=function(t){var e;if(t.buttons||A)e=t.buttons;else switch(t.which){case 1:e=1;break;case 2:e=4;break;case 3:e=2;break;default:e=0}return e}(r),this.pressure=function(t,e){var i=0;i=t.pressure?t.pressure:e?.5:0;return i}(r,this.buttons),this.bubbles="bubbles"in r&&r.bubbles,this.cancelable="cancelable"in r&&r.cancelable,this.view="view"in r?r.view:null,this.detail="detail"in r?r.detail:null,this.screenX="screenX"in r?r.screenX:0,this.screenY="screenY"in r?r.screenY:0,this.clientX="clientX"in r?r.clientX:0,this.clientY="clientY"in r?r.clientY:0,this.ctrlKey="ctrlKey"in r&&r.ctrlKey,this.altKey="altKey"in r&&r.altKey,this.shiftKey="shiftKey"in r&&r.shiftKey,this.metaKey="metaKey"in r&&r.metaKey,this.button="button"in r?r.button:0,this.relatedTarget="relatedTarget"in r?r.relatedTarget:null,this.pointerId="pointerId"in r?r.pointerId:0,this.width="width"in r?r.width:0,this.height="height"in r?r.height:0,this.tiltX="tiltX"in r?r.tiltX:0,this.tiltY="tiltY"in r?r.tiltY:0,this.pointerType="pointerType"in r?r.pointerType:"",this.hwTimestamp="hwTimestamp"in r?r.hwTimestamp:0,this.isPrimary="isPrimary"in r&&r.isPrimary,i.preventDefault&&(this.preventDefault=function(){i.preventDefault()})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(P.a);!function(){try{var t=new MouseEvent("click",{buttons:1});A=1===t.buttons}catch(t){}}();var N=D,k=i(7);function G(t){this.vacuumTouches_(t),this.setPrimaryTouch_(t.changedTouches[0]),this.dedupSynthMouse_(t),this.clickCount_++,this.processTouches_(t,this.overDown_)}function Y(t){this.processTouches_(t,this.moveOverOut_)}function X(t){this.dedupSynthMouse_(t),this.processTouches_(t,this.upOut_)}function K(t){this.processTouches_(t,this.cancelOut_)}var B=function(t){function e(e,i){var n={touchstart:G,touchmove:Y,touchend:X,touchcancel:K};t.call(this,e,n),this.pointerMap=e.pointerMap,this.mouseSource=i,this.firstTouchId_=void 0,this.clickCount_=0,this.resetId_,this.dedupTimeout_=2500}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.isPrimaryTouch_=function(t){return this.firstTouchId_===t.identifier},e.prototype.setPrimaryTouch_=function(t){var e=Object.keys(this.pointerMap).length;(0===e||1===e&&d.a.toString()in this.pointerMap)&&(this.firstTouchId_=t.identifier,this.cancelResetClickCount_())},e.prototype.removePrimaryPointer_=function(t){t.isPrimary&&(this.firstTouchId_=void 0,this.resetClickCount_())},e.prototype.resetClickCount_=function(){this.resetId_=setTimeout(this.resetClickCountHandler_.bind(this),200)},e.prototype.resetClickCountHandler_=function(){this.clickCount_=0,this.resetId_=void 0},e.prototype.cancelResetClickCount_=function(){void 0!==this.resetId_&&clearTimeout(this.resetId_)},e.prototype.touchToPointer_=function(t,e){var i=this.dispatcher.cloneEvent(t,e);return i.pointerId=e.identifier+2,i.bubbles=!0,i.cancelable=!0,i.detail=this.clickCount_,i.button=0,i.buttons=1,i.width=e.radiusX||0,i.height=e.radiusY||0,i.pressure=e.force||.5,i.isPrimary=this.isPrimaryTouch_(e),i.pointerType="touch",i.clientX=e.clientX,i.clientY=e.clientY,i.screenX=e.screenX,i.screenY=e.screenY,i},e.prototype.processTouches_=function(t,e){var i=Array.prototype.slice.call(t.changedTouches),n=i.length;function r(){t.preventDefault()}for(var o=0;o<n;++o){var s=this.touchToPointer_(t,i[o]);s.preventDefault=r,e.call(this,t,s)}},e.prototype.findTouch_=function(t,e){for(var i=t.length,n=0;n<i;n++){if(t[n].identifier===e)return!0}return!1},e.prototype.vacuumTouches_=function(t){var e=t.touches,i=Object.keys(this.pointerMap),n=i.length;if(n>=e.length){for(var r=[],o=0;o<n;++o){var s=Number(i[o]),a=this.pointerMap[s];s==d.a||this.findTouch_(e,s-2)||r.push(a.out)}for(var h=0;h<r.length;++h)this.cancelOut_(t,r[h])}},e.prototype.overDown_=function(t,e){this.pointerMap[e.pointerId]={target:e.target,out:e,outTarget:e.target},this.dispatcher.over(e,t),this.dispatcher.enter(e,t),this.dispatcher.down(e,t)},e.prototype.moveOverOut_=function(t,e){var i=e,n=this.pointerMap[i.pointerId];if(n){var r=n.out,o=n.outTarget;this.dispatcher.move(i,t),r&&o!==i.target&&(r.relatedTarget=i.target,i.relatedTarget=o,r.target=o,i.target?(this.dispatcher.leaveOut(r,t),this.dispatcher.enterOver(i,t)):(i.target=o,i.relatedTarget=null,this.cancelOut_(t,i))),n.out=i,n.outTarget=i.target}},e.prototype.upOut_=function(t,e){this.dispatcher.up(e,t),this.dispatcher.out(e,t),this.dispatcher.leave(e,t),this.cleanUpPointer_(e)},e.prototype.cancelOut_=function(t,e){this.dispatcher.cancel(e,t),this.dispatcher.out(e,t),this.dispatcher.leave(e,t),this.cleanUpPointer_(e)},e.prototype.cleanUpPointer_=function(t){delete this.pointerMap[t.pointerId],this.removePrimaryPointer_(t)},e.prototype.dedupSynthMouse_=function(t){var e=this.mouseSource.lastTouches,i=t.changedTouches[0];if(this.isPrimaryTouch_(i)){var n=[i.clientX,i.clientY];e.push(n),setTimeout(function(){Object(k.j)(e,n)},this.dedupTimeout_)}},e}(f.a),V=[["bubbles",!1],["cancelable",!1],["view",null],["detail",null],["screenX",0],["screenY",0],["clientX",0],["clientY",0],["ctrlKey",!1],["altKey",!1],["shiftKey",!1],["metaKey",!1],["button",0],["relatedTarget",null],["buttons",0],["pointerId",0],["width",0],["height",0],["pressure",0],["tiltX",0],["tiltY",0],["pointerType",""],["hwTimestamp",0],["isPrimary",!1],["type",""],["target",null],["currentTarget",null],["which",0]],U=function(t){function e(e){t.call(this),this.element_=e,this.pointerMap={},this.eventMap_={},this.eventSourceList_=[],this.registerSources()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.registerSources=function(){if(a.g)this.registerSource("native",new M(this));else if(a.f)this.registerSource("ms",new C(this));else{var t=new d.c(this);this.registerSource("mouse",t),a.i&&this.registerSource("touch",new B(this,t))}this.register_()},e.prototype.registerSource=function(t,e){var i=e,n=i.getEvents();n&&(n.forEach(function(t){var e=i.getHandlerForEvent(t);e&&(this.eventMap_[t]=e.bind(i))}.bind(this)),this.eventSourceList_.push(i))},e.prototype.register_=function(){for(var t=this.eventSourceList_.length,e=0;e<t;e++){var i=this.eventSourceList_[e];this.addEvents_(i.getEvents())}},e.prototype.unregister_=function(){for(var t=this.eventSourceList_.length,e=0;e<t;e++){var i=this.eventSourceList_[e];this.removeEvents_(i.getEvents())}},e.prototype.eventHandler_=function(t){var e=t.type,i=this.eventMap_[e];i&&i(t)},e.prototype.addEvents_=function(t){t.forEach(function(t){Object(c.a)(this.element_,t,this.eventHandler_,this)}.bind(this))},e.prototype.removeEvents_=function(t){t.forEach(function(t){Object(c.c)(this.element_,t,this.eventHandler_,this)}.bind(this))},e.prototype.cloneEvent=function(t,e){for(var i={},n=0,r=V.length;n<r;n++){var o=V[n][0];i[o]=t[o]||e[o]||V[n][1]}return i},e.prototype.down=function(t,e){this.fireEvent(p.POINTERDOWN,t,e)},e.prototype.move=function(t,e){this.fireEvent(p.POINTERMOVE,t,e)},e.prototype.up=function(t,e){this.fireEvent(p.POINTERUP,t,e)},e.prototype.enter=function(t,e){t.bubbles=!1,this.fireEvent(p.POINTERENTER,t,e)},e.prototype.leave=function(t,e){t.bubbles=!1,this.fireEvent(p.POINTERLEAVE,t,e)},e.prototype.over=function(t,e){t.bubbles=!0,this.fireEvent(p.POINTEROVER,t,e)},e.prototype.out=function(t,e){t.bubbles=!0,this.fireEvent(p.POINTEROUT,t,e)},e.prototype.cancel=function(t,e){this.fireEvent(p.POINTERCANCEL,t,e)},e.prototype.leaveOut=function(t,e){this.out(t,e),this.contains_(t.target,t.relatedTarget)||this.leave(t,e)},e.prototype.enterOver=function(t,e){this.over(t,e),this.contains_(t.target,t.relatedTarget)||this.enter(t,e)},e.prototype.contains_=function(t,e){return!(!t||!e)&&t.contains(e)},e.prototype.makeEvent=function(t,e,i){return new N(t,i,e)},e.prototype.fireEvent=function(t,e,i){var n=this.makeEvent(t,e,i);this.dispatchEvent(n)},e.prototype.fireNativeEvent=function(t){var e=this.makeEvent(t.type,t,t);this.dispatchEvent(e)},e.prototype.wrapMouseEvent=function(t,e){return this.makeEvent(t,Object(d.d)(e,this),e)},e.prototype.disposeInternal=function(){this.unregister_(),t.prototype.disposeInternal.call(this)},e}(u.a),W=function(t){function e(e,i){t.call(this),this.map_=e,this.clickTimeoutId_,this.dragging_=!1,this.dragListenerKeys_=[],this.moveTolerance_=i?i*a.b:a.b,this.down_=null;var n=this.map_.getViewport();this.activePointers_=0,this.trackedTouches_={},this.pointerEventHandler_=new U(n),this.documentPointerEventHandler_=null,this.pointerdownListenerKey_=Object(c.a)(this.pointerEventHandler_,p.POINTERDOWN,this.handlePointerDown_,this),this.relayedListenerKey_=Object(c.a)(this.pointerEventHandler_,p.POINTERMOVE,this.relayEvent_,this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.emulateClick_=function(t){var e=new l.a(h.a.CLICK,this.map_,t);this.dispatchEvent(e),void 0!==this.clickTimeoutId_?(clearTimeout(this.clickTimeoutId_),this.clickTimeoutId_=void 0,e=new l.a(h.a.DBLCLICK,this.map_,t),this.dispatchEvent(e)):this.clickTimeoutId_=setTimeout(function(){this.clickTimeoutId_=void 0;var e=new l.a(h.a.SINGLECLICK,this.map_,t);this.dispatchEvent(e)}.bind(this),250)},e.prototype.updateActivePointers_=function(t){var e=t;e.type==h.a.POINTERUP||e.type==h.a.POINTERCANCEL?delete this.trackedTouches_[e.pointerId]:e.type==h.a.POINTERDOWN&&(this.trackedTouches_[e.pointerId]=!0),this.activePointers_=Object.keys(this.trackedTouches_).length},e.prototype.handlePointerUp_=function(t){this.updateActivePointers_(t);var e=new l.a(h.a.POINTERUP,this.map_,t);this.dispatchEvent(e),e.propagationStopped||this.dragging_||!this.isMouseActionButton_(t)||this.emulateClick_(this.down_),0===this.activePointers_&&(this.dragListenerKeys_.forEach(c.e),this.dragListenerKeys_.length=0,this.dragging_=!1,this.down_=null,this.documentPointerEventHandler_.dispose(),this.documentPointerEventHandler_=null)},e.prototype.isMouseActionButton_=function(t){return 0===t.button},e.prototype.handlePointerDown_=function(t){this.updateActivePointers_(t);var e=new l.a(h.a.POINTERDOWN,this.map_,t);this.dispatchEvent(e),this.down_=t,0===this.dragListenerKeys_.length&&(this.documentPointerEventHandler_=new U(document),this.dragListenerKeys_.push(Object(c.a)(this.documentPointerEventHandler_,h.a.POINTERMOVE,this.handlePointerMove_,this),Object(c.a)(this.documentPointerEventHandler_,h.a.POINTERUP,this.handlePointerUp_,this),Object(c.a)(this.pointerEventHandler_,h.a.POINTERCANCEL,this.handlePointerUp_,this)))},e.prototype.handlePointerMove_=function(t){if(this.isMoving_(t)){this.dragging_=!0;var e=new l.a(h.a.POINTERDRAG,this.map_,t,this.dragging_);this.dispatchEvent(e)}t.preventDefault()},e.prototype.relayEvent_=function(t){var e=!(!this.down_||!this.isMoving_(t));this.dispatchEvent(new l.a(t.type,this.map_,t,e))},e.prototype.isMoving_=function(t){return this.dragging_||Math.abs(t.clientX-this.down_.clientX)>this.moveTolerance_||Math.abs(t.clientY-this.down_.clientY)>this.moveTolerance_},e.prototype.disposeInternal=function(){this.relayedListenerKey_&&(Object(c.e)(this.relayedListenerKey_),this.relayedListenerKey_=null),this.pointerdownListenerKey_&&(Object(c.e)(this.pointerdownListenerKey_),this.pointerdownListenerKey_=null),this.dragListenerKeys_.forEach(c.e),this.dragListenerKeys_.length=0,this.documentPointerEventHandler_&&(this.documentPointerEventHandler_.dispose(),this.documentPointerEventHandler_=null),this.pointerEventHandler_&&(this.pointerEventHandler_.dispose(),this.pointerEventHandler_=null),t.prototype.disposeInternal.call(this)},e}(u.a),H=i(89),z="postrender",Z="movestart",q="moveend",J={LAYERGROUP:"layergroup",SIZE:"size",TARGET:"target",VIEW:"view"},Q=i(41),$=i(12),tt=i(50),et=i(104),it=i(111),nt=i(14),rt=i(9),ot=i(13),st=i(2),at=i(1),ht=i(8),lt=i(94),ct=i(49),ut=i(93),pt=i(17);var dt=function(t){function e(e){t.call(this);var i=function(t){var e=null;void 0!==t.keyboardEventTarget&&(e="string"==typeof t.keyboardEventTarget?document.getElementById(t.keyboardEventTarget):t.keyboardEventTarget);var i,n,o,s={},a=t.layers&&"function"==typeof t.layers.getLayers?t.layers:new lt.a({layers:t.layers});s[J.LAYERGROUP]=a,s[J.TARGET]=t.target,s[J.VIEW]=void 0!==t.view?t.view:new it.default,void 0!==t.controls&&(Array.isArray(t.controls)?i=new r.a(t.controls.slice()):(Object(rt.a)("function"==typeof t.controls.getArray,47),i=t.controls));void 0!==t.interactions&&(Array.isArray(t.interactions)?n=new r.a(t.interactions.slice()):(Object(rt.a)("function"==typeof t.interactions.getArray,48),n=t.interactions));void 0!==t.overlays?Array.isArray(t.overlays)?o=new r.a(t.overlays.slice()):(Object(rt.a)("function"==typeof t.overlays.getArray,49),o=t.overlays):o=new r.a;return{controls:i,interactions:n,keyboardEventTarget:e,overlays:o,values:s}}(e);this.maxTilesLoading_=void 0!==e.maxTilesLoading?e.maxTilesLoading:16,this.loadTilesWhileAnimating_=void 0!==e.loadTilesWhileAnimating&&e.loadTilesWhileAnimating,this.loadTilesWhileInteracting_=void 0!==e.loadTilesWhileInteracting&&e.loadTilesWhileInteracting,this.pixelRatio_=void 0!==e.pixelRatio?e.pixelRatio:a.b,this.animationDelayKey_,this.animationDelay_=function(){this.animationDelayKey_=void 0,this.renderFrame_.call(this,Date.now())}.bind(this),this.coordinateToPixelTransform_=Object(pt.c)(),this.pixelToCoordinateTransform_=Object(pt.c)(),this.frameIndex_=0,this.frameState_=null,this.previousExtent_=null,this.viewPropertyListenerKey_=null,this.viewChangeListenerKey_=null,this.layerGroupPropertyListenerKeys_=null,this.viewport_=document.createElement("div"),this.viewport_.className="ol-viewport"+(a.i?" ol-touch":""),this.viewport_.style.position="relative",this.viewport_.style.overflow="hidden",this.viewport_.style.width="100%",this.viewport_.style.height="100%",this.viewport_.style.msTouchAction="none",this.viewport_.style.touchAction="none",this.overlayContainer_=document.createElement("div"),this.overlayContainer_.className="ol-overlaycontainer",this.viewport_.appendChild(this.overlayContainer_),this.overlayContainerStopEvent_=document.createElement("div"),this.overlayContainerStopEvent_.className="ol-overlaycontainer-stopevent";for(var n=[st.a.CLICK,st.a.DBLCLICK,st.a.MOUSEDOWN,st.a.TOUCHSTART,st.a.MSPOINTERDOWN,h.a.POINTERDOWN,st.a.MOUSEWHEEL,st.a.WHEEL],s=0,l=n.length;s<l;++s)Object(c.a)(this.overlayContainerStopEvent_,n[s],P.b);for(var u in this.viewport_.appendChild(this.overlayContainerStopEvent_),this.mapBrowserEventHandler_=new W(this,e.moveTolerance),h.a)Object(c.a)(this.mapBrowserEventHandler_,h.a[u],this.handleMapBrowserEvent,this);this.keyboardEventTarget_=i.keyboardEventTarget,this.keyHandlerKeys_=null,Object(c.a)(this.viewport_,st.a.CONTEXTMENU,this.handleBrowserEvent,this),Object(c.a)(this.viewport_,st.a.WHEEL,this.handleBrowserEvent,this),Object(c.a)(this.viewport_,st.a.MOUSEWHEEL,this.handleBrowserEvent,this),this.controls=i.controls||new r.a,this.interactions=i.interactions||new r.a,this.overlays_=i.overlays,this.overlayIdIndex_={},this.renderer_=this.createRenderer(),this.handleResize_,this.focus_=null,this.postRenderFunctions_=[],this.tileQueue_=new et.a(this.getTilePriority.bind(this),this.handleTileChange_.bind(this)),this.skippedFeatureUids_={},Object(c.a)(this,Object($.b)(J.LAYERGROUP),this.handleLayerGroupChanged_,this),Object(c.a)(this,Object($.b)(J.VIEW),this.handleViewChanged_,this),Object(c.a)(this,Object($.b)(J.SIZE),this.handleSizeChanged_,this),Object(c.a)(this,Object($.b)(J.TARGET),this.handleTargetChanged_,this),this.setProperties(i.values),this.controls.forEach(function(t){t.setMap(this)}.bind(this)),Object(c.a)(this.controls,o.a.ADD,function(t){t.element.setMap(this)},this),Object(c.a)(this.controls,o.a.REMOVE,function(t){t.element.setMap(null)},this),this.interactions.forEach(function(t){t.setMap(this)}.bind(this)),Object(c.a)(this.interactions,o.a.ADD,function(t){t.element.setMap(this)},this),Object(c.a)(this.interactions,o.a.REMOVE,function(t){t.element.setMap(null)},this),this.overlays_.forEach(this.addOverlayInternal_.bind(this)),Object(c.a)(this.overlays_,o.a.ADD,function(t){this.addOverlayInternal_(t.element)},this),Object(c.a)(this.overlays_,o.a.REMOVE,function(t){var e=t.element.getId();void 0!==e&&delete this.overlayIdIndex_[e.toString()],t.element.setMap(null)},this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.createRenderer=function(){throw new Error("Use a map type that has a createRenderer method")},e.prototype.addControl=function(t){this.getControls().push(t)},e.prototype.addInteraction=function(t){this.getInteractions().push(t)},e.prototype.addLayer=function(t){this.getLayerGroup().getLayers().push(t)},e.prototype.addOverlay=function(t){this.getOverlays().push(t)},e.prototype.addOverlayInternal_=function(t){var e=t.getId();void 0!==e&&(this.overlayIdIndex_[e.toString()]=t),t.setMap(this)},e.prototype.disposeInternal=function(){this.mapBrowserEventHandler_.dispose(),Object(c.c)(this.viewport_,st.a.CONTEXTMENU,this.handleBrowserEvent,this),Object(c.c)(this.viewport_,st.a.WHEEL,this.handleBrowserEvent,this),Object(c.c)(this.viewport_,st.a.MOUSEWHEEL,this.handleBrowserEvent,this),void 0!==this.handleResize_&&(removeEventListener(st.a.RESIZE,this.handleResize_,!1),this.handleResize_=void 0),this.animationDelayKey_&&(cancelAnimationFrame(this.animationDelayKey_),this.animationDelayKey_=void 0),this.setTarget(null),t.prototype.disposeInternal.call(this)},e.prototype.forEachFeatureAtPixel=function(t,e,i){if(this.frameState_){var n=this.getCoordinateFromPixel(t),r=void 0!==(i=void 0!==i?i:{}).hitTolerance?i.hitTolerance*this.frameState_.pixelRatio:0,o=void 0!==i.layerFilter?i.layerFilter:ht.b;return this.renderer_.forEachFeatureAtCoordinate(n,this.frameState_,r,e,null,o,null)}},e.prototype.getFeaturesAtPixel=function(t,e){var i=null;return this.forEachFeatureAtPixel(t,function(t){i||(i=[]),i.push(t)},e),i},e.prototype.forEachLayerAtPixel=function(t,e,i){if(this.frameState_){var n=i||{},r=void 0!==n.hitTolerance?i.hitTolerance*this.frameState_.pixelRatio:0,o=n.layerFilter||ht.b;return this.renderer_.forEachLayerAtPixel(t,this.frameState_,r,e,null,o,null)}},e.prototype.hasFeatureAtPixel=function(t,e){if(!this.frameState_)return!1;var i=this.getCoordinateFromPixel(t),n=void 0!==(e=void 0!==e?e:{}).layerFilter?e.layerFilter:ht.b,r=void 0!==e.hitTolerance?e.hitTolerance*this.frameState_.pixelRatio:0;return this.renderer_.hasFeatureAtCoordinate(i,this.frameState_,r,n,null)},e.prototype.getEventCoordinate=function(t){return this.getCoordinateFromPixel(this.getEventPixel(t))},e.prototype.getEventPixel=function(t){var e=this.viewport_.getBoundingClientRect(),i="changedTouches"in t?t.changedTouches[0]:t;return[i.clientX-e.left,i.clientY-e.top]},e.prototype.getTarget=function(){return this.get(J.TARGET)},e.prototype.getTargetElement=function(){var t=this.getTarget();return void 0!==t?"string"==typeof t?document.getElementById(t):t:null},e.prototype.getCoordinateFromPixel=function(t){var e=this.frameState_;return e?Object(pt.a)(e.pixelToCoordinateTransform,t.slice()):null},e.prototype.getControls=function(){return this.controls},e.prototype.getOverlays=function(){return this.overlays_},e.prototype.getOverlayById=function(t){var e=this.overlayIdIndex_[t.toString()];return void 0!==e?e:null},e.prototype.getInteractions=function(){return this.interactions},e.prototype.getLayerGroup=function(){return this.get(J.LAYERGROUP)},e.prototype.getLayers=function(){return this.getLayerGroup().getLayers()},e.prototype.getPixelFromCoordinate=function(t){var e=this.frameState_;return e?Object(pt.a)(e.coordinateToPixelTransform,t.slice(0,2)):null},e.prototype.getRenderer=function(){return this.renderer_},e.prototype.getSize=function(){return this.get(J.SIZE)},e.prototype.getView=function(){return this.get(J.VIEW)},e.prototype.getViewport=function(){return this.viewport_},e.prototype.getOverlayContainer=function(){return this.overlayContainer_},e.prototype.getOverlayContainerStopEvent=function(){return this.overlayContainerStopEvent_},e.prototype.getTilePriority=function(t,e,i,n){var r=this.frameState_;if(!(r&&e in r.wantedTiles))return ut.a;if(!r.wantedTiles[e][t.getKey()])return ut.a;var o=i[0]-r.focus[0],s=i[1]-r.focus[1];return 65536*Math.log(n)+Math.sqrt(o*o+s*s)/n},e.prototype.handleBrowserEvent=function(t,e){var i=e||t.type,n=new s.a(i,this,t);this.handleMapBrowserEvent(n)},e.prototype.handleMapBrowserEvent=function(t){if(this.frameState_){this.focus_=t.coordinate,t.frameState=this.frameState_;var e=this.getInteractions().getArray();if(!1!==this.dispatchEvent(t))for(var i=e.length-1;i>=0;i--){var n=e[i];if(n.getActive())if(!n.handleEvent(t))break}}},e.prototype.handlePostRender=function(){var t=this.frameState_,e=this.tileQueue_;if(!e.isEmpty()){var i=this.maxTilesLoading_,n=i;if(t){var r=t.viewHints;r[nt.a.ANIMATING]&&(i=this.loadTilesWhileAnimating_?8:0,n=2),r[nt.a.INTERACTING]&&(i=this.loadTilesWhileInteracting_?8:0,n=2)}e.getTilesLoading()<i&&(e.reprioritize(),e.loadMoreTiles(i,n))}!t||!this.hasListener(Q.a.RENDERCOMPLETE)||t.animate||this.tileQueue_.getTilesLoading()||function t(e){for(var i=0,n=e.length;i<n;++i){var r=e[i];if("function"==typeof r.getLayers)return t(r.getLayers().getArray());var o=r.getSource();if(o&&o.loading)return!0}return!1}(this.getLayers().getArray())||this.renderer_.dispatchRenderEvent(Q.a.RENDERCOMPLETE,t);for(var o=this.postRenderFunctions_,s=0,a=o.length;s<a;++s)o[s](this,t);o.length=0},e.prototype.handleSizeChanged_=function(){this.render()},e.prototype.handleTargetChanged_=function(){var t;if(this.getTarget()&&(t=this.getTargetElement()),this.keyHandlerKeys_){for(var e=0,i=this.keyHandlerKeys_.length;e<i;++e)Object(c.e)(this.keyHandlerKeys_[e]);this.keyHandlerKeys_=null}if(t){t.appendChild(this.viewport_);var n=this.keyboardEventTarget_?this.keyboardEventTarget_:t;this.keyHandlerKeys_=[Object(c.a)(n,st.a.KEYDOWN,this.handleBrowserEvent,this),Object(c.a)(n,st.a.KEYPRESS,this.handleBrowserEvent,this)],this.handleResize_||(this.handleResize_=this.updateSize.bind(this),addEventListener(st.a.RESIZE,this.handleResize_,!1))}else this.renderer_.removeLayerRenderers(),Object(ot.c)(this.viewport_),void 0!==this.handleResize_&&(removeEventListener(st.a.RESIZE,this.handleResize_,!1),this.handleResize_=void 0);this.updateSize()},e.prototype.handleTileChange_=function(){this.render()},e.prototype.handleViewPropertyChanged_=function(){this.render()},e.prototype.handleViewChanged_=function(){this.viewPropertyListenerKey_&&(Object(c.e)(this.viewPropertyListenerKey_),this.viewPropertyListenerKey_=null),this.viewChangeListenerKey_&&(Object(c.e)(this.viewChangeListenerKey_),this.viewChangeListenerKey_=null);var t=this.getView();t&&(this.viewport_.setAttribute("data-view",Object(n.c)(t)),this.viewPropertyListenerKey_=Object(c.a)(t,tt.a.PROPERTYCHANGE,this.handleViewPropertyChanged_,this),this.viewChangeListenerKey_=Object(c.a)(t,st.a.CHANGE,this.handleViewPropertyChanged_,this)),this.render()},e.prototype.handleLayerGroupChanged_=function(){this.layerGroupPropertyListenerKeys_&&(this.layerGroupPropertyListenerKeys_.forEach(c.e),this.layerGroupPropertyListenerKeys_=null);var t=this.getLayerGroup();t&&(this.layerGroupPropertyListenerKeys_=[Object(c.a)(t,tt.a.PROPERTYCHANGE,this.render,this),Object(c.a)(t,st.a.CHANGE,this.render,this)]),this.render()},e.prototype.isRendered=function(){return!!this.frameState_},e.prototype.renderSync=function(){this.animationDelayKey_&&cancelAnimationFrame(this.animationDelayKey_),this.animationDelay_()},e.prototype.render=function(){void 0===this.animationDelayKey_&&(this.animationDelayKey_=requestAnimationFrame(this.animationDelay_))},e.prototype.removeControl=function(t){return this.getControls().remove(t)},e.prototype.removeInteraction=function(t){return this.getInteractions().remove(t)},e.prototype.removeLayer=function(t){return this.getLayerGroup().getLayers().remove(t)},e.prototype.removeOverlay=function(t){return this.getOverlays().remove(t)},e.prototype.renderFrame_=function(t){var e,i=this.getSize(),r=this.getView(),o=Object(at.j)(),s=this.frameState_,a=null;if(void 0!==i&&Object(ct.b)(i)&&r&&r.isDef()){for(var h=r.getHints(this.frameState_?this.frameState_.viewHints:void 0),l=this.getLayerGroup().getLayerStatesArray(),c={},u=0,p=l.length;u<p;++u)c[Object(n.c)(l[u].layer)]=l[u];e=r.getState(this.pixelRatio_),a={animate:!1,coordinateToPixelTransform:this.coordinateToPixelTransform_,extent:o,focus:this.focus_?this.focus_:e.center,index:this.frameIndex_++,layerStates:c,layerStatesArray:l,pixelRatio:this.pixelRatio_,pixelToCoordinateTransform:this.pixelToCoordinateTransform_,postRenderFunctions:[],size:i,skippedFeatureUids:this.skippedFeatureUids_,tileQueue:this.tileQueue_,time:t,usedTiles:{},viewState:e,viewHints:h,wantedTiles:{}}}if(a&&(a.extent=Object(at.z)(e.center,e.resolution,e.rotation,a.size,o)),this.frameState_=a,this.renderer_.renderFrame(a),a){if(a.animate&&this.render(),Array.prototype.push.apply(this.postRenderFunctions_,a.postRenderFunctions),s)(!this.previousExtent_||!Object(at.H)(this.previousExtent_)&&!Object(at.p)(a.extent,this.previousExtent_))&&(this.dispatchEvent(new H.a(Z,this,s)),this.previousExtent_=Object(at.l)(this.previousExtent_));this.previousExtent_&&!a.viewHints[nt.a.ANIMATING]&&!a.viewHints[nt.a.INTERACTING]&&!Object(at.p)(a.extent,this.previousExtent_)&&(this.dispatchEvent(new H.a(q,this,a)),Object(at.d)(a.extent,this.previousExtent_))}this.dispatchEvent(new H.a(z,this,a)),setTimeout(this.handlePostRender.bind(this),0)},e.prototype.setLayerGroup=function(t){this.set(J.LAYERGROUP,t)},e.prototype.setSize=function(t){this.set(J.SIZE,t)},e.prototype.setTarget=function(t){this.set(J.TARGET,t)},e.prototype.setView=function(t){this.set(J.VIEW,t)},e.prototype.skipFeature=function(t){this.skippedFeatureUids_[Object(n.c)(t)]=!0,this.render()},e.prototype.updateSize=function(){var t=this.getTargetElement();if(t){var e=getComputedStyle(t);this.setSize([t.offsetWidth-parseFloat(e.borderLeftWidth)-parseFloat(e.paddingLeft)-parseFloat(e.paddingRight)-parseFloat(e.borderRightWidth),t.offsetHeight-parseFloat(e.borderTopWidth)-parseFloat(e.paddingTop)-parseFloat(e.paddingBottom)-parseFloat(e.borderBottomWidth)])}else this.setSize(void 0)},e.prototype.unskipFeature=function(t){delete this.skippedFeatureUids_[Object(n.c)(t)],this.render()},e}($.a);var ft=function(t){function e(e){t.call(this),this.element=e.element?e.element:null,this.target_=null,this.map_=null,this.listenerKeys=[],this.render=e.render?e.render:ht.c,e.target&&this.setTarget(e.target)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.disposeInternal=function(){Object(ot.c)(this.element),t.prototype.disposeInternal.call(this)},e.prototype.getMap=function(){return this.map_},e.prototype.setMap=function(t){this.map_&&Object(ot.c)(this.element);for(var e=0,i=this.listenerKeys.length;e<i;++e)Object(c.e)(this.listenerKeys[e]);(this.listenerKeys.length=0,this.map_=t,this.map_)&&((this.target_?this.target_:t.getOverlayContainerStopEvent()).appendChild(this.element),this.render!==ht.c&&this.listenerKeys.push(Object(c.a)(t,z,this.render,this)),t.render())},e.prototype.setTarget=function(t){this.target_="string"==typeof t?document.getElementById(t):t},e}($.a),_t=i(55),gt=i(32);function yt(t){this.updateElement_(t.frameState)}var vt=function(t){function e(e){var i=e||{};t.call(this,{element:document.createElement("div"),render:i.render||yt,target:i.target}),this.ulElement_=document.createElement("ul"),this.collapsed_=void 0===i.collapsed||i.collapsed,this.overrideCollapsible_=void 0!==i.collapsible,this.collapsible_=void 0===i.collapsible||i.collapsible,this.collapsible_||(this.collapsed_=!1);var n=void 0!==i.className?i.className:"ol-attribution",r=void 0!==i.tipLabel?i.tipLabel:"Attributions",o=void 0!==i.collapseLabel?i.collapseLabel:"»";"string"==typeof o?(this.collapseLabel_=document.createElement("span"),this.collapseLabel_.textContent=o):this.collapseLabel_=o;var s=void 0!==i.label?i.label:"i";"string"==typeof s?(this.label_=document.createElement("span"),this.label_.textContent=s):this.label_=s;var a=this.collapsible_&&!this.collapsed_?this.collapseLabel_:this.label_,h=document.createElement("button");h.setAttribute("type","button"),h.title=r,h.appendChild(a),Object(c.a)(h,st.a.CLICK,this.handleClick_,this);var l=n+" "+_t.d+" "+_t.b+(this.collapsed_&&this.collapsible_?" "+_t.a:"")+(this.collapsible_?"":" ol-uncollapsible"),u=this.element;u.className=l,u.appendChild(this.ulElement_),u.appendChild(h),this.renderedAttributions_=[],this.renderedVisible_=!0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.collectSourceAttributions_=function(t){for(var e={},i=[],n=t.layerStatesArray,r=t.viewState.resolution,o=0,s=n.length;o<s;++o){var a=n[o];if(Object(gt.b)(a,r)){var h=a.layer.getSource();if(h){var l=h.getAttributions();if(l){var c=l(t);if(c)if(this.overrideCollapsible_||!1!==h.getAttributionsCollapsible()||this.setCollapsible(!1),Array.isArray(c))for(var u=0,p=c.length;u<p;++u)c[u]in e||(i.push(c[u]),e[c[u]]=!0);else c in e||(i.push(c),e[c]=!0)}}}}return i},e.prototype.updateElement_=function(t){if(t){var e=this.collectSourceAttributions_(t),i=e.length>0;if(this.renderedVisible_!=i&&(this.element.style.display=i?"":"none",this.renderedVisible_=i),!Object(k.b)(e,this.renderedAttributions_)){Object(ot.b)(this.ulElement_);for(var n=0,r=e.length;n<r;++n){var o=document.createElement("li");o.innerHTML=e[n],this.ulElement_.appendChild(o)}this.renderedAttributions_=e}}else this.renderedVisible_&&(this.element.style.display="none",this.renderedVisible_=!1)},e.prototype.handleClick_=function(t){t.preventDefault(),this.handleToggle_()},e.prototype.handleToggle_=function(){this.element.classList.toggle(_t.a),this.collapsed_?Object(ot.d)(this.collapseLabel_,this.label_):Object(ot.d)(this.label_,this.collapseLabel_),this.collapsed_=!this.collapsed_},e.prototype.getCollapsible=function(){return this.collapsible_},e.prototype.setCollapsible=function(t){this.collapsible_!==t&&(this.collapsible_=t,this.element.classList.toggle("ol-uncollapsible"),!t&&this.collapsed_&&this.handleToggle_())},e.prototype.setCollapsed=function(t){this.collapsible_&&this.collapsed_!==t&&this.handleToggle_()},e.prototype.getCollapsed=function(){return this.collapsed_},e}(ft),mt=i(24);function bt(t){var e=t.frameState;if(e){var i=e.viewState.rotation;if(i!=this.rotation_){var n="rotate("+i+"rad)";if(this.autoHide_){var r=this.element.classList.contains(_t.c);r||0!==i?r&&0!==i&&this.element.classList.remove(_t.c):this.element.classList.add(_t.c)}this.label_.style.msTransform=n,this.label_.style.webkitTransform=n,this.label_.style.transform=n}this.rotation_=i}}var Et=function(t){function e(e){var i=e||{};t.call(this,{element:document.createElement("div"),render:i.render||bt,target:i.target});var n=void 0!==i.className?i.className:"ol-rotate",r=void 0!==i.label?i.label:"⇧";this.label_=null,"string"==typeof r?(this.label_=document.createElement("span"),this.label_.className="ol-compass",this.label_.textContent=r):(this.label_=r,this.label_.classList.add("ol-compass"));var o=i.tipLabel?i.tipLabel:"Reset rotation",s=document.createElement("button");s.className=n+"-reset",s.setAttribute("type","button"),s.title=o,s.appendChild(this.label_),Object(c.a)(s,st.a.CLICK,this.handleClick_,this);var a=n+" "+_t.d+" "+_t.b,h=this.element;h.className=a,h.appendChild(s),this.callResetNorth_=i.resetNorth?i.resetNorth:void 0,this.duration_=void 0!==i.duration?i.duration:250,this.autoHide_=void 0===i.autoHide||i.autoHide,this.rotation_=void 0,this.autoHide_&&this.element.classList.add(_t.c)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleClick_=function(t){t.preventDefault(),void 0!==this.callResetNorth_?this.callResetNorth_():this.resetNorth_()},e.prototype.resetNorth_=function(){var t=this.getMap().getView();t&&void 0!==t.getRotation()&&(this.duration_>0?t.animate({rotation:0,duration:this.duration_,easing:mt.b}):t.setRotation(0))},e}(ft),Ot=function(t){function e(e){var i=e||{};t.call(this,{element:document.createElement("div"),target:i.target});var n=void 0!==i.className?i.className:"ol-zoom",r=void 0!==i.delta?i.delta:1,o=void 0!==i.zoomInLabel?i.zoomInLabel:"+",s=void 0!==i.zoomOutLabel?i.zoomOutLabel:"−",a=void 0!==i.zoomInTipLabel?i.zoomInTipLabel:"Zoom in",h=void 0!==i.zoomOutTipLabel?i.zoomOutTipLabel:"Zoom out",l=document.createElement("button");l.className=n+"-in",l.setAttribute("type","button"),l.title=a,l.appendChild("string"==typeof o?document.createTextNode(o):o),Object(c.a)(l,st.a.CLICK,this.handleClick_.bind(this,r));var u=document.createElement("button");u.className=n+"-out",u.setAttribute("type","button"),u.title=h,u.appendChild("string"==typeof s?document.createTextNode(s):s),Object(c.a)(u,st.a.CLICK,this.handleClick_.bind(this,-r));var p=n+" "+_t.d+" "+_t.b,d=this.element;d.className=p,d.appendChild(l),d.appendChild(u),this.duration_=void 0!==i.duration?i.duration:250}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.handleClick_=function(t,e){e.preventDefault(),this.zoomByDelta_(t)},e.prototype.zoomByDelta_=function(t){var e=this.getMap().getView();if(e){var i=e.getResolution();if(i){var n=e.constrainResolution(i,t);this.duration_>0?(e.getAnimating()&&e.cancelAnimations(),e.animate({resolution:n,duration:this.duration_,easing:mt.b})):e.setResolution(n)}}},e}(ft);var xt=i(110),Ct=i(5),Tt=i(101),Rt=i(96),St=i(91),It=i(29),jt=i(62),wt=i.n(jt),Lt=i(38),Ft=i(68),Mt=function(){};Mt.prototype.getReplay=function(t,e){return Object(n.b)()},Mt.prototype.isEmpty=function(){return Object(n.b)()},Mt.prototype.addDeclutter=function(t){return Object(n.b)()};var Pt=Mt,At={CIRCLE:"Circle",DEFAULT:"Default",IMAGE:"Image",LINE_STRING:"LineString",POLYGON:"Polygon",TEXT:"Text"},Dt=i(69),Nt=i(107),kt=i(10),Gt=i(22),Yt=i(84),Xt=i(6);function Kt(t,e,i,n,r,o,s,a){for(var h,l,c,u=[],p=t[e]>t[i-n],d=r.length,f=t[e],_=t[e+1],g=t[e+=n],y=t[e+1],v=0,m=Math.sqrt(Math.pow(g-f,2)+Math.pow(y-_,2)),b="",E=0,O=0;O<d;++O){l=p?d-O-1:O;var x=r.charAt(l),C=o(b=p?x+b:b+x)-E;E+=C;for(var T=s+C/2;e<i-n&&v+m<T;)f=g,_=y,g=t[e+=n],y=t[e+1],v+=m,m=Math.sqrt(Math.pow(g-f,2)+Math.pow(y-_,2));var R=T-v,S=Math.atan2(y-_,g-f);if(p&&(S+=S>0?-Math.PI:Math.PI),void 0!==c){var I=S-c;if(I+=I>Math.PI?-2*Math.PI:I<-Math.PI?2*Math.PI:0,Math.abs(I)>a)return null}var j=R/m,w=Object(Xt.c)(f,g,j),L=Object(Xt.c)(_,y,j);c==S?(p&&(h[0]=w,h[1]=L,h[2]=C/2),h[4]=b):(E=C,h=[w,L,C/2,S,b=x],p?u.unshift(h):u.push(h),c=S),s+=C}return u}var Bt=i(90),Vt={BEGIN_GEOMETRY:0,BEGIN_PATH:1,CIRCLE:2,CLOSE_PATH:3,CUSTOM:4,DRAW_CHARS:5,DRAW_IMAGE:6,END_GEOMETRY:7,FILL:8,MOVE_TO_LINE_TO:9,SET_FILL_STYLE:10,SET_STROKE_STYLE:11,STROKE:12},Ut=[Vt.FILL],Wt=[Vt.STROKE],Ht=[Vt.BEGIN_PATH],zt=[Vt.CLOSE_PATH],Zt=Vt,qt=[At.POLYGON,At.CIRCLE,At.LINE_STRING,At.IMAGE,At.TEXT,At.DEFAULT],Jt={left:0,end:0,center:.5,right:1,start:1,top:0,middle:.5,hanging:.2,alphabetic:.8,ideographic:.8,bottom:1},Qt=Object(at.j)(),$t=Object(pt.c)(),te=function(t){function e(e,i,n,r,o,s){t.call(this),this.declutterTree=s,this.tolerance=e,this.maxExtent=i,this.overlaps=o,this.pixelRatio=r,this.maxLineWidth=0,this.resolution=n,this.alignFill_,this.beginGeometryInstruction1_=null,this.beginGeometryInstruction2_=null,this.bufferedMaxExtent_=null,this.instructions=[],this.coordinates=[],this.coordinateCache_={},this.renderedTransform_=Object(pt.c)(),this.hitDetectionInstructions=[],this.pixelCoordinates_=null,this.state={},this.viewRotation_=0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.replayTextBackground_=function(t,e,i,n,r,o,s){t.beginPath(),t.moveTo.apply(t,e),t.lineTo.apply(t,i),t.lineTo.apply(t,n),t.lineTo.apply(t,r),t.lineTo.apply(t,e),o&&(this.alignFill_=o[2],this.fill_(t)),s&&(this.setStrokeStyle_(t,s),t.stroke())},e.prototype.replayImage_=function(t,e,i,n,r,o,s,a,h,l,c,u,p,d,f,_,g,y){var v=g||y;e-=r*=p,i-=o*=p;var m,b,E,O,x=f+l>n.width?n.width-l:f,C=a+c>n.height?n.height-c:a,T=_[3]+x*p+_[1],R=_[0]+C*p+_[2],S=e-_[3],I=i-_[0];(v||0!==u)&&(m=[S,I],b=[S+T,I],E=[S+T,I+R],O=[S,I+R]);var j=null;if(0!==u){var w=e+r,L=i+o;j=Object(pt.b)($t,w,L,1,1,u,-w,-L),Object(at.l)(Qt),Object(at.r)(Qt,Object(pt.a)($t,m)),Object(at.r)(Qt,Object(pt.a)($t,b)),Object(at.r)(Qt,Object(pt.a)($t,E)),Object(at.r)(Qt,Object(pt.a)($t,O))}else Object(at.k)(S,I,S+T,I+R,Qt);var F=t.canvas,M=y?y[2]*p/2:0,P=Qt[0]-M<=F.width&&Qt[2]+M>=0&&Qt[1]-M<=F.height&&Qt[3]+M>=0;if(d&&(e=Math.round(e),i=Math.round(i)),s){if(!P&&1==s[4])return;Object(at.q)(s,Qt);var A=P?[t,j?j.slice(0):null,h,n,l,c,x,C,e,i,p]:null;A&&v&&A.push(g,y,m,b,E,O),s.push(A)}else P&&(v&&this.replayTextBackground_(t,m,b,E,O,g,y),Object(Lt.n)(t,j,h,n,l,c,x,C,e,i,p))},e.prototype.applyPixelRatio=function(t){var e=this.pixelRatio;return 1==e?t:t.map(function(t){return t*e})},e.prototype.appendFlatCoordinates=function(t,e,i,n,r,o){var s=this.coordinates.length,a=this.getBufferedMaxExtent();o&&(e+=n);var h,l,c,u=[t[e],t[e+1]],p=[NaN,NaN],d=!0;for(h=e+n;h<i;h+=n)p[0]=t[h],p[1]=t[h+1],(c=Object(at.i)(a,p))!==l?(d&&(this.coordinates[s++]=u[0],this.coordinates[s++]=u[1]),this.coordinates[s++]=p[0],this.coordinates[s++]=p[1],d=!1):c===Nt.a.INTERSECTING?(this.coordinates[s++]=p[0],this.coordinates[s++]=p[1],d=!1):d=!0,u[0]=p[0],u[1]=p[1],l=c;return(r&&d||h===e+n)&&(this.coordinates[s++]=u[0],this.coordinates[s++]=u[1]),s},e.prototype.drawCustomCoordinates_=function(t,e,i,n,r){for(var o=0,s=i.length;o<s;++o){var a=i[o],h=this.appendFlatCoordinates(t,e,a,n,!1,!1);r.push(h),e=a}return e},e.prototype.drawCustom=function(t,e,i){this.beginGeometry(t,e);var n,r,o,s,a,h=t.getType(),l=t.getStride(),c=this.coordinates.length;if(h==kt.a.MULTI_POLYGON){n=(t=t).getOrientedFlatCoordinates(),s=[];var u=t.getEndss();a=0;for(var p=0,d=u.length;p<d;++p){var f=[];a=this.drawCustomCoordinates_(n,a,u[p],l,f),s.push(f)}this.instructions.push([Zt.CUSTOM,c,s,t,i,Gt.c])}else h==kt.a.POLYGON||h==kt.a.MULTI_LINE_STRING?(o=[],n=h==kt.a.POLYGON?t.getOrientedFlatCoordinates():t.getFlatCoordinates(),a=this.drawCustomCoordinates_(n,0,t.getEnds(),l,o),this.instructions.push([Zt.CUSTOM,c,o,t,i,Gt.b])):h==kt.a.LINE_STRING||h==kt.a.MULTI_POINT?(n=t.getFlatCoordinates(),r=this.appendFlatCoordinates(n,0,n.length,l,!1,!1),this.instructions.push([Zt.CUSTOM,c,r,t,i,Gt.a])):h==kt.a.POINT&&(n=t.getFlatCoordinates(),this.coordinates.push(n[0],n[1]),r=this.coordinates.length,this.instructions.push([Zt.CUSTOM,c,r,t,i]));this.endGeometry(t,e)},e.prototype.beginGeometry=function(t,e){this.beginGeometryInstruction1_=[Zt.BEGIN_GEOMETRY,e,0],this.instructions.push(this.beginGeometryInstruction1_),this.beginGeometryInstruction2_=[Zt.BEGIN_GEOMETRY,e,0],this.hitDetectionInstructions.push(this.beginGeometryInstruction2_)},e.prototype.finish=function(){},e.prototype.fill_=function(t){if(this.alignFill_){var e=Object(pt.a)(this.renderedTransform_,[0,0]),i=512*this.pixelRatio;t.translate(e[0]%i,e[1]%i),t.rotate(this.viewRotation_)}t.fill(),this.alignFill_&&t.setTransform.apply(t,Lt.r)},e.prototype.setStrokeStyle_=function(t,e){t.strokeStyle=e[1],t.lineWidth=e[2],t.lineCap=e[3],t.lineJoin=e[4],t.miterLimit=e[5],a.a&&(t.lineDashOffset=e[7],t.setLineDash(e[6]))},e.prototype.renderDeclutter_=function(t,e){if(t&&t.length>5){var i=t[4];if(1==i||i==t.length-5){var n={minX:t[0],minY:t[1],maxX:t[2],maxY:t[3],value:e};if(!this.declutterTree.collides(n)){this.declutterTree.insert(n);for(var r=5,o=t.length;r<o;++r){var s=t[r];s&&(s.length>11&&this.replayTextBackground_(s[0],s[13],s[14],s[15],s[16],s[11],s[12]),Lt.n.apply(void 0,s))}}t.length=5,Object(at.l)(t)}}},e.prototype.replay_=function(t,e,i,r,o,s,a){var h;this.pixelCoordinates_&&Object(k.b)(e,this.renderedTransform_)?h=this.pixelCoordinates_:(this.pixelCoordinates_||(this.pixelCoordinates_=[]),h=Object(Ft.c)(this.coordinates,0,this.coordinates.length,2,e,this.pixelCoordinates_),Object(pt.g)(this.renderedTransform_,e));for(var l,c,u,p,d,f,_,g,y,v,m,b,E=!Object(Ct.d)(i),O=0,x=r.length,C=0,T=0,R=0,S=null,I=null,j=this.coordinateCache_,w=this.viewRotation_,L={context:t,pixelRatio:this.pixelRatio,resolution:this.resolution,rotation:w},F=this.instructions!=r||this.overlaps?0:200;O<x;){var M=r[O];switch(M[0]){case Zt.BEGIN_GEOMETRY:v=M[1],E&&i[Object(n.c)(v)]||!v.getGeometry()?O=M[2]:void 0===a||Object(at.F)(a,v.getGeometry().getExtent())?++O:O=M[2]+1;break;case Zt.BEGIN_PATH:T>F&&(this.fill_(t),T=0),R>F&&(t.stroke(),R=0),T||R||(t.beginPath(),p=d=NaN),++O;break;case Zt.CIRCLE:var P=h[C=M[1]],A=h[C+1],D=h[C+2]-P,N=h[C+3]-A,G=Math.sqrt(D*D+N*N);t.moveTo(P+G,A),t.arc(P,A,G,0,2*Math.PI,!0),++O;break;case Zt.CLOSE_PATH:t.closePath(),++O;break;case Zt.CUSTOM:C=M[1],l=M[2];var Y=M[3],X=M[4],K=6==M.length?M[5]:void 0;L.geometry=Y,L.feature=v,O in j||(j[O]=[]);var B=j[O];K?K(h,C,l,2,B):(B[0]=h[C],B[1]=h[C+1],B.length=2),X(B,L),++O;break;case Zt.DRAW_IMAGE:C=M[1],l=M[2],y=M[3],c=M[4],u=M[5],g=s?null:M[6];var V=M[7],U=M[8],W=M[9],H=M[10],z=M[11],Z=M[12],q=M[13],J=M[14],Q=void 0,$=void 0,tt=void 0;for(M.length>16?(Q=M[15],$=M[16],tt=M[17]):(Q=Lt.j,$=tt=!1),z&&(Z+=w);C<l;C+=2)this.replayImage_(t,h[C],h[C+1],y,c,u,g,V,U,W,H,Z,q,o,J,Q,$?S:null,tt?I:null);this.renderDeclutter_(g,v),++O;break;case Zt.DRAW_CHARS:var et=M[1],it=M[2],nt=M[3];g=s?null:M[4];var rt=M[5],ot=M[6],st=M[7],ht=M[8],lt=M[9],ct=M[10],ut=M[11],dt=M[12],ft=M[13],_t=M[14],gt=Object(Yt.a)(h,et,it,2),yt=ht(dt);if(rt||yt<=gt){var vt=this.textStates[ft].textAlign,mt=Kt(h,et,it,2,dt,ht,(gt-yt)*Jt[vt],st);if(mt){var bt=void 0,Et=void 0,Ot=void 0,xt=void 0,Tt=void 0;if(ct)for(bt=0,Et=mt.length;bt<Et;++bt)Ot=(Tt=mt[bt])[4],xt=this.getImage(Ot,ft,"",ct),c=Tt[2]+ut,u=nt*xt.height+2*(.5-nt)*ut-lt,this.replayImage_(t,Tt[0],Tt[1],xt,c,u,g,xt.height,1,0,0,Tt[3],_t,!1,xt.width,Lt.j,null,null);if(ot)for(bt=0,Et=mt.length;bt<Et;++bt)Ot=(Tt=mt[bt])[4],xt=this.getImage(Ot,ft,ot,""),c=Tt[2],u=nt*xt.height-lt,this.replayImage_(t,Tt[0],Tt[1],xt,c,u,g,xt.height,1,0,0,Tt[3],_t,!1,xt.width,Lt.j,null,null)}}this.renderDeclutter_(g,v),++O;break;case Zt.END_GEOMETRY:if(void 0!==s){var Rt=s(v=M[1]);if(Rt)return Rt}++O;break;case Zt.FILL:F?T++:this.fill_(t),++O;break;case Zt.MOVE_TO_LINE_TO:for(C=M[1],l=M[2],m=h[C],_=(b=h[C+1])+.5|0,(f=m+.5|0)===p&&_===d||(t.moveTo(m,b),p=f,d=_),C+=2;C<l;C+=2)f=(m=h[C])+.5|0,_=(b=h[C+1])+.5|0,C!=l-2&&f===p&&_===d||(t.lineTo(m,b),p=f,d=_);++O;break;case Zt.SET_FILL_STYLE:S=M,this.alignFill_=M[2],T&&(this.fill_(t),T=0,R&&(t.stroke(),R=0)),t.fillStyle=M[1],++O;break;case Zt.SET_STROKE_STYLE:I=M,R&&(t.stroke(),R=0),this.setStrokeStyle_(t,M),++O;break;case Zt.STROKE:F?R++:t.stroke(),++O;break;default:++O}}T&&this.fill_(t),R&&t.stroke()},e.prototype.replay=function(t,e,i,n,r){this.viewRotation_=i,this.replay_(t,e,n,this.instructions,r,void 0,void 0)},e.prototype.replayHitDetection=function(t,e,i,n,r,o){return this.viewRotation_=i,this.replay_(t,e,n,this.hitDetectionInstructions,!0,r,o)},e.prototype.reverseHitDetectionInstructions=function(){var t,e=this.hitDetectionInstructions;e.reverse();var i,n,r=e.length,o=-1;for(t=0;t<r;++t)(n=(i=e[t])[0])==Zt.END_GEOMETRY?o=t:n==Zt.BEGIN_GEOMETRY&&(i[2]=t,Object(k.k)(this.hitDetectionInstructions,o,t),o=-1)},e.prototype.setFillStrokeStyle=function(t,e){var i=this.state;if(t){var n=t.getColor();i.fillStyle=Object(Dt.a)(n||Lt.b)}else i.fillStyle=void 0;if(e){var r=e.getColor();i.strokeStyle=Object(Dt.a)(r||Lt.k);var o=e.getLineCap();i.lineCap=void 0!==o?o:Lt.d;var s=e.getLineDash();i.lineDash=s?s.slice():Lt.e;var a=e.getLineDashOffset();i.lineDashOffset=a||Lt.f;var h=e.getLineJoin();i.lineJoin=void 0!==h?h:Lt.g;var l=e.getWidth();i.lineWidth=void 0!==l?l:Lt.h;var c=e.getMiterLimit();i.miterLimit=void 0!==c?c:Lt.i,i.lineWidth>this.maxLineWidth&&(this.maxLineWidth=i.lineWidth,this.bufferedMaxExtent_=null)}else i.strokeStyle=void 0,i.lineCap=void 0,i.lineDash=null,i.lineDashOffset=void 0,i.lineJoin=void 0,i.lineWidth=void 0,i.miterLimit=void 0},e.prototype.createFill=function(t,e){var i=t.fillStyle,n=[Zt.SET_FILL_STYLE,i];return"string"!=typeof i&&n.push(!0),n},e.prototype.applyStroke=function(t){this.instructions.push(this.createStroke(t))},e.prototype.createStroke=function(t){return[Zt.SET_STROKE_STYLE,t.strokeStyle,t.lineWidth*this.pixelRatio,t.lineCap,t.lineJoin,t.miterLimit,this.applyPixelRatio(t.lineDash),t.lineDashOffset*this.pixelRatio]},e.prototype.updateFillStyle=function(t,e,i){var n=t.fillStyle;"string"==typeof n&&t.currentFillStyle==n||(void 0!==n&&this.instructions.push(e.call(this,t,i)),t.currentFillStyle=n)},e.prototype.updateStrokeStyle=function(t,e){var i=t.strokeStyle,n=t.lineCap,r=t.lineDash,o=t.lineDashOffset,s=t.lineJoin,a=t.lineWidth,h=t.miterLimit;(t.currentStrokeStyle!=i||t.currentLineCap!=n||r!=t.currentLineDash&&!Object(k.b)(t.currentLineDash,r)||t.currentLineDashOffset!=o||t.currentLineJoin!=s||t.currentLineWidth!=a||t.currentMiterLimit!=h)&&(void 0!==i&&e.call(this,t),t.currentStrokeStyle=i,t.currentLineCap=n,t.currentLineDash=r,t.currentLineDashOffset=o,t.currentLineJoin=s,t.currentLineWidth=a,t.currentMiterLimit=h)},e.prototype.endGeometry=function(t,e){this.beginGeometryInstruction1_[2]=this.instructions.length,this.beginGeometryInstruction1_=null,this.beginGeometryInstruction2_[2]=this.hitDetectionInstructions.length,this.beginGeometryInstruction2_=null;var i=[Zt.END_GEOMETRY,e];this.instructions.push(i),this.hitDetectionInstructions.push(i)},e.prototype.getBufferedMaxExtent=function(){if(!this.bufferedMaxExtent_&&(this.bufferedMaxExtent_=Object(at.d)(this.maxExtent),this.maxLineWidth>0)){var t=this.resolution*(this.maxLineWidth+1)/2;Object(at.c)(this.bufferedMaxExtent_,t,this.bufferedMaxExtent_)}return this.bufferedMaxExtent_},e}(Bt.a),ee=function(t){function e(e,i,n,r,o,s){t.call(this,e,i,n,r,o,s),this.declutterGroup_=null,this.hitDetectionImage_=null,this.image_=null,this.anchorX_=void 0,this.anchorY_=void 0,this.height_=void 0,this.opacity_=void 0,this.originX_=void 0,this.originY_=void 0,this.rotateWithView_=void 0,this.rotation_=void 0,this.scale_=void 0,this.width_=void 0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.drawCoordinates_=function(t,e,i,n){return this.appendFlatCoordinates(t,e,i,n,!1,!1)},e.prototype.drawPoint=function(t,e){if(this.image_){this.beginGeometry(t,e);var i=t.getFlatCoordinates(),n=t.getStride(),r=this.coordinates.length,o=this.drawCoordinates_(i,0,i.length,n);this.instructions.push([Zt.DRAW_IMAGE,r,o,this.image_,this.anchorX_,this.anchorY_,this.declutterGroup_,this.height_,this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_*this.pixelRatio,this.width_]),this.hitDetectionInstructions.push([Zt.DRAW_IMAGE,r,o,this.hitDetectionImage_,this.anchorX_,this.anchorY_,this.declutterGroup_,this.height_,this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_,this.width_]),this.endGeometry(t,e)}},e.prototype.drawMultiPoint=function(t,e){if(this.image_){this.beginGeometry(t,e);var i=t.getFlatCoordinates(),n=t.getStride(),r=this.coordinates.length,o=this.drawCoordinates_(i,0,i.length,n);this.instructions.push([Zt.DRAW_IMAGE,r,o,this.image_,this.anchorX_,this.anchorY_,this.declutterGroup_,this.height_,this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_*this.pixelRatio,this.width_]),this.hitDetectionInstructions.push([Zt.DRAW_IMAGE,r,o,this.hitDetectionImage_,this.anchorX_,this.anchorY_,this.declutterGroup_,this.height_,this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_,this.width_]),this.endGeometry(t,e)}},e.prototype.finish=function(){this.reverseHitDetectionInstructions(),this.anchorX_=void 0,this.anchorY_=void 0,this.hitDetectionImage_=null,this.image_=null,this.height_=void 0,this.scale_=void 0,this.opacity_=void 0,this.originX_=void 0,this.originY_=void 0,this.rotateWithView_=void 0,this.rotation_=void 0,this.width_=void 0},e.prototype.setImageStyle=function(t,e){var i=t.getAnchor(),n=t.getSize(),r=t.getHitDetectionImage(1),o=t.getImage(1),s=t.getOrigin();this.anchorX_=i[0],this.anchorY_=i[1],this.declutterGroup_=e,this.hitDetectionImage_=r,this.image_=o,this.height_=n[1],this.opacity_=t.getOpacity(),this.originX_=s[0],this.originY_=s[1],this.rotateWithView_=t.getRotateWithView(),this.rotation_=t.getRotation(),this.scale_=t.getScale(),this.width_=n[0]},e}(te),ie=function(t){function e(e,i,n,r,o,s){t.call(this,e,i,n,r,o,s)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.drawFlatCoordinates_=function(t,e,i,n){var r=this.coordinates.length,o=this.appendFlatCoordinates(t,e,i,n,!1,!1),s=[Zt.MOVE_TO_LINE_TO,r,o];return this.instructions.push(s),this.hitDetectionInstructions.push(s),i},e.prototype.drawLineString=function(t,e){var i=this.state,n=i.strokeStyle,r=i.lineWidth;if(void 0!==n&&void 0!==r){this.updateStrokeStyle(i,this.applyStroke),this.beginGeometry(t,e),this.hitDetectionInstructions.push([Zt.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset],Ht);var o=t.getFlatCoordinates(),s=t.getStride();this.drawFlatCoordinates_(o,0,o.length,s),this.hitDetectionInstructions.push(Wt),this.endGeometry(t,e)}},e.prototype.drawMultiLineString=function(t,e){var i=this.state,n=i.strokeStyle,r=i.lineWidth;if(void 0!==n&&void 0!==r){this.updateStrokeStyle(i,this.applyStroke),this.beginGeometry(t,e),this.hitDetectionInstructions.push([Zt.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset],Ht);for(var o=t.getEnds(),s=t.getFlatCoordinates(),a=t.getStride(),h=0,l=0,c=o.length;l<c;++l)h=this.drawFlatCoordinates_(s,h,o[l],a);this.hitDetectionInstructions.push(Wt),this.endGeometry(t,e)}},e.prototype.finish=function(){var t=this.state;null!=t.lastStroke&&t.lastStroke!=this.coordinates.length&&this.instructions.push(Wt),this.reverseHitDetectionInstructions(),this.state=null},e.prototype.applyStroke=function(e){null!=e.lastStroke&&e.lastStroke!=this.coordinates.length&&(this.instructions.push(Wt),e.lastStroke=this.coordinates.length),e.lastStroke=0,t.prototype.applyStroke.call(this,e),this.instructions.push(Ht)},e}(te),ne=i(44),re=i(27),oe=function(t){function e(e,i,n,r,o,s){t.call(this,e,i,n,r,o,s)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.drawFlatCoordinatess_=function(t,e,i,n){var r=this.state,o=void 0!==r.fillStyle,s=null!=r.strokeStyle,a=i.length;this.instructions.push(Ht),this.hitDetectionInstructions.push(Ht);for(var h=0;h<a;++h){var l=i[h],c=this.coordinates.length,u=this.appendFlatCoordinates(t,e,l,n,!0,!s),p=[Zt.MOVE_TO_LINE_TO,c,u];this.instructions.push(p),this.hitDetectionInstructions.push(p),s&&(this.instructions.push(zt),this.hitDetectionInstructions.push(zt)),e=l}return o&&(this.instructions.push(Ut),this.hitDetectionInstructions.push(Ut)),s&&(this.instructions.push(Wt),this.hitDetectionInstructions.push(Wt)),e},e.prototype.drawCircle=function(t,e){var i=this.state,n=i.fillStyle,r=i.strokeStyle;if(void 0!==n||void 0!==r){this.setFillStrokeStyles_(t),this.beginGeometry(t,e),void 0!==i.fillStyle&&this.hitDetectionInstructions.push([Zt.SET_FILL_STYLE,Object(ne.b)(Lt.b)]),void 0!==i.strokeStyle&&this.hitDetectionInstructions.push([Zt.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset]);var o=t.getFlatCoordinates(),s=t.getStride(),a=this.coordinates.length;this.appendFlatCoordinates(o,0,o.length,s,!1,!1);var h=[Zt.CIRCLE,a];this.instructions.push(Ht,h),this.hitDetectionInstructions.push(Ht,h),this.hitDetectionInstructions.push(Ut),void 0!==i.fillStyle&&this.instructions.push(Ut),void 0!==i.strokeStyle&&(this.instructions.push(Wt),this.hitDetectionInstructions.push(Wt)),this.endGeometry(t,e)}},e.prototype.drawPolygon=function(t,e){var i=this.state,n=i.fillStyle,r=i.strokeStyle;if(void 0!==n||void 0!==r){this.setFillStrokeStyles_(t),this.beginGeometry(t,e),void 0!==i.fillStyle&&this.hitDetectionInstructions.push([Zt.SET_FILL_STYLE,Object(ne.b)(Lt.b)]),void 0!==i.strokeStyle&&this.hitDetectionInstructions.push([Zt.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset]);var o=t.getEnds(),s=t.getOrientedFlatCoordinates(),a=t.getStride();this.drawFlatCoordinatess_(s,0,o,a),this.endGeometry(t,e)}},e.prototype.drawMultiPolygon=function(t,e){var i=this.state,n=i.fillStyle,r=i.strokeStyle;if(void 0!==n||void 0!==r){this.setFillStrokeStyles_(t),this.beginGeometry(t,e),void 0!==i.fillStyle&&this.hitDetectionInstructions.push([Zt.SET_FILL_STYLE,Object(ne.b)(Lt.b)]),void 0!==i.strokeStyle&&this.hitDetectionInstructions.push([Zt.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset]);for(var o=t.getEndss(),s=t.getOrientedFlatCoordinates(),a=t.getStride(),h=0,l=0,c=o.length;l<c;++l)h=this.drawFlatCoordinatess_(s,h,o[l],a);this.endGeometry(t,e)}},e.prototype.finish=function(){this.reverseHitDetectionInstructions(),this.state=null;var t=this.tolerance;if(0!==t)for(var e=this.coordinates,i=0,n=e.length;i<n;++i)e[i]=Object(re.e)(e[i],t)},e.prototype.setFillStrokeStyles_=function(t){var e=this.state;void 0!==e.fillStyle&&this.updateFillStyle(e,this.createFill,t),void 0!==e.strokeStyle&&this.updateStrokeStyle(e,this.applyStroke)},e}(te);function se(t,e,i,n,r){var o,s,a,h,l,c,u,p,d,f=i,_=i,g=0,y=0,v=i;for(o=i;o<n;o+=r){var m=e[o],b=e[o+1];void 0!==h&&(p=m-h,d=b-l,a=Math.sqrt(p*p+d*d),void 0!==c&&(y+=s,Math.acos((c*p+u*d)/(s*a))>t&&(y>g&&(g=y,f=v,_=o),y=0,v=o-r)),s=a,c=p,u=d),h=m,l=b}return(y+=a)>g?[v,o]:[f,_]}var ae=i(102);var he={Circle:oe,Default:te,Image:ee,LineString:ie,Polygon:oe,Text:function(t){function e(e,i,n,r,o,s){t.call(this,e,i,n,r,o,s),this.declutterGroup_,this.labels_=null,this.text_="",this.textOffsetX_=0,this.textOffsetY_=0,this.textRotateWithView_=void 0,this.textRotation_=0,this.textFillState_=null,this.fillStates={},this.textStrokeState_=null,this.strokeStates={},this.textState_={},this.textStates={},this.textKey_="",this.fillKey_="",this.strokeKey_="",this.widths_={},Lt.o.prune()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.drawText=function(t,e){var i=this.textFillState_,n=this.textStrokeState_,r=this.textState_;if(""!==this.text_&&r&&(i||n)){var o,s,a=this.coordinates.length,h=t.getType(),l=null,c=2,u=2;if(r.placement===ae.a.LINE){if(!Object(at.F)(this.getBufferedMaxExtent(),t.getExtent()))return;var p;if(l=t.getFlatCoordinates(),u=t.getStride(),h==kt.a.LINE_STRING)p=[l.length];else if(h==kt.a.MULTI_LINE_STRING)p=t.getEnds();else if(h==kt.a.POLYGON)p=t.getEnds().slice(0,1);else if(h==kt.a.MULTI_POLYGON){var d=t.getEndss();for(p=[],o=0,s=d.length;o<s;++o)p.push(d[o][0])}this.beginGeometry(t,e);for(var f,_=r.textAlign,g=0,y=0,v=p.length;y<v;++y){if(null==_){var m=se(r.maxAngle,l,g,p[y],u);g=m[0],f=m[1]}else f=p[y];for(o=g;o<f;o+=u)this.coordinates.push(l[o],l[o+1]);c=this.coordinates.length,g=p[y],this.drawChars_(a,c,this.declutterGroup_),a=c}this.endGeometry(t,e)}else{var b=this.getImage(this.text_,this.textKey_,this.fillKey_,this.strokeKey_),E=b.width/this.pixelRatio;switch(h){case kt.a.POINT:case kt.a.MULTI_POINT:c=(l=t.getFlatCoordinates()).length;break;case kt.a.LINE_STRING:l=t.getFlatMidpoint();break;case kt.a.CIRCLE:l=t.getCenter();break;case kt.a.MULTI_LINE_STRING:c=(l=t.getFlatMidpoints()).length;break;case kt.a.POLYGON:if(l=t.getFlatInteriorPoint(),!r.overflow&&l[2]/this.resolution<E)return;u=3;break;case kt.a.MULTI_POLYGON:var O=t.getFlatInteriorPoints();for(l=[],o=0,s=O.length;o<s;o+=3)(r.overflow||O[o+2]/this.resolution>=E)&&l.push(O[o],O[o+1]);if(0==(c=l.length))return}c=this.appendFlatCoordinates(l,0,c,u,!1,!1),(r.backgroundFill||r.backgroundStroke)&&(this.setFillStrokeStyle(r.backgroundFill,r.backgroundStroke),r.backgroundFill&&(this.updateFillStyle(this.state,this.createFill,t),this.hitDetectionInstructions.push(this.createFill(this.state,t))),r.backgroundStroke&&(this.updateStrokeStyle(this.state,this.applyStroke),this.hitDetectionInstructions.push(this.createStroke(this.state)))),this.beginGeometry(t,e),this.drawTextImage_(b,a,c),this.endGeometry(t,e)}}},e.prototype.getImage=function(t,e,i,n){var r,o=n+e+t+i+this.pixelRatio;if(!Lt.o.containsKey(o)){var s=n?this.strokeStates[n]||this.textStrokeState_:null,h=i?this.fillStates[i]||this.textFillState_:null,l=this.textStates[e]||this.textState_,c=this.pixelRatio,u=l.scale*c,p=Jt[l.textAlign||Lt.l],d=n&&s.lineWidth?s.lineWidth:0,f=t.split("\n"),_=f.length,g=[],y=function(t,e,i){for(var n=e.length,r=0,o=0;o<n;++o){var s=Object(Lt.q)(t,e[o]);r=Math.max(r,s),i.push(s)}return r}(l.font,f,g),v=Object(Lt.p)(l.font),m=v*_,b=y+d,E=Object(ot.a)(Math.ceil(b*u),Math.ceil((m+d)*u));r=E.canvas,Lt.o.set(o,r),1!=u&&E.scale(u,u),E.font=l.font,n&&(E.strokeStyle=s.strokeStyle,E.lineWidth=d,E.lineCap=s.lineCap,E.lineJoin=s.lineJoin,E.miterLimit=s.miterLimit,a.a&&s.lineDash.length&&(E.setLineDash(s.lineDash),E.lineDashOffset=s.lineDashOffset)),i&&(E.fillStyle=h.fillStyle),E.textBaseline="middle",E.textAlign="center";var O,x=.5-p,C=p*r.width/u+x*d;if(n)for(O=0;O<_;++O)E.strokeText(f[O],C+x*g[O],.5*(d+v)+O*v);if(i)for(O=0;O<_;++O)E.fillText(f[O],C+x*g[O],.5*(d+v)+O*v)}return Lt.o.get(o)},e.prototype.drawTextImage_=function(t,e,i){var n=this.textState_,r=this.textStrokeState_,o=this.pixelRatio,s=Jt[n.textAlign||Lt.l],a=Jt[n.textBaseline],h=r&&r.lineWidth?r.lineWidth:0,l=s*t.width/o+2*(.5-s)*h,c=a*t.height/o+2*(.5-a)*h;this.instructions.push([Zt.DRAW_IMAGE,e,i,t,(l-this.textOffsetX_)*o,(c-this.textOffsetY_)*o,this.declutterGroup_,t.height,1,0,0,this.textRotateWithView_,this.textRotation_,1,t.width,n.padding==Lt.j?Lt.j:n.padding.map(function(t){return t*o}),!!n.backgroundFill,!!n.backgroundStroke]),this.hitDetectionInstructions.push([Zt.DRAW_IMAGE,e,i,t,(l-this.textOffsetX_)*o,(c-this.textOffsetY_)*o,this.declutterGroup_,t.height,1,0,0,this.textRotateWithView_,this.textRotation_,1/o,t.width,n.padding,!!n.backgroundFill,!!n.backgroundStroke])},e.prototype.drawChars_=function(t,e,i){var n=this.textStrokeState_,r=this.textState_,o=this.textFillState_,s=this.strokeKey_;n&&(s in this.strokeStates||(this.strokeStates[s]={strokeStyle:n.strokeStyle,lineCap:n.lineCap,lineDashOffset:n.lineDashOffset,lineWidth:n.lineWidth,lineJoin:n.lineJoin,miterLimit:n.miterLimit,lineDash:n.lineDash}));var a=this.textKey_;this.textKey_ in this.textStates||(this.textStates[this.textKey_]={font:r.font,textAlign:r.textAlign||Lt.l,scale:r.scale});var h=this.fillKey_;o&&(h in this.fillStates||(this.fillStates[h]={fillStyle:o.fillStyle}));var l=this.pixelRatio,c=Jt[r.textBaseline],u=this.textOffsetY_*l,p=this.text_,d=r.font,f=r.scale,_=n?n.lineWidth*f/2:0,g=this.widths_[d];g||(this.widths_[d]=g={}),this.instructions.push([Zt.DRAW_CHARS,t,e,c,i,r.overflow,h,r.maxAngle,function(t){var e=g[t];return e||(e=g[t]=Object(Lt.q)(d,t)),e*f*l},u,s,_*l,p,a,1]),this.hitDetectionInstructions.push([Zt.DRAW_CHARS,t,e,c,i,r.overflow,h,r.maxAngle,function(t){var e=g[t];return e||(e=g[t]=Object(Lt.q)(d,t)),e*f},u,s,_,p,a,1/l])},e.prototype.setTextStyle=function(t,e){var i,r,o;if(t){this.declutterGroup_=e;var s=t.getFill();s?((r=this.textFillState_)||(r=this.textFillState_={}),r.fillStyle=Object(Dt.a)(s.getColor()||Lt.b)):r=this.textFillState_=null;var a=t.getStroke();if(a){(o=this.textStrokeState_)||(o=this.textStrokeState_={});var h=a.getLineDash(),l=a.getLineDashOffset(),c=a.getWidth(),u=a.getMiterLimit();o.lineCap=a.getLineCap()||Lt.d,o.lineDash=h?h.slice():Lt.e,o.lineDashOffset=void 0===l?Lt.f:l,o.lineJoin=a.getLineJoin()||Lt.g,o.lineWidth=void 0===c?Lt.h:c,o.miterLimit=void 0===u?Lt.i:u,o.strokeStyle=Object(Dt.a)(a.getColor()||Lt.k)}else o=this.textStrokeState_=null;i=this.textState_;var p=t.getFont()||Lt.c;Object(Lt.a)(p);var d=t.getScale();i.overflow=t.getOverflow(),i.font=p,i.maxAngle=t.getMaxAngle(),i.placement=t.getPlacement(),i.textAlign=t.getTextAlign(),i.textBaseline=t.getTextBaseline()||Lt.m,i.backgroundFill=t.getBackgroundFill(),i.backgroundStroke=t.getBackgroundStroke(),i.padding=t.getPadding()||Lt.j,i.scale=void 0===d?1:d;var f=t.getOffsetX(),_=t.getOffsetY(),g=t.getRotateWithView(),y=t.getRotation();this.text_=t.getText()||"",this.textOffsetX_=void 0===f?0:f,this.textOffsetY_=void 0===_?0:_,this.textRotateWithView_=void 0!==g&&g,this.textRotation_=void 0===y?0:y,this.strokeKey_=o?("string"==typeof o.strokeStyle?o.strokeStyle:Object(n.c)(o.strokeStyle))+o.lineCap+o.lineDashOffset+"|"+o.lineWidth+o.lineJoin+o.miterLimit+"["+o.lineDash.join()+"]":"",this.textKey_=i.font+i.scale+(i.textAlign||"?"),this.fillKey_=r?"string"==typeof r.fillStyle?r.fillStyle:"|"+Object(n.c)(r.fillStyle):""}else this.text_=""},e}(te)},le=function(t){function e(e,i,n,r,o,s,a){t.call(this),this.declutterTree_=s,this.declutterGroup_=null,this.tolerance_=e,this.maxExtent_=i,this.overlaps_=o,this.pixelRatio_=r,this.resolution_=n,this.renderBuffer_=a,this.replaysByZIndex_={},this.hitDetectionContext_=Object(ot.a)(1,1),this.hitDetectionTransform_=Object(pt.c)()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.addDeclutter=function(t){var e=null;return this.declutterTree_&&(t?(e=this.declutterGroup_)[4]++:(e=this.declutterGroup_=Object(at.j)()).push(1)),e},e.prototype.clip=function(t,e){var i=this.getClipCoords(e);t.beginPath(),t.moveTo(i[0],i[1]),t.lineTo(i[2],i[3]),t.lineTo(i[4],i[5]),t.lineTo(i[6],i[7]),t.clip()},e.prototype.hasReplays=function(t){for(var e in this.replaysByZIndex_)for(var i=this.replaysByZIndex_[e],n=0,r=t.length;n<r;++n)if(t[n]in i)return!0;return!1},e.prototype.finish=function(){for(var t in this.replaysByZIndex_){var e=this.replaysByZIndex_[t];for(var i in e)e[i].finish()}},e.prototype.forEachFeatureAtCoordinate=function(t,e,i,n,r,o,s){var a,h=2*(n=Math.round(n))+1,l=Object(pt.b)(this.hitDetectionTransform_,n+.5,n+.5,1/e,-1/e,-i,-t[0],-t[1]),c=this.hitDetectionContext_;c.canvas.width!==h||c.canvas.height!==h?(c.canvas.width=h,c.canvas.height=h):c.clearRect(0,0,h,h),void 0!==this.renderBuffer_&&(a=Object(at.j)(),Object(at.r)(a,t),Object(at.c)(a,e*(this.renderBuffer_+n),a));var u,p,d=function(t){if(void 0!==ce[t])return ce[t];for(var e=2*t+1,i=new Array(e),n=0;n<e;n++)i[n]=new Array(e);var r=t,o=0,s=0;for(;r>=o;)ue(i,t+r,t+o),ue(i,t+o,t+r),ue(i,t-o,t+r),ue(i,t-r,t+o),ue(i,t-r,t-o),ue(i,t-o,t-r),ue(i,t+o,t-r),ue(i,t+r,t-o),2*((s+=1+2*++o)-r)+1>0&&(s+=1-2*(r-=1));return ce[t]=i,i}(n);function f(t){for(var e=c.getImageData(0,0,h,h).data,i=0;i<h;i++)for(var n=0;n<h;n++)if(d[i][n]&&e[4*(n*h+i)+3]>0){var r=void 0;return(!u||p!=At.IMAGE&&p!=At.TEXT||-1!==u.indexOf(t))&&(r=o(t)),r||void c.clearRect(0,0,h,h)}}this.declutterTree_&&(u=this.declutterTree_.all().map(function(t){return t.value}));var _,g,y,v,m,b=Object.keys(this.replaysByZIndex_).map(Number);for(b.sort(k.i),_=b.length-1;_>=0;--_){var E=b[_].toString();for(y=this.replaysByZIndex_[E],g=qt.length-1;g>=0;--g)if(void 0!==(v=y[p=qt[g]]))if(!s||p!=At.IMAGE&&p!=At.TEXT){if(m=v.replayHitDetection(c,l,i,r,f,a))return m}else{var O=s[E];O?O.push(v,l.slice(0)):s[E]=[v,l.slice(0)]}}},e.prototype.getClipCoords=function(t){var e=this.maxExtent_,i=e[0],n=e[1],r=e[2],o=e[3],s=[i,n,i,o,r,o,r,n];return Object(Ft.c)(s,0,8,2,t,s),s},e.prototype.getReplay=function(t,e){var i=void 0!==t?t.toString():"0",n=this.replaysByZIndex_[i];void 0===n&&(n={},this.replaysByZIndex_[i]=n);var r=n[e];void 0===r&&(r=new(0,he[e])(this.tolerance_,this.maxExtent_,this.resolution_,this.pixelRatio_,this.overlaps_,this.declutterTree_),n[e]=r);return r},e.prototype.getReplays=function(){return this.replaysByZIndex_},e.prototype.isEmpty=function(){return Object(Ct.d)(this.replaysByZIndex_)},e.prototype.replay=function(t,e,i,n,r,o,s){var a=Object.keys(this.replaysByZIndex_).map(Number);a.sort(k.i),t.save(),this.clip(t,e);var h,l,c,u,p,d,f=o||qt;for(h=0,l=a.length;h<l;++h){var _=a[h].toString();for(p=this.replaysByZIndex_[_],c=0,u=f.length;c<u;++c){var g=f[c];if(d=p[g],void 0!==d)if(!s||g!=At.IMAGE&&g!=At.TEXT)d.replay(t,e,i,n,r);else{var y=s[_];y?y.push(d,e.slice(0)):s[_]=[d,e.slice(0)]}}}t.restore()},e}(Pt),ce={0:[[!0]]};function ue(t,e,i){var n,r=Math.floor(t.length/2);if(e>=r)for(n=r;n<e;n++)t[n][i]=!0;else if(e<r)for(n=e+1;n<r;n++)t[n][i]=!0}var pe=le,de=i(97),fe=i(30),_e=.5,ge={Point:function(t,e,i,n){var r=i.getImage();if(r){if(r.getImageState()!=fe.a.LOADED)return;var o=t.getReplay(i.getZIndex(),At.IMAGE);o.setImageStyle(r,t.addDeclutter(!1)),o.drawPoint(e,n)}var s=i.getText();if(s){var a=t.getReplay(i.getZIndex(),At.TEXT);a.setTextStyle(s,t.addDeclutter(!!r)),a.drawText(e,n)}},LineString:function(t,e,i,n){var r=i.getStroke();if(r){var o=t.getReplay(i.getZIndex(),At.LINE_STRING);o.setFillStrokeStyle(null,r),o.drawLineString(e,n)}var s=i.getText();if(s){var a=t.getReplay(i.getZIndex(),At.TEXT);a.setTextStyle(s,t.addDeclutter(!1)),a.drawText(e,n)}},Polygon:function(t,e,i,n){var r=i.getFill(),o=i.getStroke();if(r||o){var s=t.getReplay(i.getZIndex(),At.POLYGON);s.setFillStrokeStyle(r,o),s.drawPolygon(e,n)}var a=i.getText();if(a){var h=t.getReplay(i.getZIndex(),At.TEXT);h.setTextStyle(a,t.addDeclutter(!1)),h.drawText(e,n)}},MultiPoint:function(t,e,i,n){var r=i.getImage();if(r){if(r.getImageState()!=fe.a.LOADED)return;var o=t.getReplay(i.getZIndex(),At.IMAGE);o.setImageStyle(r,t.addDeclutter(!1)),o.drawMultiPoint(e,n)}var s=i.getText();if(s){var a=t.getReplay(i.getZIndex(),At.TEXT);a.setTextStyle(s,t.addDeclutter(!!r)),a.drawText(e,n)}},MultiLineString:function(t,e,i,n){var r=i.getStroke();if(r){var o=t.getReplay(i.getZIndex(),At.LINE_STRING);o.setFillStrokeStyle(null,r),o.drawMultiLineString(e,n)}var s=i.getText();if(s){var a=t.getReplay(i.getZIndex(),At.TEXT);a.setTextStyle(s,t.addDeclutter(!1)),a.drawText(e,n)}},MultiPolygon:function(t,e,i,n){var r=i.getFill(),o=i.getStroke();if(o||r){var s=t.getReplay(i.getZIndex(),At.POLYGON);s.setFillStrokeStyle(r,o),s.drawMultiPolygon(e,n)}var a=i.getText();if(a){var h=t.getReplay(i.getZIndex(),At.TEXT);h.setTextStyle(a,t.addDeclutter(!1)),h.drawText(e,n)}},GeometryCollection:function(t,e,i,n){var r,o,s=e.getGeometriesArray();for(r=0,o=s.length;r<o;++r){var a=ge[s[r].getType()];a(t,s[r],i,n)}},Circle:function(t,e,i,n){var r=i.getFill(),o=i.getStroke();if(r||o){var s=t.getReplay(i.getZIndex(),At.CIRCLE);s.setFillStrokeStyle(r,o),s.drawCircle(e,n)}var a=i.getText();if(a){var h=t.getReplay(i.getZIndex(),At.TEXT);h.setTextStyle(a,t.addDeclutter(!1)),h.drawText(e,n)}}};function ye(t,e){return parseInt(Object(n.c)(t),10)-parseInt(Object(n.c)(e),10)}function ve(t,e){var i=me(t,e);return i*i}function me(t,e){return _e*t/e}function be(t,e,i,n,r,o){var s=!1,a=i.getImage();if(a){var h=a.getImageState();h==fe.a.LOADED||h==fe.a.ERROR?a.unlistenImageChange(r,o):(h==fe.a.IDLE&&a.load(),h=a.getImageState(),a.listenImageChange(r,o),s=!0)}return function(t,e,i,n){var r=i.getGeometryFunction()(e);if(!r)return;var o=r.getSimplifiedGeometry(n);if(i.getRenderer())!function t(e,i,n,r){if(i.getType()==kt.a.GEOMETRY_COLLECTION){for(var o=i.getGeometries(),s=0,a=o.length;s<a;++s)t(e,o[s],n,r);return}var h=e.getReplay(n.getZIndex(),At.DEFAULT);h.drawCustom(i,r,n.getRenderer())}(t,o,i,e);else{var s=ge[o.getType()];s(t,o,i,e)}}(t,e,i,n),s}var Ee=function(t){function e(e){t.call(this,e),this.declutterTree_=e.getDeclutter()?wt()(9,void 0):null,this.dirty_=!1,this.renderedRevision_=-1,this.renderedResolution_=NaN,this.renderedExtent_=Object(at.j)(),this.renderedRenderOrder_=null,this.replayGroup_=null,this.replayGroupChanged=!0,this.context=Object(ot.a)(),Object(c.a)(Lt.o,st.a.CLEAR,this.handleFontsChanged_,this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.disposeInternal=function(){Object(c.c)(Lt.o,st.a.CLEAR,this.handleFontsChanged_,this),t.prototype.disposeInternal.call(this)},e.prototype.compose=function(t,e,i){var n=e.extent,r=e.pixelRatio,o=i.managed?e.skippedFeatureUids:{},s=e.viewState,a=s.projection,h=s.rotation,l=a.getExtent(),c=this.getLayer().getSource(),u=this.getTransform(e,0),p=i.extent,d=void 0!==p;d&&this.clip(t,e,p);var f=this.replayGroup_;if(f&&!f.isEmpty()){this.declutterTree_&&this.declutterTree_.clear();var _,g=this.getLayer(),y=0,v=0,m=1!==i.opacity,b=g.hasListener(Q.a.RENDER);if(m||b){var E=t.canvas.width,O=t.canvas.height;if(h){var x=Math.round(Math.sqrt(E*E+O*O));y=(x-E)/2,v=(x-O)/2,E=O=x}this.context.canvas.width=E,this.context.canvas.height=O,_=this.context}else _=t;var C=_.globalAlpha;m||(_.globalAlpha=i.opacity),_!=t&&_.translate(y,v);var T=e.viewHints,R=!(T[nt.a.ANIMATING]||T[nt.a.INTERACTING]),S=e.size[0]*r,I=e.size[1]*r;if(Object(Lt.s)(_,-h,S/2,I/2),f.replay(_,u,h,o,R),c.getWrapX()&&a.canWrapX()&&!Object(at.g)(l,n)){for(var j,w=n[0],L=Object(at.E)(l),F=0;w<l[0];)j=L*--F,u=this.getTransform(e,j),f.replay(_,u,h,o,R),w+=L;for(F=0,w=n[2];w>l[2];)j=L*++F,u=this.getTransform(e,j),f.replay(_,u,h,o,R),w-=L}if(Object(Lt.s)(_,h,S/2,I/2),b&&this.dispatchRenderEvent(_,e,u),_!=t){if(m){var M=t.globalAlpha;t.globalAlpha=i.opacity,t.drawImage(_.canvas,-y,-v),t.globalAlpha=M}else t.drawImage(_.canvas,-y,-v);_.translate(-y,-v)}m||(_.globalAlpha=C)}d&&t.restore()},e.prototype.composeFrame=function(t,e,i){var n=this.getTransform(t,0);this.preCompose(i,t,n),this.compose(i,t,e),this.postCompose(i,t,e,n)},e.prototype.forEachFeatureAtCoordinate=function(t,e,i,r,o){if(this.replayGroup_){var s=e.viewState.resolution,a=e.viewState.rotation,h=this.getLayer(),l={};return this.replayGroup_.forEachFeatureAtCoordinate(t,s,a,i,{},function(t){var e=Object(n.c)(t);if(!(e in l))return l[e]=!0,r.call(o,t,h)},null)}},e.prototype.handleFontsChanged_=function(t){var e=this.getLayer();e.getVisible()&&this.replayGroup_&&e.changed()},e.prototype.handleStyleImageChange_=function(t){this.renderIfReadyAndVisible()},e.prototype.prepareFrame=function(t,e){var i=this.getLayer(),n=i.getSource(),r=t.viewHints[nt.a.ANIMATING],o=t.viewHints[nt.a.INTERACTING],s=i.getUpdateWhileAnimating(),a=i.getUpdateWhileInteracting();if(!this.dirty_&&!s&&r||!a&&o)return!0;var h=t.extent,l=t.viewState,c=l.projection,u=l.resolution,p=t.pixelRatio,d=i.getRevision(),f=i.getRenderBuffer(),_=i.getRenderOrder();void 0===_&&(_=ye);var g=Object(at.c)(h,f*u),y=l.projection.getExtent();if(n.getWrapX()&&l.projection.canWrapX()&&!Object(at.g)(y,t.extent)){var v=Object(at.E)(y),m=Math.max(Object(at.E)(g)/2,v);g[0]=y[0]-m,g[2]=y[2]+m}if(!this.dirty_&&this.renderedResolution_==u&&this.renderedRevision_==d&&this.renderedRenderOrder_==_&&Object(at.g)(this.renderedExtent_,g))return this.replayGroupChanged=!1,!0;this.replayGroup_=null,this.dirty_=!1;var b=new pe(me(u,p),g,u,p,n.getOverlaps(),this.declutterTree_,i.getRenderBuffer());n.loadFeatures(g,u,c);var E=function(t){var e,n=t.getStyleFunction()||i.getStyleFunction();if(n&&(e=n(t,u)),e){var r=this.renderFeature(t,u,p,e,b);this.dirty_=this.dirty_||r}}.bind(this);if(_){var O=[];n.forEachFeatureInExtent(g,function(t){O.push(t)}),O.sort(_);for(var x=0,C=O.length;x<C;++x)E(O[x])}else n.forEachFeatureInExtent(g,E);return b.finish(),this.renderedResolution_=u,this.renderedRevision_=d,this.renderedRenderOrder_=_,this.renderedExtent_=g,this.replayGroup_=b,this.replayGroupChanged=!0,!0},e.prototype.renderFeature=function(t,e,i,n,r){if(!n)return!1;var o=!1;if(Array.isArray(n))for(var s=0,a=n.length;s<a;++s)o=be(r,t,n[s],ve(e,i),this.handleStyleImageChange_,this)||o;else o=be(r,t,n,ve(e,i),this.handleStyleImageChange_,this);return o},e}(de.a);Ee.handles=function(t){return t.getType()===It.a.VECTOR},Ee.create=function(t,e){return new Ee(e)};var Oe=Ee,xe=i(19),Ce=i(103),Te=i(15),Re=i(45),Se={image:[At.POLYGON,At.CIRCLE,At.LINE_STRING,At.IMAGE,At.TEXT],hybrid:[At.POLYGON,At.LINE_STRING]},Ie={image:[At.DEFAULT],hybrid:[At.IMAGE,At.TEXT,At.DEFAULT],vector:qt},je=function(t){function e(e){t.call(this,e,!0),this.declutterTree_=e.getDeclutter()?wt()(9,void 0):null,this.dirty_=!1,this.renderedLayerRevision_,this.tmpTransform_=Object(pt.c)();var i=e.getRenderMode();this.zDirection=i===Ce.a.VECTOR?1:0,i!==Ce.a.VECTOR&&(this.context=Object(ot.a)()),Object(c.a)(Lt.o,st.a.CLEAR,this.handleFontsChanged_,this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.disposeInternal=function(){Object(c.c)(Lt.o,st.a.CLEAR,this.handleFontsChanged_,this),t.prototype.disposeInternal.call(this)},e.prototype.getTile=function(e,i,n,r,o){var s=t.prototype.getTile.call(this,e,i,n,r,o);return s.getState()===xe.a.LOADED&&(this.createReplayGroup_(s,r,o),this.context&&this.renderTileImage_(s,r,o)),s},e.prototype.getTileImage=function(t){var e=this.getLayer();return t.getImage(e)},e.prototype.prepareFrame=function(e,i){var n=this.getLayer().getRevision();return this.renderedLayerRevision_!=n&&(this.renderedTiles.length=0),this.renderedLayerRevision_=n,t.prototype.prepareFrame.call(this,e,i)},e.prototype.createReplayGroup_=function(t,e,i){var n=this,r=this.getLayer(),o=r.getRevision(),s=r.getRenderOrder()||null,a=t.getReplayState(r);if(a.dirty||a.renderedRevision!=o||a.renderedRenderOrder!=s){for(var h=r.getSource(),l=h.getTileGrid(),c=h.getTileGridForProjection(i).getResolution(t.tileCoord[0]),u=t.extent,p=function(o,p){var d=t.getTile(t.tileKeys[o]);if(d.getState()==xe.a.LOADED){var f=d.tileCoord,_=l.getTileCoordExtent(f),g=Object(at.B)(u,_),y=Object(at.p)(_,g)?null:Object(at.c)(g,r.getRenderBuffer()*c,n.tmpExtent),v=d.getProjection(),m=!1;Object(Te.c)(i,v)||(m=!0,d.setProjection(i)),a.dirty=!1;var b=new pe(0,g,c,e,h.getOverlaps(),n.declutterTree_,r.getRenderBuffer()),E=ve(c,e),O=function(t){var e,i=t.getStyleFunction()||r.getStyleFunction();if(i&&(e=i(t,c)),e){var n=this.renderFeature(t,E,e,b);this.dirty_=this.dirty_||n,a.dirty=a.dirty||n}},x=d.getFeatures();s&&s!==a.renderedRenderOrder&&x.sort(s);for(var C=0,T=x.length;C<T;++C){var R=x[C];m&&(v.getUnits()==Re.b.TILE_PIXELS&&(v.setWorldExtent(_),v.setExtent(d.getExtent())),R.getGeometry().transform(v,i)),y&&!Object(at.F)(y,R.getGeometry().getExtent())||O.call(n,R)}b.finish(),d.setReplayGroup(r,t.tileCoord.toString(),b)}},d=0,f=t.tileKeys.length;d<f;++d)p(d);a.renderedRevision=o,a.renderedRenderOrder=s}},e.prototype.forEachFeatureAtCoordinate=function(t,e,i,r,o){var s=e.viewState.resolution,a=e.viewState.rotation;i=null==i?0:i;var h,l,c,u,p=this.getLayer(),d={},f=this.renderedTiles;for(c=0,u=f.length;c<u;++c){var _=f[c];if(h=Object(at.c)(_.extent,i*s,h),Object(at.f)(h,t))for(var g=0,y=_.tileKeys.length;g<y;++g){var v=_.getTile(_.tileKeys[g]);if(v.getState()==xe.a.LOADED){var m=v.getReplayGroup(p,_.tileCoord.toString());l=l||m.forEachFeatureAtCoordinate(t,s,a,i,{},function(t){var e=Object(n.c)(t);if(!(e in d))return d[e]=!0,r.call(o,t,p)},null)}}}return l},e.prototype.getReplayTransform_=function(t,e){var i=this.getLayer().getSource().getTileGrid(),n=t.tileCoord,r=i.getResolution(n[0]),o=e.viewState,s=e.pixelRatio,a=o.resolution/s,h=i.getTileCoordExtent(n,this.tmpExtent),l=o.center,c=Object(at.C)(h),u=e.size,p=Math.round(s*u[0]/2),d=Math.round(s*u[1]/2);return Object(pt.b)(this.tmpTransform_,p,d,r/a,r/a,o.rotation,(c[0]-l[0])/r,(l[1]-c[1])/r)},e.prototype.handleFontsChanged_=function(t){var e=this.getLayer();e.getVisible()&&void 0!==this.renderedLayerRevision_&&e.changed()},e.prototype.handleStyleImageChange_=function(t){this.renderIfReadyAndVisible()},e.prototype.postCompose=function(e,i,n){var r=this.getLayer(),o=r.getRenderMode();if(o!=Ce.a.IMAGE){var s,a,h=r.getDeclutter()?{}:null,l=r.getSource(),c=Ie[o],u=i.pixelRatio,p=i.viewState.rotation,d=i.size;p&&(s=Math.round(u*d[0]/2),a=Math.round(u*d[1]/2),Object(Lt.s)(e,-p,s,a)),h&&this.declutterTree_.clear();for(var f=i.viewHints,_=!(f[nt.a.ANIMATING]||f[nt.a.INTERACTING]),g=this.renderedTiles,y=l.getTileGridForProjection(i.viewState.projection),v=[],m=[],b=g.length-1;b>=0;--b){var E=g[b];if(E.getState()!=xe.a.ABORT)for(var O=E.tileCoord,x=y.getTileCoordExtent(O,this.tmpExtent)[0]-E.extent[0],C=void 0,T=0,R=E.tileKeys.length;T<R;++T){var S=E.getTile(E.tileKeys[T]);if(S.getState()==xe.a.LOADED){var I=S.getReplayGroup(r,O.toString());if(I&&I.hasReplays(c)){C||(C=this.getTransform(i,x));var j=S.tileCoord[0],w=I.getClipCoords(C);e.save(),e.globalAlpha=n.opacity;for(var L=0,F=v.length;L<F;++L){var M=v[L];j<m[L]&&(e.beginPath(),e.moveTo(w[0],w[1]),e.lineTo(w[2],w[3]),e.lineTo(w[4],w[5]),e.lineTo(w[6],w[7]),e.moveTo(M[6],M[7]),e.lineTo(M[4],M[5]),e.lineTo(M[2],M[3]),e.lineTo(M[0],M[1]),e.clip())}I.replay(e,C,p,{},_,c,h),e.restore(),v.push(w),m.push(j)}}}}h&&function(t,e,i,n){for(var r=Object.keys(t).map(Number).sort(k.i),o={},s=0,a=r.length;s<a;++s)for(var h=t[r[s].toString()],l=0,c=h.length;l<c;){var u=h[l++],p=h[l++];u.replay(e,p,i,o,n)}}(h,e,p,_),p&&Object(Lt.s)(e,p,s,a)}t.prototype.postCompose.call(this,e,i,n)},e.prototype.renderFeature=function(t,e,i,n){if(!i)return!1;var r=!1;if(Array.isArray(i))for(var o=0,s=i.length;o<s;++o)r=be(n,t,i[o],e,this.handleStyleImageChange_,this)||r;else r=be(n,t,i,e,this.handleStyleImageChange_,this);return r},e.prototype.renderTileImage_=function(t,e,i){var n=this.getLayer(),r=t.getReplayState(n),o=n.getRevision(),s=Se[n.getRenderMode()];if(s&&r.renderedTileRevision!==o){r.renderedTileRevision=o;var a=t.wrappedTileCoord,h=a[0],l=n.getSource(),c=l.getTileGridForProjection(i),u=c.getResolution(h),p=t.getContext(n),d=l.getTilePixelSize(h,e,i);p.canvas.width=d[0],p.canvas.height=d[1];for(var f=c.getTileCoordExtent(a,this.tmpExtent),_=0,g=t.tileKeys.length;_<g;++_){var y=t.getTile(t.tileKeys[_]);if(y.getState()==xe.a.LOADED){var v=e/u,m=Object(pt.e)(this.tmpTransform_);Object(pt.f)(m,v,-v),Object(pt.h)(m,-f[0],-f[3]),y.getReplayGroup(n,t.tileCoord.toString()).replay(p,m,0,{},!0,s)}}}},e}(St.a);je.handles=function(t){return t.getType()===It.a.VECTOR_TILE},je.create=function(t,e){return new je(e)};var we=je,Le=function(t){function e(e){(e=Object(Ct.a)({},e)).controls||(e.controls=function(t){var e=t||{},i=new r.a;return(void 0===e.zoom||e.zoom)&&i.push(new Ot(e.zoomOptions)),(void 0===e.rotate||e.rotate)&&i.push(new Et(e.rotateOptions)),(void 0===e.attribution||e.attribution)&&i.push(new vt(e.attributionOptions)),i}()),e.interactions||(e.interactions=Object(xt.defaults)()),t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.createRenderer=function(){var t=new Rt.a(this);return t.registerLayerRenderers([Tt.a,St.a,Oe,we]),t},e}(dt);e.default=Le}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,