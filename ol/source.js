(window.webpackJsonp=window.webpackJsonp||[]).push([[13],[,,,,,,,function(t,e,i){"use strict";function r(t,e,i){for(var r,o,s=i||n,a=0,h=t.length,c=!1;a<h;)(o=+s(t[r=a+(h-a>>1)],e))<0?a=r+1:(h=r,c=!o);return c?a:~a}function n(t,e){return t>e?1:t<e?-1:0}function o(t,e){return t.indexOf(e)>=0}function s(t,e,i){var r,n=t.length;if(t[0]<=e)return 0;if(e<=t[n-1])return n-1;if(i>0){for(r=1;r<n;++r)if(t[r]<e)return r-1}else if(i<0){for(r=1;r<n;++r)if(t[r]<=e)return r}else for(r=1;r<n;++r){if(t[r]==e)return r;if(t[r]<e)return t[r-1]-e<e-t[r]?r-1:r}return n-1}function a(t,e,i){for(;e<i;){var r=t[e];t[e]=t[i],t[i]=r,++e,--i}}function h(t,e){for(var i=Array.isArray(e)?e:[e],r=i.length,n=0;n<r;n++)t[t.length]=i[n]}function c(t,e){var i=t.indexOf(e),r=i>-1;return r&&t.splice(i,1),r}function u(t,e){for(var i,r=t.length>>>0,n=0;n<r;n++)if(e(i=t[n],n,t))return i;return null}function l(t,e){var i=t.length;if(i!==e.length)return!1;for(var r=0;r<i;r++)if(t[r]!==e[r])return!1;return!0}function p(t,e){var i,r=t.length,n=Array(t.length);for(i=0;i<r;i++)n[i]={index:i,value:t[i]};for(n.sort(function(t,i){return e(t.value,i.value)||t.index-i.index}),i=0;i<t.length;i++)t[i]=n[i].value}function d(t,e){var i;return!t.every(function(r,n){return i=n,!e(r,n,t)})?i:-1}function f(t,e,i){var r=e||n;return t.every(function(e,n){if(0===n)return!0;var o=r(t[n-1],e);return!(o>0||i&&0===o)})}i.d(e,"a",function(){return r}),i.d(e,"i",function(){return n}),i.d(e,"f",function(){return o}),i.d(e,"h",function(){return s}),i.d(e,"k",function(){return a}),i.d(e,"c",function(){return h}),i.d(e,"j",function(){return c}),i.d(e,"d",function(){return u}),i.d(e,"b",function(){return l}),i.d(e,"l",function(){return p}),i.d(e,"e",function(){return d}),i.d(e,"g",function(){return f})},,,,,,function(t,e,i){"use strict";function r(t,e){var i=document.createElement("canvas");return t&&(i.width=t),e&&(i.height=e),i.getContext("2d")}function n(t,e){var i=e.parentNode;i&&i.replaceChild(t,e)}function o(t){return t&&t.parentNode?t.parentNode.removeChild(t):null}function s(t){for(;t.lastChild;)t.removeChild(t.lastChild)}i.d(e,"a",function(){return r}),i.d(e,"d",function(){return n}),i.d(e,"c",function(){return o}),i.d(e,"b",function(){return s})},function(t,e,i){"use strict";e.a={ANIMATING:0,INTERACTING:1}},,,,function(t,e,i){"use strict";i.d(e,"a",function(){return r}),i.d(e,"b",function(){return n}),i.d(e,"c",function(){return o}),i.d(e,"e",function(){return s}),i.d(e,"f",function(){return a}),i.d(e,"g",function(){return h}),i.d(e,"h",function(){return c}),i.d(e,"d",function(){return u}),i.d(e,"i",function(){return l});i(6),i(51);function r(t,e){return t[0]+=e[0],t[1]+=e[1],t}function n(t,e){var i=e.getRadius(),r=e.getCenter(),n=r[0],o=r[1],s=t[0]-n,a=t[1]-o;0===s&&0===a&&(s=1);var h=Math.sqrt(s*s+a*a);return[n+i*s/h,o+i*a/h]}function o(t,e){var i,r,n=t[0],o=t[1],s=e[0],a=e[1],h=s[0],c=s[1],u=a[0],l=a[1],p=u-h,d=l-c,f=0===p&&0===d?0:(p*(n-h)+d*(o-c))/(p*p+d*d||0);return f<=0?(i=h,r=c):f>=1?(i=u,r=l):(i=h+f*p,r=c+f*d),[i,r]}function s(t,e){for(var i=!0,r=t.length-1;r>=0;--r)if(t[r]!=e[r]){i=!1;break}return i}function a(t,e){var i=Math.cos(e),r=Math.sin(e),n=t[0]*i-t[1]*r,o=t[1]*i+t[0]*r;return t[0]=n,t[1]=o,t}function h(t,e){return t[0]*=e,t[1]*=e,t}function c(t,e){var i=t[0]-e[0],r=t[1]-e[1];return i*i+r*r}function u(t,e){return Math.sqrt(c(t,e))}function l(t,e){return c(t,o(t,e))}},function(t,e,i){"use strict";e.a={IDLE:0,LOADING:1,LOADED:2,ERROR:3,EMPTY:4,ABORT:5}},,,,,function(t,e,i){"use strict";function r(t){return Math.pow(t,3)}function n(t){return 1-r(1-t)}function o(t){return 3*t*t-2*t*t*t}function s(t){return t}i.d(e,"a",function(){return r}),i.d(e,"b",function(){return n}),i.d(e,"c",function(){return o}),i.d(e,"d",function(){return s})},,,,function(t,e,i){"use strict";i.d(e,"c",function(){return n}),i.d(e,"h",function(){return o}),i.d(e,"j",function(){return s}),i.d(e,"e",function(){return a}),i.d(e,"b",function(){return h}),i.d(e,"a",function(){return c}),i.d(e,"d",function(){return u}),i.d(e,"i",function(){return l}),i.d(e,"g",function(){return p}),i.d(e,"f",function(){return d});var r="undefined"!=typeof navigator?navigator.userAgent.toLowerCase():"",n=-1!==r.indexOf("firefox"),o=-1!==r.indexOf("safari")&&-1==r.indexOf("chrom"),s=-1!==r.indexOf("webkit")&&-1==r.indexOf("edge"),a=-1!==r.indexOf("macintosh"),h=window.devicePixelRatio||1,c=function(){var t=!1;try{t=!!document.createElement("canvas").getContext("2d").setLineDash}catch(t){}return t}(),u="geolocation"in navigator,l="ontouchstart"in window,p="PointerEvent"in window,d=!!navigator.msPointerEnabled},,function(t,e,i){"use strict";e.a={IDLE:0,LOADING:1,LOADED:2,ERROR:3}},,,,,,,,function(t,e,i){"use strict";i.d(e,"c",function(){return h}),i.d(e,"b",function(){return c}),i.d(e,"d",function(){return u}),i.d(e,"e",function(){return l}),i.d(e,"f",function(){return p}),i.d(e,"g",function(){return d}),i.d(e,"i",function(){return f}),i.d(e,"k",function(){return _}),i.d(e,"l",function(){return g}),i.d(e,"m",function(){return m}),i.d(e,"j",function(){return y}),i.d(e,"h",function(){return v}),i.d(e,"o",function(){return b}),i.d(e,"a",function(){return E}),i.d(e,"p",function(){return C}),i.d(e,"q",function(){return I}),i.d(e,"s",function(){return F}),i.d(e,"r",function(){return w}),i.d(e,"n",function(){return L});var r=i(55),n=i(13),o=i(5),s=i(86),a=i(17),h="10px sans-serif",c=[0,0,0,1],u="round",l=[],p=0,d="round",f=10,_=[0,0,0,1],g="center",m="middle",y=[0,0,0,0],v=1,b=new s.a,O={},x=null,j={},E=function(){var t,e,i=60,n=O,s="32px ",a=["monospace","serif"],h=a.length,c="wmytzilWMYTZIL@#/&?$%10ï€“";function u(t){for(var i=T(),r=100;r<=700;r+=300){for(var n=r+" ",o=!0,u=0;u<h;++u){var l=a[u];if(i.font=n+s+l,e=i.measureText(c).width,t!=l){i.font=n+s+t+","+l;var p=i.measureText(c).width;o=o&&p!=e}}if(o)return!0}return!1}function l(){var e=!0;for(var r in n)n[r]<i&&(u(r)?(n[r]=i,Object(o.b)(j),x=null,b.clear()):(++n[r],e=!1));e&&(clearInterval(t),t=void 0)}return function(e){var o=Object(r.e)(e);if(o)for(var s=0,a=o.length;s<a;++s){var h=o[s];h in n||(n[h]=i,u(h)||(n[h]=0,void 0===t&&(t=setInterval(l,32))))}}}();function T(){return x||(x=Object(n.a)(1,1)),x}var S,R,C=(R=j,function(t){var e=R[t];return null==e&&(S||((S=document.createElement("span")).textContent="M",S.style.margin=S.style.padding="0 !important",S.style.position="absolute !important",S.style.left="-99999px !important"),S.style.font=t,document.body.appendChild(S),e=R[t]=S.offsetHeight,document.body.removeChild(S)),e});function I(t,e){var i=T();return t!=i.font&&(i.font=t),i.measureText(e).width}function F(t,e,i,r){0!==e&&(t.translate(i,r),t.rotate(e),t.translate(-i,-r))}var w=Object(a.c)();function L(t,e,i,r,n,o,s,a,h,c,u){var l;1!=i&&(l=t.globalAlpha,t.globalAlpha=l*i),e&&t.setTransform.apply(t,e),t.drawImage(r,n,o,s,a,h,c,s*u,a*u),l&&(t.globalAlpha=l),e&&t.setTransform.apply(t,w)}},function(t,e,i){"use strict";var r=i(3),n=i(25),o=i(21),s=i(50),a=i(7),h=i(9),c=i(4),u=i(11),l=i(2),p=i(1),d=i(72),f=i(8);function _(t,e){return[[-1/0,-1/0,1/0,1/0]]}var g=i(5),m=i(54),y=i(16),v=i(53),b=i(52),O=function(t){function e(e,i){t.call(this,e),this.feature=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(u.a),x=function(t){function e(e){var i=e||{};t.call(this,{attributions:i.attributions,projection:void 0,state:y.a.READY,wrapX:void 0===i.wrapX||i.wrapX}),this.loader_=f.c,this.format_=i.format,this.overlaps_=null==i.overlaps||i.overlaps,this.url_=i.url,void 0!==i.loader?this.loader_=i.loader:void 0!==this.url_&&(Object(h.a)(this.format_,7),this.loader_=Object(d.b)(this.url_,this.format_)),this.strategy_=void 0!==i.strategy?i.strategy:_;var r,o,s=void 0===i.useSpatialIndex||i.useSpatialIndex;this.featuresRtree_=s?new b.a:null,this.loadedExtentsRtree_=new b.a,this.nullGeometryFeatures_={},this.idIndex_={},this.undefIdIndex_={},this.featureChangeKeys_={},this.featuresCollection_=null,Array.isArray(i.features)?o=i.features:i.features&&(o=(r=i.features).getArray()),s||void 0!==r||(r=new n.a(o)),void 0!==o&&this.addFeaturesInternal(o),void 0!==r&&this.bindFeaturesCollection_(r)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.addFeature=function(t){this.addFeatureInternal(t),this.changed()},e.prototype.addFeatureInternal=function(t){var e=Object(r.c)(t);if(this.addToIndex_(e,t)){this.setupChangeEvents_(e,t);var i=t.getGeometry();if(i){var n=i.getExtent();this.featuresRtree_&&this.featuresRtree_.insert(n,t)}else this.nullGeometryFeatures_[e]=t;this.dispatchEvent(new O(v.a.ADDFEATURE,t))}},e.prototype.setupChangeEvents_=function(t,e){this.featureChangeKeys_[t]=[Object(c.a)(e,l.a.CHANGE,this.handleFeatureChange_,this),Object(c.a)(e,s.a.PROPERTYCHANGE,this.handleFeatureChange_,this)]},e.prototype.addToIndex_=function(t,e){var i=!0,r=e.getId();return void 0!==r?r.toString()in this.idIndex_?i=!1:this.idIndex_[r.toString()]=e:(Object(h.a)(!(t in this.undefIdIndex_),30),this.undefIdIndex_[t]=e),i},e.prototype.addFeatures=function(t){this.addFeaturesInternal(t),this.changed()},e.prototype.addFeaturesInternal=function(t){for(var e=[],i=[],n=[],o=0,s=t.length;o<s;o++){var a=t[o],h=Object(r.c)(a);this.addToIndex_(h,a)&&i.push(a)}for(var c=0,u=i.length;c<u;c++){var l=i[c],p=Object(r.c)(l);this.setupChangeEvents_(p,l);var d=l.getGeometry();if(d){var f=d.getExtent();e.push(f),n.push(l)}else this.nullGeometryFeatures_[p]=l}this.featuresRtree_&&this.featuresRtree_.load(e,n);for(var _=0,g=i.length;_<g;_++)this.dispatchEvent(new O(v.a.ADDFEATURE,i[_]))},e.prototype.bindFeaturesCollection_=function(t){var e=!1;Object(c.a)(this,v.a.ADDFEATURE,function(i){e||(e=!0,t.push(i.feature),e=!1)}),Object(c.a)(this,v.a.REMOVEFEATURE,function(i){e||(e=!0,t.remove(i.feature),e=!1)}),Object(c.a)(t,o.a.ADD,function(t){e||(e=!0,this.addFeature(t.element),e=!1)},this),Object(c.a)(t,o.a.REMOVE,function(t){e||(e=!0,this.removeFeature(t.element),e=!1)},this),this.featuresCollection_=t},e.prototype.clear=function(t){if(t){for(var e in this.featureChangeKeys_){this.featureChangeKeys_[e].forEach(c.e)}this.featuresCollection_||(this.featureChangeKeys_={},this.idIndex_={},this.undefIdIndex_={})}else if(this.featuresRtree_)for(var i in this.featuresRtree_.forEach(this.removeFeatureInternal,this),this.nullGeometryFeatures_)this.removeFeatureInternal(this.nullGeometryFeatures_[i]);this.featuresCollection_&&this.featuresCollection_.clear(),this.featuresRtree_&&this.featuresRtree_.clear(),this.loadedExtentsRtree_.clear(),this.nullGeometryFeatures_={};var r=new O(v.a.CLEAR);this.dispatchEvent(r),this.changed()},e.prototype.forEachFeature=function(t){if(this.featuresRtree_)return this.featuresRtree_.forEach(t);this.featuresCollection_&&this.featuresCollection_.forEach(t)},e.prototype.forEachFeatureAtCoordinateDirect=function(t,e){var i=[t[0],t[1],t[0],t[1]];return this.forEachFeatureInExtent(i,function(i){return i.getGeometry().intersectsCoordinate(t)?e(i):void 0})},e.prototype.forEachFeatureInExtent=function(t,e){if(this.featuresRtree_)return this.featuresRtree_.forEachInExtent(t,e);this.featuresCollection_&&this.featuresCollection_.forEach(e)},e.prototype.forEachFeatureIntersectingExtent=function(t,e){return this.forEachFeatureInExtent(t,function(i){if(i.getGeometry().intersectsExtent(t)){var r=e(i);if(r)return r}})},e.prototype.getFeaturesCollection=function(){return this.featuresCollection_},e.prototype.getFeatures=function(){var t;return this.featuresCollection_?t=this.featuresCollection_.getArray():this.featuresRtree_&&(t=this.featuresRtree_.getAll(),Object(g.d)(this.nullGeometryFeatures_)||Object(a.c)(t,Object(g.c)(this.nullGeometryFeatures_))),t},e.prototype.getFeaturesAtCoordinate=function(t){var e=[];return this.forEachFeatureAtCoordinateDirect(t,function(t){e.push(t)}),e},e.prototype.getFeaturesInExtent=function(t){return this.featuresRtree_.getInExtent(t)},e.prototype.getClosestFeatureToCoordinate=function(t,e){var i=t[0],r=t[1],n=null,o=[NaN,NaN],s=1/0,a=[-1/0,-1/0,1/0,1/0],h=e||f.b;return this.featuresRtree_.forEachInExtent(a,function(t){if(h(t)){var e=t.getGeometry(),c=s;if((s=e.closestPointXY(i,r,o,s))<c){n=t;var u=Math.sqrt(s);a[0]=i-u,a[1]=r-u,a[2]=i+u,a[3]=r+u}}}),n},e.prototype.getExtent=function(t){return this.featuresRtree_.getExtent(t)},e.prototype.getFeatureById=function(t){var e=this.idIndex_[t.toString()];return void 0!==e?e:null},e.prototype.getFormat=function(){return this.format_},e.prototype.getOverlaps=function(){return this.overlaps_},e.prototype.getUrl=function(){return this.url_},e.prototype.handleFeatureChange_=function(t){var e=t.target,i=Object(r.c)(e),n=e.getGeometry();if(n){var o=n.getExtent();i in this.nullGeometryFeatures_?(delete this.nullGeometryFeatures_[i],this.featuresRtree_&&this.featuresRtree_.insert(o,e)):this.featuresRtree_&&this.featuresRtree_.update(o,e)}else i in this.nullGeometryFeatures_||(this.featuresRtree_&&this.featuresRtree_.remove(e),this.nullGeometryFeatures_[i]=e);var s=e.getId();if(void 0!==s){var a=s.toString();i in this.undefIdIndex_?(delete this.undefIdIndex_[i],this.idIndex_[a]=e):this.idIndex_[a]!==e&&(this.removeFromIdIndex_(e),this.idIndex_[a]=e)}else i in this.undefIdIndex_||(this.removeFromIdIndex_(e),this.undefIdIndex_[i]=e);this.changed(),this.dispatchEvent(new O(v.a.CHANGEFEATURE,e))},e.prototype.hasFeature=function(t){var e=t.getId();return void 0!==e?e in this.idIndex_:Object(r.c)(t)in this.undefIdIndex_},e.prototype.isEmpty=function(){return this.featuresRtree_.isEmpty()&&Object(g.d)(this.nullGeometryFeatures_)},e.prototype.loadFeatures=function(t,e,i){var r=this,n=this.loadedExtentsRtree_,o=this.strategy_(t,e);this.loading=!1;for(var s=function(t,s){var a=o[t];n.forEachInExtent(a,function(t){return Object(p.g)(t.extent,a)})||(r.loader_.call(r,a,e,i),n.insert(a,{extent:a.slice()}),r.loading=r.loader_!==f.c)},a=0,h=o.length;a<h;++a)s(a)},e.prototype.removeLoadedExtent=function(t){var e,i=this.loadedExtentsRtree_;i.forEachInExtent(t,function(i){if(Object(p.p)(i.extent,t))return e=i,!0}),e&&i.remove(e)},e.prototype.removeFeature=function(t){var e=Object(r.c)(t);e in this.nullGeometryFeatures_?delete this.nullGeometryFeatures_[e]:this.featuresRtree_&&this.featuresRtree_.remove(t),this.removeFeatureInternal(t),this.changed()},e.prototype.removeFeatureInternal=function(t){var e=Object(r.c)(t);this.featureChangeKeys_[e].forEach(c.e),delete this.featureChangeKeys_[e];var i=t.getId();void 0!==i?delete this.idIndex_[i.toString()]:delete this.undefIdIndex_[e],this.dispatchEvent(new O(v.a.REMOVEFEATURE,t))},e.prototype.removeFromIdIndex_=function(t){var e=!1;for(var i in this.idIndex_)if(this.idIndex_[i]===t){delete this.idIndex_[i],e=!0;break}return e},e.prototype.setLoader=function(t){this.loader_=t},e}(m.a);e.a=x},,,,,function(t,e,i){"use strict";i.d(e,"b",function(){return a}),i.d(e,"a",function(){return l}),i.d(e,"c",function(){return d});var r=i(9),n=i(6),o=/^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i,s=/^([a-z]*)$/i;function a(t){return"string"==typeof t?t:d(t)}var h,c,u=(h={},c=0,function(t){var e;if(h.hasOwnProperty(t))e=h[t];else{if(c>=1024){var i=0;for(var n in h)0==(3&i++)&&(delete h[n],--c)}e=function(t){var e,i,n,a,h;if(s.exec(t)&&(t=function(t){var e=document.createElement("div");if(e.style.color=t,""!==e.style.color){document.body.appendChild(e);var i=getComputedStyle(e).color;return document.body.removeChild(e),i}return""}(t)),o.exec(t)){var c,u=t.length-1;c=u<=4?1:2;var l=4===u||8===u;e=parseInt(t.substr(1+0*c,c),16),i=parseInt(t.substr(1+1*c,c),16),n=parseInt(t.substr(1+2*c,c),16),a=l?parseInt(t.substr(1+3*c,c),16):255,1==c&&(e=(e<<4)+e,i=(i<<4)+i,n=(n<<4)+n,l&&(a=(a<<4)+a)),h=[e,i,n,a/255]}else 0==t.indexOf("rgba(")?p(h=t.slice(5,-1).split(",").map(Number)):0==t.indexOf("rgb(")?((h=t.slice(4,-1).split(",").map(Number)).push(1),p(h)):Object(r.a)(!1,14);return h}(t),h[t]=e,++c}return e});function l(t){return Array.isArray(t)?t:u(t)}function p(t){return t[0]=Object(n.a)(t[0]+.5|0,0,255),t[1]=Object(n.a)(t[1]+.5|0,0,255),t[2]=Object(n.a)(t[2]+.5|0,0,255),t[3]=Object(n.a)(t[3],0,1),t}function d(t){var e=t[0];e!=(0|e)&&(e=e+.5|0);var i=t[1];i!=(0|i)&&(i=i+.5|0);var r=t[2];return r!=(0|r)&&(r=r+.5|0),"rgba("+e+","+i+","+r+","+(void 0===t[3]?1:t[3])+")"}},,,,function(t,e,i){"use strict";i.r(e),i.d(e,"createStyleFunction",function(){return h});var r=i(9),n=i(4),o=i(2),s=i(12),a=function(t){function e(e){if(t.call(this),this.id_=void 0,this.geometryName_="geometry",this.style_=null,this.styleFunction_=void 0,this.geometryChangeKey_=null,Object(n.a)(this,Object(s.b)(this.geometryName_),this.handleGeometryChanged_,this),e)if("function"==typeof e.getSimplifiedGeometry){var i=e;this.setGeometry(i)}else{var r=e;this.setProperties(r)}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.clone=function(){var t=new e(this.getProperties());t.setGeometryName(this.getGeometryName());var i=this.getGeometry();i&&t.setGeometry(i.clone());var r=this.getStyle();return r&&t.setStyle(r),t},e.prototype.getGeometry=function(){return this.get(this.geometryName_)},e.prototype.getId=function(){return this.id_},e.prototype.getGeometryName=function(){return this.geometryName_},e.prototype.getStyle=function(){return this.style_},e.prototype.getStyleFunction=function(){return this.styleFunction_},e.prototype.handleGeometryChange_=function(){this.changed()},e.prototype.handleGeometryChanged_=function(){this.geometryChangeKey_&&(Object(n.e)(this.geometryChangeKey_),this.geometryChangeKey_=null);var t=this.getGeometry();t&&(this.geometryChangeKey_=Object(n.a)(t,o.a.CHANGE,this.handleGeometryChange_,this)),this.changed()},e.prototype.setGeometry=function(t){this.set(this.geometryName_,t)},e.prototype.setStyle=function(t){this.style_=t,this.styleFunction_=t?h(t):void 0,this.changed()},e.prototype.setId=function(t){this.id_=t,this.changed()},e.prototype.setGeometryName=function(t){Object(n.c)(this,Object(s.b)(this.geometryName_),this.handleGeometryChanged_,this),this.geometryName_=t,Object(n.a)(this,Object(s.b)(this.geometryName_),this.handleGeometryChanged_,this),this.handleGeometryChanged_()},e}(s.a);function h(t){return"function"==typeof t?t:(Array.isArray(t)?e=t:(Object(r.a)("function"==typeof t.getZIndex,41),e=[t]),function(){return e});var e}e.default=a},function(t,e,i){"use strict";function r(t,e,i){return void 0===i&&(i=[0,0]),i[0]=t[0]+2*e,i[1]=t[1]+2*e,i}function n(t){return t[0]>0&&t[1]>0}function o(t,e,i){return void 0===i&&(i=[0,0]),i[0]=t[0]*e+.5|0,i[1]=t[1]*e+.5|0,i}function s(t,e){return Array.isArray(t)?t:(void 0===e?e=[t,t]:e[0]=e[1]=t,e)}i.d(e,"a",function(){return r}),i.d(e,"b",function(){return n}),i.d(e,"c",function(){return o}),i.d(e,"d",function(){return s})},,function(t,e,i){"use strict";function r(t,e,i){var r=void 0!==i?t.toFixed(i):""+t,n=r.indexOf(".");return(n=-1===n?r.length:n)>e?r:new Array(1+e-n).join("0")+r}function n(t,e){for(var i=(""+t).split("."),r=(""+e).split("."),n=0;n<Math.max(i.length,r.length);n++){var o=parseInt(i[n]||"0",10),s=parseInt(r[n]||"0",10);if(o>s)return 1;if(s>o)return-1}return 0}i.d(e,"b",function(){return r}),i.d(e,"a",function(){return n})},function(t,e,i){"use strict";var r=i(3),n=i(62),o=i.n(n),s=i(1),a=i(5),h=function(t){this.rbush_=o()(t,void 0),this.items_={}};h.prototype.insert=function(t,e){var i={minX:t[0],minY:t[1],maxX:t[2],maxY:t[3],value:e};this.rbush_.insert(i),this.items_[Object(r.c)(e)]=i},h.prototype.load=function(t,e){for(var i=new Array(e.length),n=0,o=e.length;n<o;n++){var s=t[n],a=e[n],h={minX:s[0],minY:s[1],maxX:s[2],maxY:s[3],value:a};i[n]=h,this.items_[Object(r.c)(a)]=h}this.rbush_.load(i)},h.prototype.remove=function(t){var e=Object(r.c)(t),i=this.items_[e];return delete this.items_[e],null!==this.rbush_.remove(i)},h.prototype.update=function(t,e){var i=this.items_[Object(r.c)(e)],n=[i.minX,i.minY,i.maxX,i.maxY];Object(s.p)(n,t)||(this.remove(e),this.insert(t,e))},h.prototype.getAll=function(){return this.rbush_.all().map(function(t){return t.value})},h.prototype.getInExtent=function(t){var e={minX:t[0],minY:t[1],maxX:t[2],maxY:t[3]};return this.rbush_.search(e).map(function(t){return t.value})},h.prototype.forEach=function(t,e){return this.forEach_(this.getAll(),t,e)},h.prototype.forEachInExtent=function(t,e,i){return this.forEach_(this.getInExtent(t),e,i)},h.prototype.forEach_=function(t,e,i){for(var r,n=0,o=t.length;n<o;n++)if(r=e.call(i,t[n]))return r;return r},h.prototype.isEmpty=function(){return Object(a.d)(this.items_)},h.prototype.clear=function(){this.rbush_.clear(),this.items_={}},h.prototype.getExtent=function(t){var e=this.rbush_.toJSON();return Object(s.k)(e.minX,e.minY,e.maxX,e.maxY,t)},h.prototype.concat=function(t){for(var e in this.rbush_.load(t.rbush_.all()),t.items_)this.items_[e]=t.items_[e]},e.a=h},function(t,e,i){"use strict";e.a={ADDFEATURE:"addfeature",CHANGEFEATURE:"changefeature",CLEAR:"clear",REMOVEFEATURE:"removefeature"}},function(t,e,i){"use strict";var r=i(3),n=i(12),o=i(15),s=i(16),a=function(t){function e(e){t.call(this),this.projection_=Object(o.d)(e.projection),this.attributions_=h(e.attributions),this.attributionsCollapsible_=void 0===e.attributionsCollapsible||e.attributionsCollapsible,this.loading=!1,this.state_=void 0!==e.state?e.state:s.a.READY,this.wrapX_=void 0!==e.wrapX&&e.wrapX}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getAttributions=function(){return this.attributions_},e.prototype.getAttributionsCollapsible=function(){return this.attributionsCollapsible_},e.prototype.getProjection=function(){return this.projection_},e.prototype.getResolutions=function(){return Object(r.b)()},e.prototype.getState=function(){return this.state_},e.prototype.getWrapX=function(){return this.wrapX_},e.prototype.refresh=function(){this.changed()},e.prototype.setAttributions=function(t){this.attributions_=h(t),this.changed()},e.prototype.setState=function(t){this.state_=t,this.changed()},e}(n.a);function h(t){return t?Array.isArray(t)?function(e){return t}:"function"==typeof t?t:function(e){return[t]}:null}e.a=a},function(t,e,i){"use strict";i.d(e,"c",function(){return o}),i.d(e,"d",function(){return s}),i.d(e,"b",function(){return a}),i.d(e,"a",function(){return h}),i.d(e,"e",function(){return c});var r,n,o="ol-hidden",s="ol-unselectable",a="ol-control",h="ol-collapsed",c=(n={},function(t){if(r||(r=document.createElement("div").style),!(t in n)){r.font=t;var e=r.fontFamily;if(r.font="",!e)return null;n[t]=e.split(/,\s?/)}return n[t]})},,,,,,,function(t,e,i){"use strict";t.exports=n,t.exports.default=n;var r=i(75);function n(t,e){if(!(this instanceof n))return new n(t,e);this._maxEntries=Math.max(4,t||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),e&&this._initFormat(e),this.clear()}function o(t,e,i){if(!i)return e.indexOf(t);for(var r=0;r<e.length;r++)if(i(t,e[r]))return r;return-1}function s(t,e){a(t,0,t.children.length,e,t)}function a(t,e,i,r,n){n||(n=_(null)),n.minX=1/0,n.minY=1/0,n.maxX=-1/0,n.maxY=-1/0;for(var o,s=e;s<i;s++)o=t.children[s],h(n,t.leaf?r(o):o);return n}function h(t,e){return t.minX=Math.min(t.minX,e.minX),t.minY=Math.min(t.minY,e.minY),t.maxX=Math.max(t.maxX,e.maxX),t.maxY=Math.max(t.maxY,e.maxY),t}function c(t,e){return t.minX-e.minX}function u(t,e){return t.minY-e.minY}function l(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function p(t){return t.maxX-t.minX+(t.maxY-t.minY)}function d(t,e){return t.minX<=e.minX&&t.minY<=e.minY&&e.maxX<=t.maxX&&e.maxY<=t.maxY}function f(t,e){return e.minX<=t.maxX&&e.minY<=t.maxY&&e.maxX>=t.minX&&e.maxY>=t.minY}function _(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function g(t,e,i,n,o){for(var s,a=[e,i];a.length;)(i=a.pop())-(e=a.pop())<=n||(s=e+Math.ceil((i-e)/n/2)*n,r(t,s,e,i,o),a.push(e,s,s,i))}n.prototype={all:function(){return this._all(this.data,[])},search:function(t){var e=this.data,i=[],r=this.toBBox;if(!f(t,e))return i;for(var n,o,s,a,h=[];e;){for(n=0,o=e.children.length;n<o;n++)s=e.children[n],f(t,a=e.leaf?r(s):s)&&(e.leaf?i.push(s):d(t,a)?this._all(s,i):h.push(s));e=h.pop()}return i},collides:function(t){var e=this.data,i=this.toBBox;if(!f(t,e))return!1;for(var r,n,o,s,a=[];e;){for(r=0,n=e.children.length;r<n;r++)if(o=e.children[r],f(t,s=e.leaf?i(o):o)){if(e.leaf||d(t,s))return!0;a.push(o)}e=a.pop()}return!1},load:function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var e=0,i=t.length;e<i;e++)this.insert(t[e]);return this}var r=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===r.height)this._splitRoot(this.data,r);else{if(this.data.height<r.height){var n=this.data;this.data=r,r=n}this._insert(r,this.data.height-r.height-1,!0)}else this.data=r;return this},insert:function(t){return t&&this._insert(t,this.data.height-1),this},clear:function(){return this.data=_([]),this},remove:function(t,e){if(!t)return this;for(var i,r,n,s,a=this.data,h=this.toBBox(t),c=[],u=[];a||c.length;){if(a||(a=c.pop(),r=c[c.length-1],i=u.pop(),s=!0),a.leaf&&-1!==(n=o(t,a.children,e)))return a.children.splice(n,1),c.push(a),this._condense(c),this;s||a.leaf||!d(a,h)?r?(i++,a=r.children[i],s=!1):a=null:(c.push(a),u.push(i),i=0,r=a,a=a.children[0])}return this},toBBox:function(t){return t},compareMinX:c,compareMinY:u,toJSON:function(){return this.data},fromJSON:function(t){return this.data=t,this},_all:function(t,e){for(var i=[];t;)t.leaf?e.push.apply(e,t.children):i.push.apply(i,t.children),t=i.pop();return e},_build:function(t,e,i,r){var n,o=i-e+1,a=this._maxEntries;if(o<=a)return s(n=_(t.slice(e,i+1)),this.toBBox),n;r||(r=Math.ceil(Math.log(o)/Math.log(a)),a=Math.ceil(o/Math.pow(a,r-1))),(n=_([])).leaf=!1,n.height=r;var h,c,u,l,p=Math.ceil(o/a),d=p*Math.ceil(Math.sqrt(a));for(g(t,e,i,d,this.compareMinX),h=e;h<=i;h+=d)for(g(t,h,u=Math.min(h+d-1,i),p,this.compareMinY),c=h;c<=u;c+=p)l=Math.min(c+p-1,u),n.children.push(this._build(t,c,l,r-1));return s(n,this.toBBox),n},_chooseSubtree:function(t,e,i,r){for(var n,o,s,a,h,c,u,p,d,f;r.push(e),!e.leaf&&r.length-1!==i;){for(u=p=1/0,n=0,o=e.children.length;n<o;n++)h=l(s=e.children[n]),d=t,f=s,(c=(Math.max(f.maxX,d.maxX)-Math.min(f.minX,d.minX))*(Math.max(f.maxY,d.maxY)-Math.min(f.minY,d.minY))-h)<p?(p=c,u=h<u?h:u,a=s):c===p&&h<u&&(u=h,a=s);e=a||e.children[0]}return e},_insert:function(t,e,i){var r=this.toBBox,n=i?t:r(t),o=[],s=this._chooseSubtree(n,this.data,e,o);for(s.children.push(t),h(s,n);e>=0&&o[e].children.length>this._maxEntries;)this._split(o,e),e--;this._adjustParentBBoxes(n,o,e)},_split:function(t,e){var i=t[e],r=i.children.length,n=this._minEntries;this._chooseSplitAxis(i,n,r);var o=this._chooseSplitIndex(i,n,r),a=_(i.children.splice(o,i.children.length-o));a.height=i.height,a.leaf=i.leaf,s(i,this.toBBox),s(a,this.toBBox),e?t[e-1].children.push(a):this._splitRoot(i,a)},_splitRoot:function(t,e){this.data=_([t,e]),this.data.height=t.height+1,this.data.leaf=!1,s(this.data,this.toBBox)},_chooseSplitIndex:function(t,e,i){var r,n,o,s,h,c,u,p,d,f,_,g,m,y;for(c=u=1/0,r=e;r<=i-e;r++)n=a(t,0,r,this.toBBox),o=a(t,r,i,this.toBBox),d=n,f=o,_=void 0,g=void 0,m=void 0,y=void 0,_=Math.max(d.minX,f.minX),g=Math.max(d.minY,f.minY),m=Math.min(d.maxX,f.maxX),y=Math.min(d.maxY,f.maxY),s=Math.max(0,m-_)*Math.max(0,y-g),h=l(n)+l(o),s<c?(c=s,p=r,u=h<u?h:u):s===c&&h<u&&(u=h,p=r);return p},_chooseSplitAxis:function(t,e,i){var r=t.leaf?this.compareMinX:c,n=t.leaf?this.compareMinY:u;this._allDistMargin(t,e,i,r)<this._allDistMargin(t,e,i,n)&&t.children.sort(r)},_allDistMargin:function(t,e,i,r){t.children.sort(r);var n,o,s=this.toBBox,c=a(t,0,e,s),u=a(t,i-e,i,s),l=p(c)+p(u);for(n=e;n<i-e;n++)o=t.children[n],h(c,t.leaf?s(o):o),l+=p(c);for(n=i-e-1;n>=e;n--)o=t.children[n],h(u,t.leaf?s(o):o),l+=p(u);return l},_adjustParentBBoxes:function(t,e,i){for(var r=i;r>=0;r--)h(e[r],t)},_condense:function(t){for(var e,i=t.length-1;i>=0;i--)0===t[i].children.length?i>0?(e=t[i-1].children).splice(e.indexOf(t[i]),1):this.clear():s(t[i],this.toBBox)},_initFormat:function(t){var e=["return a"," - b",";"];this.compareMinX=new Function("a","b",e.join(t[0])),this.compareMinY=new Function("a","b",e.join(t[1])),this.toBBox=new Function("a","return {minX: a"+t[0]+", minY: a"+t[1]+", maxX: a"+t[2]+", maxY: a"+t[3]+"};")}}},function(t,e,i){"use strict";i.d(e,"b",function(){return r}),i.d(e,"a",function(){return n});var r=.5,n=!0},function(t,e,i){"use strict";i.d(e,"a",function(){return r}),i.d(e,"b",function(){return n});var r=42,n=256},,,,,function(t,e,i){"use strict";i.d(e,"a",function(){return n});var r=i(44);function n(t){return Array.isArray(t)?Object(r.c)(t):t}},,,function(t,e,i){"use strict";var r=i(8),n={ARRAY_BUFFER:"arraybuffer",JSON:"json",TEXT:"text",XML:"xml"};function o(t,e,i,r){return function(o,s,a){var h=new XMLHttpRequest;h.open("GET","function"==typeof t?t(o,s,a):t,!0),e.getType()==n.ARRAY_BUFFER&&(h.responseType="arraybuffer"),h.onload=function(t){if(!h.status||h.status>=200&&h.status<300){var o,s=e.getType();s==n.JSON||s==n.TEXT?o=h.responseText:s==n.XML?(o=h.responseXML)||(o=(new DOMParser).parseFromString(h.responseText,"application/xml")):s==n.ARRAY_BUFFER&&(o=h.response),o?i.call(this,e.readFeatures(o,{featureProjection:a}),e.readProjection(o),e.getLastExtent()):r.call(this)}else r.call(this)}.bind(this),h.onerror=function(){r.call(this)}.bind(this),h.send()}}function s(t,e){return o(t,e,function(t,e){"function"==typeof this.addFeatures&&this.addFeatures(t)},r.c)}i.d(e,"a",function(){return o}),i.d(e,"b",function(){return s})},,,function(t,e,i){t.exports=function(){"use strict";function t(t,e,i){var r=t[e];t[e]=t[i],t[i]=r}function e(t,e){return t<e?-1:t>e?1:0}return function(i,r,n,o,s){!function e(i,r,n,o,s){for(;o>n;){if(o-n>600){var a=o-n+1,h=r-n+1,c=Math.log(a),u=.5*Math.exp(2*c/3),l=.5*Math.sqrt(c*u*(a-u)/a)*(h-a/2<0?-1:1),p=Math.max(n,Math.floor(r-h*u/a+l)),d=Math.min(o,Math.floor(r+(a-h)*u/a+l));e(i,r,p,d,s)}var f=i[r],_=n,g=o;for(t(i,n,r),s(i[o],f)>0&&t(i,n,o);_<g;){for(t(i,_,g),_++,g--;s(i[_],f)<0;)_++;for(;s(i[g],f)>0;)g--}0===s(i[n],f)?t(i,n,g):t(i,++g,o),g<=r&&(n=g+1),r<=g&&(o=g-1)}}(i,r,n||0,o||i.length-1,s||e)}}()},,function(t,e,i){"use strict";var r=i(7),n=i(69),o=i(1),s=i(10),a=i(20),h=i(68),c=i(28),u=i(90),l=i(38),p=i(17),d=function(t){function e(e,i,r,n,o){t.call(this),this.context_=e,this.pixelRatio_=i,this.extent_=r,this.transform_=n,this.viewRotation_=o,this.contextFillState_=null,this.contextStrokeState_=null,this.contextTextState_=null,this.fillState_=null,this.strokeState_=null,this.image_=null,this.imageAnchorX_=0,this.imageAnchorY_=0,this.imageHeight_=0,this.imageOpacity_=0,this.imageOriginX_=0,this.imageOriginY_=0,this.imageRotateWithView_=!1,this.imageRotation_=0,this.imageScale_=0,this.imageWidth_=0,this.text_="",this.textOffsetX_=0,this.textOffsetY_=0,this.textRotateWithView_=!1,this.textRotation_=0,this.textScale_=0,this.textFillState_=null,this.textStrokeState_=null,this.textState_=null,this.pixelCoordinates_=[],this.tmpLocalTransform_=Object(p.c)()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.drawImages_=function(t,e,i,r){if(this.image_){var n=Object(h.c)(t,e,i,2,this.transform_,this.pixelCoordinates_),o=this.context_,s=this.tmpLocalTransform_,a=o.globalAlpha;1!=this.imageOpacity_&&(o.globalAlpha=a*this.imageOpacity_);var c=this.imageRotation_;this.imageRotateWithView_&&(c+=this.viewRotation_);for(var u=0,l=n.length;u<l;u+=2){var d=n[u]-this.imageAnchorX_,f=n[u+1]-this.imageAnchorY_;if(0!==c||1!=this.imageScale_){var _=d+this.imageAnchorX_,g=f+this.imageAnchorY_;Object(p.b)(s,_,g,this.imageScale_,this.imageScale_,c,-_,-g),o.setTransform.apply(o,s)}o.drawImage(this.image_,this.imageOriginX_,this.imageOriginY_,this.imageWidth_,this.imageHeight_,d,f,this.imageWidth_,this.imageHeight_)}0===c&&1==this.imageScale_||o.setTransform(1,0,0,1,0,0),1!=this.imageOpacity_&&(o.globalAlpha=a)}},e.prototype.drawText_=function(t,e,i,r){if(this.textState_&&""!==this.text_){this.textFillState_&&this.setContextFillState_(this.textFillState_),this.textStrokeState_&&this.setContextStrokeState_(this.textStrokeState_),this.setContextTextState_(this.textState_);var n=Object(h.c)(t,e,i,r,this.transform_,this.pixelCoordinates_),o=this.context_,s=this.textRotation_;for(this.textRotateWithView_&&(s+=this.viewRotation_);e<i;e+=r){var a=n[e]+this.textOffsetX_,c=n[e+1]+this.textOffsetY_;if(0!==s||1!=this.textScale_){var u=Object(p.b)(this.tmpLocalTransform_,a,c,this.textScale_,this.textScale_,s,-a,-c);o.setTransform.apply(o,u)}this.textStrokeState_&&o.strokeText(this.text_,a,c),this.textFillState_&&o.fillText(this.text_,a,c)}0===s&&1==this.textScale_||o.setTransform(1,0,0,1,0,0)}},e.prototype.moveToLineTo_=function(t,e,i,r,n){var o=this.context_,s=Object(h.c)(t,e,i,r,this.transform_,this.pixelCoordinates_);o.moveTo(s[0],s[1]);var a=s.length;n&&(a-=2);for(var c=2;c<a;c+=2)o.lineTo(s[c],s[c+1]);return n&&o.closePath(),i},e.prototype.drawRings_=function(t,e,i,r){for(var n=0,o=i.length;n<o;++n)e=this.moveToLineTo_(t,e,i[n],r,!0);return e},e.prototype.drawCircle=function(t){if(Object(o.F)(this.extent_,t.getExtent())){if(this.fillState_||this.strokeState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);var e=Object(a.b)(t,this.transform_,this.pixelCoordinates_),i=e[2]-e[0],r=e[3]-e[1],n=Math.sqrt(i*i+r*r),s=this.context_;s.beginPath(),s.arc(e[0],e[1],n,0,2*Math.PI),this.fillState_&&s.fill(),this.strokeState_&&s.stroke()}""!==this.text_&&this.drawText_(t.getCenter(),0,2,2)}},e.prototype.setStyle=function(t){this.setFillStrokeStyle(t.getFill(),t.getStroke()),this.setImageStyle(t.getImage()),this.setTextStyle(t.getText())},e.prototype.drawGeometry=function(t){switch(t.getType()){case s.a.POINT:this.drawPoint(t);break;case s.a.LINE_STRING:this.drawLineString(t);break;case s.a.POLYGON:this.drawPolygon(t);break;case s.a.MULTI_POINT:this.drawMultiPoint(t);break;case s.a.MULTI_LINE_STRING:this.drawMultiLineString(t);break;case s.a.MULTI_POLYGON:this.drawMultiPolygon(t);break;case s.a.GEOMETRY_COLLECTION:this.drawGeometryCollection(t);break;case s.a.CIRCLE:this.drawCircle(t)}},e.prototype.drawFeature=function(t,e){var i=e.getGeometryFunction()(t);i&&Object(o.F)(this.extent_,i.getExtent())&&(this.setStyle(e),this.drawGeometry(i))},e.prototype.drawGeometryCollection=function(t){for(var e=t.getGeometriesArray(),i=0,r=e.length;i<r;++i)this.drawGeometry(e[i])},e.prototype.drawPoint=function(t){var e=t.getFlatCoordinates(),i=t.getStride();this.image_&&this.drawImages_(e,0,e.length,i),""!==this.text_&&this.drawText_(e,0,e.length,i)},e.prototype.drawMultiPoint=function(t){var e=t.getFlatCoordinates(),i=t.getStride();this.image_&&this.drawImages_(e,0,e.length,i),""!==this.text_&&this.drawText_(e,0,e.length,i)},e.prototype.drawLineString=function(t){if(Object(o.F)(this.extent_,t.getExtent())){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);var e=this.context_,i=t.getFlatCoordinates();e.beginPath(),this.moveToLineTo_(i,0,i.length,t.getStride(),!1),e.stroke()}if(""!==this.text_){var r=t.getFlatMidpoint();this.drawText_(r,0,2,2)}}},e.prototype.drawMultiLineString=function(t){var e=t.getExtent();if(Object(o.F)(this.extent_,e)){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);var i=this.context_,r=t.getFlatCoordinates(),n=0,s=t.getEnds(),a=t.getStride();i.beginPath();for(var h=0,c=s.length;h<c;++h)n=this.moveToLineTo_(r,n,s[h],a,!1);i.stroke()}if(""!==this.text_){var u=t.getFlatMidpoints();this.drawText_(u,0,u.length,2)}}},e.prototype.drawPolygon=function(t){if(Object(o.F)(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);var e=this.context_;e.beginPath(),this.drawRings_(t.getOrientedFlatCoordinates(),0,t.getEnds(),t.getStride()),this.fillState_&&e.fill(),this.strokeState_&&e.stroke()}if(""!==this.text_){var i=t.getFlatInteriorPoint();this.drawText_(i,0,2,2)}}},e.prototype.drawMultiPolygon=function(t){if(Object(o.F)(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);var e=this.context_,i=t.getOrientedFlatCoordinates(),r=0,n=t.getEndss(),s=t.getStride();e.beginPath();for(var a=0,h=n.length;a<h;++a){var c=n[a];r=this.drawRings_(i,r,c,s)}this.fillState_&&e.fill(),this.strokeState_&&e.stroke()}if(""!==this.text_){var u=t.getFlatInteriorPoints();this.drawText_(u,0,u.length,2)}}},e.prototype.setContextFillState_=function(t){var e=this.context_,i=this.contextFillState_;i?i.fillStyle!=t.fillStyle&&(i.fillStyle=e.fillStyle=t.fillStyle):(e.fillStyle=t.fillStyle,this.contextFillState_={fillStyle:t.fillStyle})},e.prototype.setContextStrokeState_=function(t){var e=this.context_,i=this.contextStrokeState_;i?(i.lineCap!=t.lineCap&&(i.lineCap=e.lineCap=t.lineCap),c.a&&(Object(r.b)(i.lineDash,t.lineDash)||e.setLineDash(i.lineDash=t.lineDash),i.lineDashOffset!=t.lineDashOffset&&(i.lineDashOffset=e.lineDashOffset=t.lineDashOffset)),i.lineJoin!=t.lineJoin&&(i.lineJoin=e.lineJoin=t.lineJoin),i.lineWidth!=t.lineWidth&&(i.lineWidth=e.lineWidth=t.lineWidth),i.miterLimit!=t.miterLimit&&(i.miterLimit=e.miterLimit=t.miterLimit),i.strokeStyle!=t.strokeStyle&&(i.strokeStyle=e.strokeStyle=t.strokeStyle)):(e.lineCap=t.lineCap,c.a&&(e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset),e.lineJoin=t.lineJoin,e.lineWidth=t.lineWidth,e.miterLimit=t.miterLimit,e.strokeStyle=t.strokeStyle,this.contextStrokeState_={lineCap:t.lineCap,lineDash:t.lineDash,lineDashOffset:t.lineDashOffset,lineJoin:t.lineJoin,lineWidth:t.lineWidth,miterLimit:t.miterLimit,strokeStyle:t.strokeStyle})},e.prototype.setContextTextState_=function(t){var e=this.context_,i=this.contextTextState_,r=t.textAlign?t.textAlign:l.l;i?(i.font!=t.font&&(i.font=e.font=t.font),i.textAlign!=r&&(i.textAlign=e.textAlign=r),i.textBaseline!=t.textBaseline&&(i.textBaseline=e.textBaseline=t.textBaseline)):(e.font=t.font,e.textAlign=r,e.textBaseline=t.textBaseline,this.contextTextState_={font:t.font,textAlign:r,textBaseline:t.textBaseline})},e.prototype.setFillStrokeStyle=function(t,e){if(t){var i=t.getColor();this.fillState_={fillStyle:Object(n.a)(i||l.b)}}else this.fillState_=null;if(e){var r=e.getColor(),o=e.getLineCap(),s=e.getLineDash(),a=e.getLineDashOffset(),h=e.getLineJoin(),c=e.getWidth(),u=e.getMiterLimit();this.strokeState_={lineCap:void 0!==o?o:l.d,lineDash:s||l.e,lineDashOffset:a||l.f,lineJoin:void 0!==h?h:l.g,lineWidth:this.pixelRatio_*(void 0!==c?c:l.h),miterLimit:void 0!==u?u:l.i,strokeStyle:Object(n.a)(r||l.k)}}else this.strokeState_=null},e.prototype.setImageStyle=function(t){if(t){var e=t.getAnchor(),i=t.getImage(1),r=t.getOrigin(),n=t.getSize();this.imageAnchorX_=e[0],this.imageAnchorY_=e[1],this.imageHeight_=n[1],this.image_=i,this.imageOpacity_=t.getOpacity(),this.imageOriginX_=r[0],this.imageOriginY_=r[1],this.imageRotateWithView_=t.getRotateWithView(),this.imageRotation_=t.getRotation(),this.imageScale_=t.getScale()*this.pixelRatio_,this.imageWidth_=n[0]}else this.image_=null},e.prototype.setTextStyle=function(t){if(t){var e=t.getFill();if(e){var i=e.getColor();this.textFillState_={fillStyle:Object(n.a)(i||l.b)}}else this.textFillState_=null;var r=t.getStroke();if(r){var o=r.getColor(),s=r.getLineCap(),a=r.getLineDash(),h=r.getLineDashOffset(),c=r.getLineJoin(),u=r.getWidth(),p=r.getMiterLimit();this.textStrokeState_={lineCap:void 0!==s?s:l.d,lineDash:a||l.e,lineDashOffset:h||l.f,lineJoin:void 0!==c?c:l.g,lineWidth:void 0!==u?u:l.h,miterLimit:void 0!==p?p:l.i,strokeStyle:Object(n.a)(o||l.k)}}else this.textStrokeState_=null;var d=t.getFont(),f=t.getOffsetX(),_=t.getOffsetY(),g=t.getRotateWithView(),m=t.getRotation(),y=t.getScale(),v=t.getText(),b=t.getTextAlign(),O=t.getTextBaseline();this.textState_={font:void 0!==d?d:l.c,textAlign:void 0!==b?b:l.l,textBaseline:void 0!==O?O:l.m},this.text_=void 0!==v?v:"",this.textOffsetX_=void 0!==f?this.pixelRatio_*f:0,this.textOffsetY_=void 0!==_?this.pixelRatio_*_:0,this.textRotateWithView_=void 0!==g&&g,this.textRotation_=void 0!==m?m:0,this.textScale_=this.pixelRatio_*(void 0!==y?y:1)}else this.text_=""},e}(u.a);e.a=d},function(t,e,i){"use strict";var r=function(t){function e(e,i,r,n,o){t.call(this,e),this.vectorContext=i,this.frameState=r,this.context=n,this.glContext=o}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(i(11).a);e.a=r},function(t,e,i){"use strict";var r=i(80),n=i(30),o=function(t){function e(e,i,r,o,s){var a=void 0!==s?n.a.IDLE:n.a.LOADED;t.call(this,e,i,r,a),this.loader_=void 0!==s?s:null,this.canvas_=o,this.error_=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getError=function(){return this.error_},e.prototype.handleLoad_=function(t){t?(this.error_=t,this.state=n.a.ERROR):this.state=n.a.LOADED,this.changed()},e.prototype.load=function(){this.state==n.a.IDLE&&(this.state=n.a.LOADING,this.changed(),this.loader_(this.handleLoad_.bind(this)))},e.prototype.getImage=function(){return this.canvas_},e}(r.a);e.a=o},function(t,e,i){"use strict";var r=i(3),n=i(40),o=i(2),s=function(t){function e(e,i,r,n){t.call(this),this.extent=e,this.pixelRatio_=r,this.resolution=i,this.state=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.changed=function(){this.dispatchEvent(o.a.CHANGE)},e.prototype.getExtent=function(){return this.extent},e.prototype.getImage=function(){return Object(r.b)()},e.prototype.getPixelRatio=function(){return this.pixelRatio_},e.prototype.getResolution=function(){return this.resolution},e.prototype.getState=function(){return this.state},e.prototype.load=function(){Object(r.b)()},e}(n.a);e.a=s},function(t,e,i){"use strict";var r=i(3),n=i(18),o=i(13),s=i(1),a=i(97),h=i(17),c=function(t){function e(e){t.call(this,e),this.coordinateToCanvasPixelTransform=Object(h.c)(),this.hitCanvasContext_=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.composeFrame=function(t,e,i){this.preCompose(i,t);var r=this.getImage();if(r){var n=e.extent,o=void 0!==n&&!Object(s.g)(n,t.extent)&&Object(s.F)(n,t.extent);o&&this.clip(i,t,n);var a=this.getImageTransform(),h=i.globalAlpha;i.globalAlpha=e.opacity;var c=a[4],u=a[5],l=r.width*a[0],p=r.height*a[3];l>=.5&&p>=.5&&i.drawImage(r,0,0,+r.width,+r.height,Math.round(c),Math.round(u),Math.round(l),Math.round(p)),i.globalAlpha=h,o&&i.restore()}this.postCompose(i,t,e)},e.prototype.getImage=function(){return Object(r.b)()},e.prototype.getImageTransform=function(){return Object(r.b)()},e.prototype.forEachLayerAtCoordinate=function(t,e,i,r,s){if(this.getImage()){var a=Object(h.a)(this.coordinateToCanvasPixelTransform,t.slice());Object(n.g)(a,e.viewState.resolution/this.renderedResolution),this.hitCanvasContext_||(this.hitCanvasContext_=Object(o.a)(1,1)),this.hitCanvasContext_.clearRect(0,0,1,1),this.hitCanvasContext_.drawImage(this.getImage(),a[0],a[1],1,1,0,0,1,1);var c=this.hitCanvasContext_.getImageData(0,0,1,1).data;return c[3]>0?r.call(s,this.getLayer(),c):void 0}},e}(a.a);e.a=c},,,,,function(t,e,i){"use strict";var r=i(9),n=i(40),o=i(2),s=function(t){function e(e){t.call(this),this.highWaterMark=void 0!==e?e:2048,this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.canExpireCache=function(){return this.getCount()>this.highWaterMark},e.prototype.clear=function(){this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null,this.dispatchEvent(o.a.CLEAR)},e.prototype.containsKey=function(t){return this.entries_.hasOwnProperty(t)},e.prototype.forEach=function(t,e){for(var i=this.oldest_;i;)t.call(e,i.value_,i.key_,this),i=i.newer},e.prototype.get=function(t){var e=this.entries_[t];return Object(r.a)(void 0!==e,15),e===this.newest_?e.value_:(e===this.oldest_?(this.oldest_=this.oldest_.newer,this.oldest_.older=null):(e.newer.older=e.older,e.older.newer=e.newer),e.newer=null,e.older=this.newest_,this.newest_.newer=e,this.newest_=e,e.value_)},e.prototype.remove=function(t){var e=this.entries_[t];return Object(r.a)(void 0!==e,15),e===this.newest_?(this.newest_=e.older,this.newest_&&(this.newest_.newer=null)):e===this.oldest_?(this.oldest_=e.newer,this.oldest_&&(this.oldest_.older=null)):(e.newer.older=e.older,e.older.newer=e.newer),delete this.entries_[t],--this.count_,e.value_},e.prototype.getCount=function(){return this.count_},e.prototype.getKeys=function(){var t,e=new Array(this.count_),i=0;for(t=this.newest_;t;t=t.older)e[i++]=t.key_;return e},e.prototype.getValues=function(){var t,e=new Array(this.count_),i=0;for(t=this.newest_;t;t=t.older)e[i++]=t.value_;return e},e.prototype.peekLast=function(){return this.oldest_.value_},e.prototype.peekLastKey=function(){return this.oldest_.key_},e.prototype.peekFirstKey=function(){return this.newest_.key_},e.prototype.pop=function(){var t=this.oldest_;return delete this.entries_[t.key_],t.newer&&(t.newer.older=null),this.oldest_=t.newer,this.oldest_||(this.newest_=null),--this.count_,t.value_},e.prototype.replace=function(t,e){this.get(t),this.entries_[t].value_=e},e.prototype.set=function(t,e){Object(r.a)(!(t in this.entries_),16);var i={key_:t,newer:null,older:this.newest_,value_:e};this.newest_?this.newest_.newer=i:this.oldest_=i,this.newest_=i,this.entries_[t]=i,++this.count_},e.prototype.setSize=function(t){this.highWaterMark=t},e.prototype.prune=function(){for(;this.canExpireCache();)this.pop()},e}(n.a);e.a=s},,,,function(t,e,i){"use strict";var r=function(){};r.prototype.drawCustom=function(t,e,i){},r.prototype.drawGeometry=function(t){},r.prototype.setStyle=function(t){},r.prototype.drawCircle=function(t,e){},r.prototype.drawFeature=function(t,e){},r.prototype.drawGeometryCollection=function(t,e){},r.prototype.drawLineString=function(t,e){},r.prototype.drawMultiLineString=function(t,e){},r.prototype.drawMultiPoint=function(t,e){},r.prototype.drawMultiPolygon=function(t,e){},r.prototype.drawPoint=function(t,e){},r.prototype.drawPolygon=function(t,e){},r.prototype.drawText=function(t,e){},r.prototype.setFillStrokeStyle=function(t,e){},r.prototype.setImageStyle=function(t,e){},r.prototype.setTextStyle=function(t,e){},e.a=r},function(t,e,i){"use strict";var r=i(3),n=i(29),o=i(92),s=i(19),a=i(14),h=i(13),c=i(1),u=i(81),l=i(17),p=function(t){function e(e,i){t.call(this,e),this.context=i?null:Object(h.a)(),this.oversampling_,this.renderedExtent_=null,this.renderedRevision,this.renderedTiles=[],this.newTiles_=!1,this.tmpExtent=Object(c.j)(),this.tmpTileRange_=new o.b(0,0,0,0),this.imageTransform_=Object(l.c)(),this.zDirection=0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.isDrawableTile_=function(t){var e=this.getLayer(),i=t.getState(),r=e.getUseInterimTilesOnError();return i==s.a.LOADED||i==s.a.EMPTY||i==s.a.ERROR&&!r},e.prototype.getTile=function(t,e,i,r,n){var o=this.getLayer(),a=o.getSource().getTile(t,e,i,r,n);return a.getState()==s.a.ERROR&&(o.getUseInterimTilesOnError()?o.getPreload()>0&&(this.newTiles_=!0):a.setState(s.a.LOADED)),this.isDrawableTile_(a)||(a=a.getInterimTile()),a},e.prototype.prepareFrame=function(t,e){var i=t.pixelRatio,n=t.size,o=t.viewState,h=o.projection,u=o.resolution,p=o.center,d=this.getLayer(),f=d.getSource(),_=f.getRevision(),g=f.getTileGridForProjection(h),m=g.getZForResolution(u,this.zDirection),y=g.getResolution(m),v=Math.round(u/y)||1,b=t.extent;if(void 0!==e.extent&&(b=Object(c.B)(b,e.extent)),Object(c.H)(b))return!1;var O=g.getTileRangeForExtentAndZ(b,m),x=g.getTileRangeExtent(m,O),j=f.getTilePixelRatio(i),E={};E[m]={};var T,S,R,C=this.createLoadedTileFinder(f,h,E),I=t.viewHints,F=I[a.a.ANIMATING]||I[a.a.INTERACTING],w=this.tmpExtent,L=this.tmpTileRange_;for(this.newTiles_=!1,S=O.minX;S<=O.maxX;++S)for(R=O.minY;R<=O.maxY;++R)if(!(Date.now()-t.time>16&&F)){if(T=this.getTile(m,S,R,i,h),this.isDrawableTile_(T)){var A=Object(r.c)(this);if(T.getState()==s.a.LOADED){E[m][T.tileCoord.toString()]=T;var P=T.inTransition(A);this.newTiles_||!P&&-1!==this.renderedTiles.indexOf(T)||(this.newTiles_=!0)}if(1===T.getAlpha(A,t.time))continue}var M=g.getTileCoordChildTileRange(T.tileCoord,L,w),G=!1;M&&(G=C(m+1,M)),G||g.forEachTileCoordParentTileRange(T.tileCoord,C,null,L,w)}var D=y*i/j*v;if(!(this.renderedResolution&&Date.now()-t.time>16&&F)&&(this.newTiles_||!this.renderedExtent_||!Object(c.g)(this.renderedExtent_,b)||this.renderedRevision!=_||v!=this.oversampling_||!F&&D!=this.renderedResolution)){var X=this.context;if(X){var k=f.getTilePixelSize(m,i,h),N=Math.round(O.getWidth()*k[0]/v),z=Math.round(O.getHeight()*k[1]/v),Y=X.canvas;Y.width!=N||Y.height!=z?(this.oversampling_=v,Y.width=N,Y.height=z):(this.renderedExtent_&&!Object(c.p)(x,this.renderedExtent_)&&X.clearRect(0,0,N,z),v=this.oversampling_)}this.renderedTiles.length=0;var U,K,q,W,Z,B,H,J,V,Q,$=Object.keys(E).map(Number);for($.sort(function(t,e){return t===m?1:e===m?-1:t>e?1:t<e?-1:0}),W=0,Z=$.length;W<Z;++W)for(var tt in q=$[W],K=f.getTilePixelSize(q,i,h),U=g.getResolution(q)/y,H=j*f.getGutterForProjection(h),J=E[q])T=J[tt],S=((B=g.getTileCoordExtent(T.getTileCoord(),w))[0]-x[0])/y*j/v,R=(x[3]-B[3])/y*j/v,V=K[0]*U/v,Q=K[1]*U/v,this.drawTileImage(T,t,e,S,R,V,Q,H,m===q),this.renderedTiles.push(T);this.renderedRevision=_,this.renderedResolution=y*i/j*v,this.renderedExtent_=x}var et=this.renderedResolution/u,it=Object(l.b)(this.imageTransform_,i*n[0]/2,i*n[1]/2,et,et,0,(this.renderedExtent_[0]-p[0])/this.renderedResolution*i,(p[1]-this.renderedExtent_[3])/this.renderedResolution*i);return Object(l.b)(this.coordinateToCanvasPixelTransform,i*n[0]/2-it[4],i*n[1]/2-it[5],i/u,-i/u,0,-p[0],-p[1]),this.updateUsedTiles(t.usedTiles,f,m,O),this.manageTilePyramid(t,f,g,i,h,b,m,d.getPreload()),this.scheduleExpireCache(t,f),this.renderedTiles.length>0},e.prototype.drawTileImage=function(t,e,i,n,o,s,a,h,c){var u=this.getTileImage(t);if(u){var l=Object(r.c)(this),p=c?t.getAlpha(l,e.time):1,d=this.getLayer().getSource();1!==p||d.getOpaque(e.viewState.projection)||this.context.clearRect(n,o,s,a);var f=p!==this.context.globalAlpha;f&&(this.context.save(),this.context.globalAlpha=p),this.context.drawImage(u,h,h,u.width-2*h,u.height-2*h,n,o,s,a),f&&this.context.restore(),1!==p?e.animate=!0:c&&t.endTransition(l)}},e.prototype.getImage=function(){var t=this.context;return t?t.canvas:null},e.prototype.getImageTransform=function(){return this.imageTransform_},e.prototype.getTileImage=function(t){return t.getImage()},e}(u.a);p.handles=function(t){return t.getType()===n.a.TILE},p.create=function(t,e){return new p(e)},p.prototype.getLayer,e.a=p},function(t,e,i){"use strict";i.d(e,"a",function(){return n});var r=function(t,e,i,r){this.minX=t,this.maxX=e,this.minY=i,this.maxY=r};function n(t,e,i,n,o){return void 0!==o?(o.minX=t,o.maxX=e,o.minY=i,o.maxY=n,o):new r(t,e,i,n)}r.prototype.contains=function(t){return this.containsXY(t[1],t[2])},r.prototype.containsTileRange=function(t){return this.minX<=t.minX&&t.maxX<=this.maxX&&this.minY<=t.minY&&t.maxY<=this.maxY},r.prototype.containsXY=function(t,e){return this.minX<=t&&t<=this.maxX&&this.minY<=e&&e<=this.maxY},r.prototype.equals=function(t){return this.minX==t.minX&&this.minY==t.minY&&this.maxX==t.maxX&&this.maxY==t.maxY},r.prototype.extend=function(t){t.minX<this.minX&&(this.minX=t.minX),t.maxX>this.maxX&&(this.maxX=t.maxX),t.minY<this.minY&&(this.minY=t.minY),t.maxY>this.maxY&&(this.maxY=t.maxY)},r.prototype.getHeight=function(){return this.maxY-this.minY+1},r.prototype.getSize=function(){return[this.getWidth(),this.getHeight()]},r.prototype.getWidth=function(){return this.maxX-this.minX+1},r.prototype.intersects=function(t){return this.minX<=t.maxX&&this.maxX>=t.minX&&this.minY<=t.maxY&&this.maxY>=t.minY},e.b=r},function(t,e,i){"use strict";i.d(e,"a",function(){return o});var r=i(9),n=i(5),o=1/0,s=function(t,e){this.priorityFunction_=t,this.keyFunction_=e,this.elements_=[],this.priorities_=[],this.queuedElements_={}};s.prototype.clear=function(){this.elements_.length=0,this.priorities_.length=0,Object(n.b)(this.queuedElements_)},s.prototype.dequeue=function(){var t=this.elements_,e=this.priorities_,i=t[0];1==t.length?(t.length=0,e.length=0):(t[0]=t.pop(),e[0]=e.pop(),this.siftUp_(0));var r=this.keyFunction_(i);return delete this.queuedElements_[r],i},s.prototype.enqueue=function(t){Object(r.a)(!(this.keyFunction_(t)in this.queuedElements_),31);var e=this.priorityFunction_(t);return e!=o&&(this.elements_.push(t),this.priorities_.push(e),this.queuedElements_[this.keyFunction_(t)]=!0,this.siftDown_(0,this.elements_.length-1),!0)},s.prototype.getCount=function(){return this.elements_.length},s.prototype.getLeftChildIndex_=function(t){return 2*t+1},s.prototype.getRightChildIndex_=function(t){return 2*t+2},s.prototype.getParentIndex_=function(t){return t-1>>1},s.prototype.heapify_=function(){var t;for(t=(this.elements_.length>>1)-1;t>=0;t--)this.siftUp_(t)},s.prototype.isEmpty=function(){return 0===this.elements_.length},s.prototype.isKeyQueued=function(t){return t in this.queuedElements_},s.prototype.isQueued=function(t){return this.isKeyQueued(this.keyFunction_(t))},s.prototype.siftUp_=function(t){for(var e=this.elements_,i=this.priorities_,r=e.length,n=e[t],o=i[t],s=t;t<r>>1;){var a=this.getLeftChildIndex_(t),h=this.getRightChildIndex_(t),c=h<r&&i[h]<i[a]?h:a;e[t]=e[c],i[t]=i[c],t=c}e[t]=n,i[t]=o,this.siftDown_(s,t)},s.prototype.siftDown_=function(t,e){for(var i=this.elements_,r=this.priorities_,n=i[e],o=r[e];e>t;){var s=this.getParentIndex_(e);if(!(r[s]>o))break;i[e]=i[s],r[e]=r[s],e=s}i[e]=n,r[e]=o},s.prototype.reprioritize=function(){var t,e,i,r=this.priorityFunction_,n=this.elements_,s=this.priorities_,a=0,h=n.length;for(e=0;e<h;++e)(i=r(t=n[e]))==o?delete this.queuedElements_[this.keyFunction_(t)]:(s[a]=i,n[a++]=t);n.length=a,s.length=a,this.heapify_()},e.b=s},,,function(t,e,i){"use strict";var r=i(17),n=i(7),o=i(55),s=i(13),a=i(32),h=i(78),c=i(41),u=i(38),l=i(77),p=i(3),d=i(57),f=i(4),_=i(2),g=i(1),m=i(8),y=i(71);function v(t,e){y.a.expire()}function b(t,e){return t.zIndex-e.zIndex}var O=function(t){function e(e){t.call(this),this.map_=e,this.layerRenderers_={},this.layerRendererListeners_={},this.layerRendererConstructors_=[]}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.dispatchRenderEvent=function(t,e){Object(p.b)()},e.prototype.registerLayerRenderers=function(t){this.layerRendererConstructors_.push.apply(this.layerRendererConstructors_,t)},e.prototype.calculateMatrices2D=function(t){var e=t.viewState,i=t.coordinateToPixelTransform,n=t.pixelToCoordinateTransform;Object(r.b)(i,t.size[0]/2,t.size[1]/2,1/e.resolution,-1/e.resolution,-e.rotation,-e.center[0],-e.center[1]),Object(r.d)(Object(r.g)(n,i))},e.prototype.removeLayerRenderers=function(){for(var t in this.layerRenderers_)this.removeLayerRendererByKey_(t).dispose()},e.prototype.forEachFeatureAtCoordinate=function(t,e,i,r,n,o,s){var h,c=e.viewState,u=c.resolution;function l(t,i){var o=e.layerStates[Object(p.c)(i)].managed;if(!(Object(p.c)(t)in e.skippedFeatureUids)||o)return r.call(n,t,o?i:null)}var d=c.projection,f=t;if(d.canWrapX()){var _=d.getExtent(),m=Object(g.E)(_),y=t[0];if(y<_[0]||y>_[2])f=[y+m*Math.ceil((_[0]-y)/m),t[1]]}var v,b=e.layerStatesArray;for(v=b.length-1;v>=0;--v){var O=b[v],x=O.layer;if(Object(a.b)(O,u)&&o.call(s,x)){var j=this.getLayerRenderer(x),E=x.getSource();if(E&&(h=j.forEachFeatureAtCoordinate(E.getWrapX()?f:t,e,i,l)),h)return h}}},e.prototype.forEachLayerAtPixel=function(t,e,i,r,n,o,s){return Object(p.b)()},e.prototype.hasFeatureAtCoordinate=function(t,e,i,r,n){return void 0!==this.forEachFeatureAtCoordinate(t,e,i,m.b,this,r,n)},e.prototype.getLayerRenderer=function(t){var e=Object(p.c)(t);if(e in this.layerRenderers_)return this.layerRenderers_[e];for(var i,r=0,n=this.layerRendererConstructors_.length;r<n;++r){var o=this.layerRendererConstructors_[r];if(o.handles(t)){i=o.create(this,t);break}}if(!i)throw new Error("Unable to create renderer for layer: "+t.getType());return this.layerRenderers_[e]=i,this.layerRendererListeners_[e]=Object(f.a)(i,_.a.CHANGE,this.handleLayerRendererChange_,this),i},e.prototype.getLayerRendererByKey=function(t){return this.layerRenderers_[t]},e.prototype.getLayerRenderers=function(){return this.layerRenderers_},e.prototype.getMap=function(){return this.map_},e.prototype.handleLayerRendererChange_=function(){this.map_.render()},e.prototype.removeLayerRendererByKey_=function(t){var e=this.layerRenderers_[t];return delete this.layerRenderers_[t],Object(f.e)(this.layerRendererListeners_[t]),delete this.layerRendererListeners_[t],e},e.prototype.removeUnusedLayerRenderers_=function(t,e){for(var i in this.layerRenderers_)e&&i in e.layerStates||this.removeLayerRendererByKey_(i).dispose()},e.prototype.renderFrame=function(t){Object(p.b)()},e.prototype.scheduleExpireIconCache=function(t){t.postRenderFunctions.push(v)},e.prototype.scheduleRemoveUnusedLayerRenderers=function(t){for(var e in this.layerRenderers_)if(!(e in t.layerStates))return void t.postRenderFunctions.push(this.removeUnusedLayerRenderers_.bind(this))},e}(d.a),x=i(16);i.d(e,"b",function(){return j});var j=[],E=function(t){function e(e){t.call(this,e);var i=e.getViewport();this.context_=Object(s.a)(),this.canvas_=this.context_.canvas,this.canvas_.style.width="100%",this.canvas_.style.height="100%",this.canvas_.style.display="block",this.canvas_.className=o.d,i.insertBefore(this.canvas_,i.childNodes[0]||null),this.renderedVisible_=!0,this.transform_=Object(r.c)()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.dispatchRenderEvent=function(t,e){var i=this.getMap(),r=this.context_;if(i.hasListener(t)){var n=e.extent,o=e.pixelRatio,s=e.viewState.rotation,a=this.getTransform(e),c=new l.a(r,o,n,a,s),u=new h.a(t,c,e,r,null);i.dispatchEvent(u)}},e.prototype.getTransform=function(t){var e=t.viewState,i=this.canvas_.width/2,n=this.canvas_.height/2,o=t.pixelRatio/e.resolution,s=-o,a=-e.rotation,h=-e.center[0],c=-e.center[1];return Object(r.b)(this.transform_,i,n,o,s,a,h,c)},e.prototype.renderFrame=function(t){if(t){var e=this.context_,i=t.pixelRatio,r=Math.round(t.size[0]*i),o=Math.round(t.size[1]*i);this.canvas_.width!=r||this.canvas_.height!=o?(this.canvas_.width=r,this.canvas_.height=o):e.clearRect(0,0,r,o);var s=t.viewState.rotation;this.calculateMatrices2D(t),this.dispatchRenderEvent(c.a.PRECOMPOSE,t);var h=t.layerStatesArray;Object(n.l)(h,b),s&&(e.save(),Object(u.s)(e,s,r/2,o/2));var l,p,d=t.viewState.resolution;for(l=0,p=h.length;l<p;++l){var f=h[l],_=f.layer,g=this.getLayerRenderer(_);Object(a.b)(f,d)&&f.sourceState==x.a.READY&&(g.prepareFrame(t,f)&&g.composeFrame(t,f,e))}s&&e.restore(),this.dispatchRenderEvent(c.a.POSTCOMPOSE,t),this.renderedVisible_||(this.canvas_.style.display="",this.renderedVisible_=!0),this.scheduleRemoveUnusedLayerRenderers(t),this.scheduleExpireIconCache(t)}else this.renderedVisible_&&(this.canvas_.style.display="none",this.renderedVisible_=!1)},e.prototype.forEachLayerAtPixel=function(t,e,i,n,o,s,h){var c,u,l=e.viewState.resolution,p=e.layerStatesArray,d=p.length,f=Object(r.a)(e.pixelToCoordinateTransform,t.slice());for(u=d-1;u>=0;--u){var _=p[u],g=_.layer;if(Object(a.b)(_,l)&&s.call(h,g))if(c=this.getLayerRenderer(g).forEachLayerAtCoordinate(f,e,i,n,o))return c}},e.prototype.registerLayerRenderers=function(e){t.prototype.registerLayerRenderers.call(this,e);for(var i=0,r=e.length;i<r;++i){var o=e[i];Object(n.f)(j,o)||j.push(o)}},e}(O);e.a=E},function(t,e,i){"use strict";var r=i(3),n=i(1),o=i(8),s=i(78),a=i(41),h=i(38),c=i(77),u=i(30),l=i(73),p=i(19),d=i(4),f=i(2),_=i(16),g=function(t){function e(e){t.call(this),this.layer_=e}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.createLoadedTileFinder=function(t,e,i){return function(r,n){return t.forEachLoadedTile(e,r,n,function(t){i[r]||(i[r]={}),i[r][t.tileCoord.toString()]=t})}},e.prototype.forEachFeatureAtCoordinate=function(t,e,i,r){},e.prototype.getLayer=function(){return this.layer_},e.prototype.handleImageChange_=function(t){t.target.getState()===u.a.LOADED&&this.renderIfReadyAndVisible()},e.prototype.hasFeatureAtCoordinate=function(t,e){return!1},e.prototype.loadImage=function(t){var e=t.getState();return e!=u.a.LOADED&&e!=u.a.ERROR&&Object(d.a)(t,f.a.CHANGE,this.handleImageChange_,this),e==u.a.IDLE&&(t.load(),e=t.getState()),e==u.a.LOADED},e.prototype.renderIfReadyAndVisible=function(){var t=this.getLayer();t.getVisible()&&t.getSourceState()==_.a.READY&&this.changed()},e.prototype.scheduleExpireCache=function(t,e){if(e.canExpireCache()){var i=function(t,e,i){var n=Object(r.c)(t);n in i.usedTiles&&t.expireCache(i.viewState.projection,i.usedTiles[n])}.bind(null,e);t.postRenderFunctions.push(i)}},e.prototype.updateUsedTiles=function(t,e,i,n){var o=Object(r.c)(e),s=i.toString();o in t?s in t[o]?t[o][s].extend(n):t[o][s]=n:(t[o]={},t[o][s]=n)},e.prototype.manageTilePyramid=function(t,e,i,n,o,s,a,h,c,u){var l=Object(r.c)(e);l in t.wantedTiles||(t.wantedTiles[l]={});var d,f,_,g,m,y,v=t.wantedTiles[l],b=t.tileQueue;for(y=i.getMinZoom();y<=a;++y)for(f=i.getTileRangeForExtentAndZ(s,y,f),_=i.getResolution(y),g=f.minX;g<=f.maxX;++g)for(m=f.minY;m<=f.maxY;++m)a-y<=h?((d=e.getTile(y,g,m,n,o)).getState()==p.a.IDLE&&(v[d.getKey()]=!0,b.isKeyQueued(d.getKey())||b.enqueue([d,l,i.getTileCoordCenter(d.tileCoord),_])),void 0!==c&&c.call(u,d)):e.useTile(y,g,m,o)},e}(l.a),m=i(17),y=function(t){function e(e){t.call(this,e),this.renderedResolution,this.transform_=Object(m.c)()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.clip=function(t,e,i){var r=e.pixelRatio,o=e.size[0]*r,s=e.size[1]*r,a=e.viewState.rotation,c=Object(n.C)(i),u=Object(n.D)(i),l=Object(n.w)(i),p=Object(n.v)(i);Object(m.a)(e.coordinateToPixelTransform,c),Object(m.a)(e.coordinateToPixelTransform,u),Object(m.a)(e.coordinateToPixelTransform,l),Object(m.a)(e.coordinateToPixelTransform,p),t.save(),Object(h.s)(t,-a,o/2,s/2),t.beginPath(),t.moveTo(c[0]*r,c[1]*r),t.lineTo(u[0]*r,u[1]*r),t.lineTo(l[0]*r,l[1]*r),t.lineTo(p[0]*r,p[1]*r),t.clip(),Object(h.s)(t,a,o/2,s/2)},e.prototype.dispatchComposeEvent_=function(t,e,i,r){var n=this.getLayer();if(n.hasListener(t)){var o=i.size[0]*i.pixelRatio,a=i.size[1]*i.pixelRatio,u=i.viewState.rotation;Object(h.s)(e,-u,o/2,a/2);var l=void 0!==r?r:this.getTransform(i,0),p=new c.a(e,i.pixelRatio,i.extent,l,i.viewState.rotation),d=new s.a(t,p,i,e,null);n.dispatchEvent(d),Object(h.s)(e,u,o/2,a/2)}},e.prototype.forEachLayerAtCoordinate=function(t,e,i,r,n){return this.forEachFeatureAtCoordinate(t,e,i,o.b)?r.call(n,this.getLayer(),null):void 0},e.prototype.postCompose=function(t,e,i,r){this.dispatchComposeEvent_(a.a.POSTCOMPOSE,t,e,r)},e.prototype.preCompose=function(t,e,i){this.dispatchComposeEvent_(a.a.PRECOMPOSE,t,e,i)},e.prototype.dispatchRenderEvent=function(t,e,i){this.dispatchComposeEvent_(a.a.RENDER,t,e,i)},e.prototype.getTransform=function(t,e){var i=t.viewState,r=t.pixelRatio,n=r*t.size[0]/2,o=r*t.size[1]/2,s=r/i.resolution,a=-s,h=-i.rotation,c=-i.center[0]+e,u=-i.center[1];return Object(m.b)(this.transform_,n,o,s,a,h,c,u)},e.prototype.composeFrame=function(t,e,i){Object(r.b)()},e.prototype.prepareFrame=function(t,e){return Object(r.b)()},e}(g);e.a=y},,,,function(t,e,i){"use strict";var r=i(63),n=i(79),o=i(29),s=i(14),a=i(7),h=i(1),c=i(61),u=i(5),l=i(96),p=i(81),d=i(17),f=function(t){function e(i){if(t.call(this,i),this.image_=null,this.imageTransform_=Object(d.c)(),this.skippedFeatures_=[],this.vectorRenderer_=null,i.getType()===o.a.VECTOR)for(var r=0,n=l.b.length;r<n;++r){var s=l.b[r];if(s!==e&&s.handles(i)){this.vectorRenderer_=new s(i);break}}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.disposeInternal=function(){this.vectorRenderer_&&this.vectorRenderer_.dispose(),t.prototype.disposeInternal.call(this)},e.prototype.getImage=function(){return this.image_?this.image_.getImage():null},e.prototype.getImageTransform=function(){return this.imageTransform_},e.prototype.prepareFrame=function(t,e){var i,o=t.pixelRatio,c=t.size,l=t.viewState,p=l.center,f=l.resolution,_=this.getLayer().getSource(),g=t.viewHints,m=this.vectorRenderer_,y=t.extent;if(m||void 0===e.extent||(y=Object(h.B)(y,e.extent)),!g[s.a.ANIMATING]&&!g[s.a.INTERACTING]&&!Object(h.H)(y)){var v=l.projection;if(!r.a){var b=_.getProjection();b&&(v=b)}var O=this.skippedFeatures_;if(m){var x=m.context,j=Object(u.a)({},t,{size:[Object(h.E)(y)/f,Object(h.A)(y)/f],viewState:Object(u.a)({},t.viewState,{rotation:0})}),E=Object.keys(j.skippedFeatureUids).sort();i=new n.a(y,f,o,x.canvas,function(t){!m.prepareFrame(j,e)||!m.replayGroupChanged&&Object(a.b)(O,E)||(x.canvas.width=j.size[0]*o,x.canvas.height=j.size[1]*o,m.compose(x,j,e),O=E,t())})}else i=_.getImage(y,f,o,v);i&&this.loadImage(i)&&(this.image_=i,this.skippedFeatures_=O)}if(this.image_){var T=(i=this.image_).getExtent(),S=i.getResolution(),R=i.getPixelRatio(),C=o*S/(f*R),I=Object(d.b)(this.imageTransform_,o*c[0]/2,o*c[1]/2,C,C,0,R*(T[0]-p[0])/S,R*(p[1]-T[3])/S);Object(d.b)(this.coordinateToCanvasPixelTransform,o*c[0]/2-I[4],o*c[1]/2-I[5],o/f,-o/f,0,-p[0],-p[1]),this.renderedResolution=S*o/R}return!!this.image_},e.prototype.forEachFeatureAtCoordinate=function(e,i,r,n){return this.vectorRenderer_?this.vectorRenderer_.forEachFeatureAtCoordinate(e,i,r,n):t.prototype.forEachFeatureAtCoordinate.call(this,e,i,r,n)},e}(p.a);f.handles=function(t){return t.getType()===o.a.IMAGE||t.getType()===o.a.VECTOR&&t.getRenderMode()===c.a.IMAGE},f.create=function(t,e){return new f(e)},e.a=f},,,function(t,e,i){"use strict";var r=i(19),n=i(4),o=i(2),s=function(t){function e(e,i){t.call(this,function(t){return e.apply(null,t)},function(t){return t[0].getKey()}),this.tileChangeCallback_=i,this.tilesLoading_=0,this.tilesLoadingKeys_={}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.enqueue=function(e){var i=t.prototype.enqueue.call(this,e);if(i){var r=e[0];Object(n.a)(r,o.a.CHANGE,this.handleTileChange,this)}return i},e.prototype.getTilesLoading=function(){return this.tilesLoading_},e.prototype.handleTileChange=function(t){var e=t.target,i=e.getState();if(i===r.a.LOADED||i===r.a.ERROR||i===r.a.EMPTY||i===r.a.ABORT){Object(n.c)(e,o.a.CHANGE,this.handleTileChange,this);var s=e.getKey();s in this.tilesLoadingKeys_&&(delete this.tilesLoadingKeys_[s],--this.tilesLoading_),this.tileChangeCallback_()}},e.prototype.loadMoreTiles=function(t,e){for(var i,n,o,s=0,a=!1;this.tilesLoading_<t&&s<e&&this.getCount()>0;)o=(n=this.dequeue()[0]).getKey(),(i=n.getState())===r.a.ABORT?a=!0:i!==r.a.IDLE||o in this.tilesLoadingKeys_||(this.tilesLoadingKeys_[o]=!0,++this.tilesLoading_,++s,n.load());0===s&&a&&this.tileChangeCallback_()},e}(i(93).b);e.a=s},,,,,,,,function(t,e,i){var r=i(113);e.Processor=r},function(t,e,i){var r=i(114).newImageData;function n(t){var e=!0;try{new ImageData(10,10)}catch(t){e=!1}function i(t,i,r){return e?new ImageData(t,i,r):{data:t,width:i,height:r}}return function(e){var r,n,o=e.buffers,s=e.meta,a=e.imageOps,h=e.width,c=e.height,u=o.length,l=o[0].byteLength;if(a){var p=new Array(u);for(n=0;n<u;++n)p[n]=i(new Uint8ClampedArray(o[n]),h,c);r=t(p,s).data}else{r=new Uint8ClampedArray(l);var d=new Array(u),f=new Array(u);for(n=0;n<u;++n)d[n]=new Uint8ClampedArray(o[n]),f[n]=[0,0,0,0];for(var _=0;_<l;_+=4){for(var g=0;g<u;++g){var m=d[g];f[g][0]=m[_],f[g][1]=m[_+1],f[g][2]=m[_+2],f[g][3]=m[_+3]}var y=t(f,s);r[_]=y[0],r[_+1]=y[1],r[_+2]=y[2],r[_+3]=y[3]}}return r.buffer}}function o(t,e){var i=Object.keys(t.lib||{}).map(function(e){return"var "+e+" = "+t.lib[e].toString()+";"}).concat(["var __minion__ = ("+n.toString()+")(",t.operation.toString(),");",'self.addEventListener("message", function(event) {',"  var buffer = __minion__(event.data);","  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);","});"]),r=new Blob(i,{type:"text/javascript"}),o=URL.createObjectURL(r),s=new Worker(o);return s.addEventListener("message",e),s}function s(t){var e;this._imageOps=!!t.imageOps;var i=[];if(e=0===t.threads?0:this._imageOps?1:t.threads||1)for(var r=0;r<e;++r)i[r]=o(t,this._onWorkerMessage.bind(this,r));else i[0]=function(t,e){var i=n(t.operation);return{postMessage:function(t){setTimeout(function(){e({data:{buffer:i(t),meta:t.meta}})},0)}}}(t,this._onWorkerMessage.bind(this,0));this._workers=i,this._queue=[],this._maxQueueLength=t.queue||1/0,this._running=0,this._dataLookup={},this._job=null}s.prototype.process=function(t,e,i){this._enqueue({inputs:t,meta:e,callback:i}),this._dispatch()},s.prototype.destroy=function(){for(var t in this)this[t]=null;this._destroyed=!0},s.prototype._enqueue=function(t){for(this._queue.push(t);this._queue.length>this._maxQueueLength;)this._queue.shift().callback(null,null)},s.prototype._dispatch=function(){if(0===this._running&&this._queue.length>0){var t=this._job=this._queue.shift(),e=t.inputs[0].width,i=t.inputs[0].height,r=t.inputs.map(function(t){return t.data.buffer}),n=this._workers.length;if(this._running=n,1===n)this._workers[0].postMessage({buffers:r,meta:t.meta,imageOps:this._imageOps,width:e,height:i},r);else for(var o=t.inputs[0].data.length,s=4*Math.ceil(o/4/n),a=0;a<n;++a){for(var h=a*s,c=[],u=0,l=r.length;u<l;++u)c.push(r[a].slice(h,h+s));this._workers[a].postMessage({buffers:c,meta:t.meta,imageOps:this._imageOps,width:e,height:i},c)}}},s.prototype._onWorkerMessage=function(t,e){this._destroyed||(this._dataLookup[t]=e.data,--this._running,0===this._running&&this._resolveJob())},s.prototype._resolveJob=function(){var t,e,i=this._job,n=this._workers.length;if(1===n)t=new Uint8ClampedArray(this._dataLookup[0].buffer),e=this._dataLookup[0].meta;else{var o=i.inputs[0].data.length;t=new Uint8ClampedArray(o),e=new Array(o);for(var s=4*Math.ceil(o/4/n),a=0;a<n;++a){var h=this._dataLookup[a].buffer,c=a*s;t.set(new Uint8ClampedArray(h),c),e[a]=this._dataLookup[a].meta}}this._job=null,this._dataLookup={},i.callback(null,r(t,i.inputs[0].width,i.inputs[0].height),e),this._dispatch()},t.exports=s},function(t,e){var i=!0;try{new ImageData(10,10)}catch(t){i=!1}var r=document.createElement("canvas").getContext("2d");e.newImageData=function(t,e,n){if(i)return new ImageData(t,e,n);var o=r.createImageData(e,n);return o.data.set(t),o}},,function(t,e,i){"use strict";i.r(e);var r=i(9),n=i(6);function o(t,e,i,r){return void 0!==r?(r[0]=t,r[1]=e,r[2]=i,r):[t,e,i]}function s(t,e,i){return t+"/"+e+"/"+i}function a(t){return s(t[0],t[1],t[2])}function h(t){return(t[1]<<t[0])+t[2]}function c(t,e){var i=/\{z\}/g,n=/\{x\}/g,o=/\{y\}/g,s=/\{-y\}/g;return function(a,h,c){return a?t.replace(i,a[0].toString()).replace(n,a[1].toString()).replace(o,function(){return(-a[2]-1).toString()}).replace(s,function(){var t=a[0],i=e.getFullTileRange(t);return Object(r.a)(i,55),(i.getHeight()+a[2]).toString()}):void 0}}function u(t,e){for(var i=t.length,r=new Array(i),n=0;n<i;++n)r[n]=c(t[n],e);return l(r)}function l(t){return 1===t.length?t[0]:function(e,i,r){if(e){var o=h(e),s=Object(n.d)(o,t.length);return t[s](e,i,r)}}}function p(t,e,i){}function d(t){var e=[],i=/\{([a-z])-([a-z])\}/.exec(t);if(i){var r,n=i[1].charCodeAt(0),o=i[2].charCodeAt(0);for(r=n;r<=o;++r)e.push(t.replace(i[0],String.fromCharCode(r)));return e}if(i=i=/\{(\d+)-(\d+)\}/.exec(t)){for(var s=parseInt(i[2],10),a=parseInt(i[1],10);a<=s;a++)e.push(t.replace(i[0],a.toString()));return e}return e.push(t),e}var f=i(1),_=i(3);function g(t,e,i,r){var n=document.createElement("script"),o="olc_"+Object(_.c)(e);function s(){delete window[o],n.parentNode.removeChild(n)}n.async=!0,n.src=t+(-1==t.indexOf("?")?"?":"&")+(r||"callback")+"="+o;var a=setTimeout(function(){s(),i&&i()},1e4);window[o]=function(t){clearTimeout(a),s(),e(t)},document.getElementsByTagName("head")[0].appendChild(n)}var m=i(15),y=i(16),v=i(63),b=i(19),O=i(24),x=i(40),j=i(2),E=function(t){function e(e,i,r){t.call(this);var n=r||{};this.tileCoord=e,this.state=i,this.interimTile=null,this.key="",this.transition_=void 0===n.transition?250:n.transition,this.transitionStarts_={}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.changed=function(){this.dispatchEvent(j.a.CHANGE)},e.prototype.getKey=function(){return this.key+"/"+this.tileCoord},e.prototype.getInterimTile=function(){if(!this.interimTile)return this;var t=this.interimTile;do{if(t.getState()==b.a.LOADED)return t;t=t.interimTile}while(t);return this},e.prototype.refreshInterimChain=function(){if(this.interimTile){var t=this.interimTile,e=this;do{if(t.getState()==b.a.LOADED){t.interimTile=null;break}t.getState()==b.a.LOADING?e=t:t.getState()==b.a.IDLE?e.interimTile=t.interimTile:e=t,t=e.interimTile}while(t)}},e.prototype.getTileCoord=function(){return this.tileCoord},e.prototype.getState=function(){return this.state},e.prototype.setState=function(t){this.state=t,this.changed()},e.prototype.load=function(){},e.prototype.getAlpha=function(t,e){if(!this.transition_)return 1;var i=this.transitionStarts_[t];if(i){if(-1===i)return 1}else i=e,this.transitionStarts_[t]=i;var r=e-i+1e3/60;return r>=this.transition_?1:Object(O.a)(r/this.transition_)},e.prototype.inTransition=function(t){return!!this.transition_&&-1!==this.transitionStarts_[t]},e.prototype.endTransition=function(t){this.transition_&&(this.transitionStarts_[t]=-1)},e}(x.a),T=i(13),S=i(4);function R(){var t=Object(T.a)(1,1);return t.fillStyle="rgba(0,0,0,0)",t.fillRect(0,0,1,1),t.canvas}var C=function(t){function e(e,i,r,n,o,s){t.call(this,e,i,s),this.crossOrigin_=n,this.src_=r,this.image_=new Image,null!==n&&(this.image_.crossOrigin=n),this.imageListenerKeys_=null,this.tileLoadFunction_=o}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.disposeInternal=function(){this.state==b.a.LOADING&&(this.unlistenImage_(),this.image_=R()),this.interimTile&&this.interimTile.dispose(),this.state=b.a.ABORT,this.changed(),t.prototype.disposeInternal.call(this)},e.prototype.getImage=function(){return this.image_},e.prototype.getKey=function(){return this.src_},e.prototype.handleImageError_=function(){this.state=b.a.ERROR,this.unlistenImage_(),this.image_=R(),this.changed()},e.prototype.handleImageLoad_=function(){var t=this.image_;t.naturalWidth&&t.naturalHeight?this.state=b.a.LOADED:this.state=b.a.EMPTY,this.unlistenImage_(),this.changed()},e.prototype.load=function(){this.state==b.a.ERROR&&(this.state=b.a.IDLE,this.image_=new Image,null!==this.crossOrigin_&&(this.image_.crossOrigin=this.crossOrigin_)),this.state==b.a.IDLE&&(this.state=b.a.LOADING,this.changed(),this.imageListenerKeys_=[Object(S.b)(this.image_,j.a.ERROR,this.handleImageError_,this),Object(S.b)(this.image_,j.a.LOAD,this.handleImageLoad_,this)],this.tileLoadFunction_(this,this.src_))},e.prototype.unlistenImage_=function(){this.imageListenerKeys_.forEach(S.e),this.imageListenerKeys_=null},e}(E),I=function(t){function e(e){t.call(this,e)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.expireCache=function(t){for(;this.canExpireCache();){var e=this.peekLast(),i=e.tileCoord[0].toString();if(i in t&&t[i].contains(e.tileCoord))break;this.pop().dispose()}},e.prototype.pruneExceptNewestZ=function(){if(0!==this.getCount()){var t=function(t){return t.split("/").map(Number)}(this.peekFirstKey())[0];this.forEach(function(e){e.tileCoord[0]!==t&&(this.remove(a(e.tileCoord)),e.dispose())},this)}},e}(i(86).a);function F(t,e,i,r){var n=Object(m.i)(i,e,t),o=Object(m.e)(e,r,i),s=e.getMetersPerUnit();void 0!==s&&(o*=s);var a=t.getMetersPerUnit();void 0!==a&&(o/=a);var h=t.getExtent();if(!h||Object(f.f)(h,n)){var c=Object(m.e)(t,o,n)/o;isFinite(c)&&c>0&&(o/=c)}return o}function w(t,e,i,r){var n=i-t,o=r-e,s=Math.sqrt(n*n+o*o);return[Math.round(i+n/s),Math.round(r+o/s)]}function L(t,e,i,r,o,s,a,h,c,u,l){var p=Object(T.a)(Math.round(i*t),Math.round(i*e));if(0===c.length)return p.canvas;p.scale(i,i);var d=Object(f.j)();c.forEach(function(t,e,i){Object(f.q)(d,t.extent)});var _=Object(f.E)(d),g=Object(f.A)(d),m=Object(T.a)(Math.round(i*_/r),Math.round(i*g/r)),y=i/r;c.forEach(function(t,e,i){var r=t.extent[0]-d[0],n=-(t.extent[3]-d[3]),o=Object(f.E)(t.extent),s=Object(f.A)(t.extent);m.drawImage(t.image,u,u,t.image.width-2*u,t.image.height-2*u,r*y,n*y,o*y,s*y)});var v=Object(f.C)(a);return h.getTriangles().forEach(function(t,e,o){var a=t.source,h=t.target,c=a[0][0],u=a[0][1],l=a[1][0],f=a[1][1],_=a[2][0],g=a[2][1],y=(h[0][0]-v[0])/s,b=-(h[0][1]-v[1])/s,O=(h[1][0]-v[0])/s,x=-(h[1][1]-v[1])/s,j=(h[2][0]-v[0])/s,E=-(h[2][1]-v[1])/s,T=c,S=u;c=0,u=0;var R=[[l-=T,f-=S,0,0,O-y],[_-=T,g-=S,0,0,j-y],[0,0,l,f,x-b],[0,0,_,g,E-b]],C=Object(n.e)(R);if(C){p.save(),p.beginPath();var I=(y+O+j)/3,F=(b+x+E)/3,L=w(I,F,y,b),A=w(I,F,O,x),P=w(I,F,j,E);p.moveTo(A[0],A[1]),p.lineTo(L[0],L[1]),p.lineTo(P[0],P[1]),p.clip(),p.transform(C[0],C[2],C[1],C[3],y,b),p.translate(d[0]-T,d[3]-S),p.scale(r/i,-r/i),p.drawImage(m.canvas,0,0),p.restore()}}),l&&(p.save(),p.strokeStyle="black",p.lineWidth=1,h.getTriangles().forEach(function(t,e,i){var r=t.target,n=(r[0][0]-v[0])/s,o=-(r[0][1]-v[1])/s,a=(r[1][0]-v[0])/s,h=-(r[1][1]-v[1])/s,c=(r[2][0]-v[0])/s,u=-(r[2][1]-v[1])/s;p.beginPath(),p.moveTo(a,h),p.lineTo(n,o),p.lineTo(c,u),p.closePath(),p.stroke()}),p.restore()),p.canvas}var A=function(t,e,i,r,n){this.sourceProj_=t,this.targetProj_=e;var o={},s=Object(m.f)(this.targetProj_,this.sourceProj_);this.transformInv_=function(t){var e=t[0]+"/"+t[1];return o[e]||(o[e]=s(t)),o[e]},this.maxSourceExtent_=r,this.errorThresholdSquared_=n*n,this.triangles_=[],this.wrapsXInSource_=!1,this.canWrapXInSource_=this.sourceProj_.canWrapX()&&!!r&&!!this.sourceProj_.getExtent()&&Object(f.E)(r)==Object(f.E)(this.sourceProj_.getExtent()),this.sourceWorldWidth_=this.sourceProj_.getExtent()?Object(f.E)(this.sourceProj_.getExtent()):null,this.targetWorldWidth_=this.targetProj_.getExtent()?Object(f.E)(this.targetProj_.getExtent()):null;var a=Object(f.C)(i),h=Object(f.D)(i),c=Object(f.w)(i),u=Object(f.v)(i),l=this.transformInv_(a),p=this.transformInv_(h),d=this.transformInv_(c),_=this.transformInv_(u);if(this.addQuad_(a,h,c,u,l,p,d,_,10),this.wrapsXInSource_){var g=1/0;this.triangles_.forEach(function(t,e,i){g=Math.min(g,t.source[0][0],t.source[1][0],t.source[2][0])}),this.triangles_.forEach(function(t){if(Math.max(t.source[0][0],t.source[1][0],t.source[2][0])-g>this.sourceWorldWidth_/2){var e=[[t.source[0][0],t.source[0][1]],[t.source[1][0],t.source[1][1]],[t.source[2][0],t.source[2][1]]];e[0][0]-g>this.sourceWorldWidth_/2&&(e[0][0]-=this.sourceWorldWidth_),e[1][0]-g>this.sourceWorldWidth_/2&&(e[1][0]-=this.sourceWorldWidth_),e[2][0]-g>this.sourceWorldWidth_/2&&(e[2][0]-=this.sourceWorldWidth_);var i=Math.min(e[0][0],e[1][0],e[2][0]);Math.max(e[0][0],e[1][0],e[2][0])-i<this.sourceWorldWidth_/2&&(t.source=e)}}.bind(this))}o={}};A.prototype.addTriangle_=function(t,e,i,r,n,o){this.triangles_.push({source:[r,n,o],target:[t,e,i]})},A.prototype.addQuad_=function(t,e,i,r,o,s,a,h,c){var u=Object(f.b)([o,s,a,h]),l=this.sourceWorldWidth_?Object(f.E)(u)/this.sourceWorldWidth_:null,p=this.sourceWorldWidth_,d=this.sourceProj_.canWrapX()&&l>.5&&l<1,_=!1;if(c>0){if(this.targetProj_.isGlobal()&&this.targetWorldWidth_){var g=Object(f.b)([t,e,i,r]);_=Object(f.E)(g)/this.targetWorldWidth_>.25||_}!d&&this.sourceProj_.isGlobal()&&l&&(_=l>.25||_)}if(_||!this.maxSourceExtent_||Object(f.F)(u,this.maxSourceExtent_)){if(!(_||isFinite(o[0])&&isFinite(o[1])&&isFinite(s[0])&&isFinite(s[1])&&isFinite(a[0])&&isFinite(a[1])&&isFinite(h[0])&&isFinite(h[1]))){if(!(c>0))return;_=!0}if(c>0){if(!_){var m,y=[(t[0]+i[0])/2,(t[1]+i[1])/2],v=this.transformInv_(y);if(d)m=(Object(n.d)(o[0],p)+Object(n.d)(a[0],p))/2-Object(n.d)(v[0],p);else m=(o[0]+a[0])/2-v[0];var b=(o[1]+a[1])/2-v[1];_=m*m+b*b>this.errorThresholdSquared_}if(_){if(Math.abs(t[0]-i[0])<=Math.abs(t[1]-i[1])){var O=[(e[0]+i[0])/2,(e[1]+i[1])/2],x=this.transformInv_(O),j=[(r[0]+t[0])/2,(r[1]+t[1])/2],E=this.transformInv_(j);this.addQuad_(t,e,O,j,o,s,x,E,c-1),this.addQuad_(j,O,i,r,E,x,a,h,c-1)}else{var T=[(t[0]+e[0])/2,(t[1]+e[1])/2],S=this.transformInv_(T),R=[(i[0]+r[0])/2,(i[1]+r[1])/2],C=this.transformInv_(R);this.addQuad_(t,T,R,r,o,S,C,h,c-1),this.addQuad_(T,e,i,R,S,s,a,C,c-1)}return}}if(d){if(!this.canWrapXInSource_)return;this.wrapsXInSource_=!0}this.addTriangle_(t,i,r,o,a,h),this.addTriangle_(t,e,i,o,s,a)}},A.prototype.calculateSourceExtent=function(){var t=Object(f.j)();return this.triangles_.forEach(function(e,i,r){var n=e.source;Object(f.r)(t,n[0]),Object(f.r)(t,n[1]),Object(f.r)(t,n[2])}),t},A.prototype.getTriangles=function(){return this.triangles_};var P=A,M=function(t){function e(e,i,r,o,s,a,h,c,u,l,p){t.call(this,s,b.a.IDLE),this.renderEdges_=void 0!==p&&p,this.pixelRatio_=h,this.gutter_=c,this.canvas_=null,this.sourceTileGrid_=i,this.targetTileGrid_=o,this.wrappedTileCoord_=a||s,this.sourceTiles_=[],this.sourcesListenerKeys_=null,this.sourceZ_=0;var d=o.getTileCoordExtent(this.wrappedTileCoord_),_=this.targetTileGrid_.getExtent(),g=this.sourceTileGrid_.getExtent(),m=_?Object(f.B)(d,_):d;if(0!==Object(f.u)(m)){var y=e.getExtent();y&&(g=g?Object(f.B)(g,y):y);var O=o.getResolution(this.wrappedTileCoord_[0]),x=F(e,r,Object(f.x)(m),O);if(!isFinite(x)||x<=0)this.state=b.a.EMPTY;else{var j=void 0!==l?l:v.b;if(this.triangulation_=new P(e,r,m,g,x*j),0!==this.triangulation_.getTriangles().length){this.sourceZ_=i.getZForResolution(x);var E=this.triangulation_.calculateSourceExtent();if(g&&(e.canWrapX()?(E[1]=Object(n.a)(E[1],g[1],g[3]),E[3]=Object(n.a)(E[3],g[1],g[3])):E=Object(f.B)(E,g)),Object(f.u)(E)){for(var T=i.getTileRangeForExtentAndZ(E,this.sourceZ_),S=T.minX;S<=T.maxX;S++)for(var R=T.minY;R<=T.maxY;R++){var C=u(this.sourceZ_,S,R,h);C&&this.sourceTiles_.push(C)}0===this.sourceTiles_.length&&(this.state=b.a.EMPTY)}else this.state=b.a.EMPTY}else this.state=b.a.EMPTY}}else this.state=b.a.EMPTY}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.disposeInternal=function(){this.state==b.a.LOADING&&this.unlistenSources_(),t.prototype.disposeInternal.call(this)},e.prototype.getImage=function(){return this.canvas_},e.prototype.reproject_=function(){var t=[];if(this.sourceTiles_.forEach(function(e,i,r){e&&e.getState()==b.a.LOADED&&t.push({extent:this.sourceTileGrid_.getTileCoordExtent(e.tileCoord),image:e.getImage()})}.bind(this)),this.sourceTiles_.length=0,0===t.length)this.state=b.a.ERROR;else{var e=this.wrappedTileCoord_[0],i=this.targetTileGrid_.getTileSize(e),r="number"==typeof i?i:i[0],n="number"==typeof i?i:i[1],o=this.targetTileGrid_.getResolution(e),s=this.sourceTileGrid_.getResolution(this.sourceZ_),a=this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);this.canvas_=L(r,n,this.pixelRatio_,s,this.sourceTileGrid_.getExtent(),o,a,this.triangulation_,t,this.gutter_,this.renderEdges_),this.state=b.a.LOADED}this.changed()},e.prototype.load=function(){if(this.state==b.a.IDLE){this.state=b.a.LOADING,this.changed();var t=0;this.sourcesListenerKeys_=[],this.sourceTiles_.forEach(function(e,i,r){var n=e.getState();if(n==b.a.IDLE||n==b.a.LOADING){t++;var o=Object(S.a)(e,j.a.CHANGE,function(i){var r=e.getState();r!=b.a.LOADED&&r!=b.a.ERROR&&r!=b.a.EMPTY||(Object(S.e)(o),0===--t&&(this.unlistenSources_(),this.reproject_()))},this);this.sourcesListenerKeys_.push(o)}}.bind(this)),this.sourceTiles_.forEach(function(t,e,i){t.getState()==b.a.IDLE&&t.load()}),0===t&&setTimeout(this.reproject_.bind(this),0)}},e.prototype.unlistenSources_=function(){this.sourcesListenerKeys_.forEach(S.e),this.sourcesListenerKeys_=null},e}(E),G=i(11),D=i(49),X=i(54),k=i(64),N=i(108),z=i(45),Y=i(92),U=i(7),K=[0,0,0],q=function(t){var e;if(this.minZoom=void 0!==t.minZoom?t.minZoom:0,this.resolutions_=t.resolutions,Object(r.a)(Object(U.g)(this.resolutions_,function(t,e){return e-t},!0),17),!t.origins)for(var i=0,n=this.resolutions_.length-1;i<n;++i)if(e){if(this.resolutions_[i]/this.resolutions_[i+1]!==e){e=void 0;break}}else e=this.resolutions_[i]/this.resolutions_[i+1];this.zoomFactor_=e,this.maxZoom=this.resolutions_.length-1,this.origin_=void 0!==t.origin?t.origin:null,this.origins_=null,void 0!==t.origins&&(this.origins_=t.origins,Object(r.a)(this.origins_.length==this.resolutions_.length,20));var o=t.extent;void 0===o||this.origin_||this.origins_||(this.origin_=Object(f.C)(o)),Object(r.a)(!this.origin_&&this.origins_||this.origin_&&!this.origins_,18),this.tileSizes_=null,void 0!==t.tileSizes&&(this.tileSizes_=t.tileSizes,Object(r.a)(this.tileSizes_.length==this.resolutions_.length,19)),this.tileSize_=void 0!==t.tileSize?t.tileSize:this.tileSizes_?null:k.b,Object(r.a)(!this.tileSize_&&this.tileSizes_||this.tileSize_&&!this.tileSizes_,22),this.extent_=void 0!==o?o:null,this.fullTileRanges_=null,this.tmpSize_=[0,0],void 0!==t.sizes?this.fullTileRanges_=t.sizes.map(function(t,e){return new Y.b(Math.min(0,t[0]),Math.max(t[0]-1,-1),Math.min(0,t[1]),Math.max(t[1]-1,-1))},this):o&&this.calculateTileRanges_(o)};q.prototype.forEachTileCoord=function(t,e,i){for(var r=this.getTileRangeForExtentAndZ(t,e),n=r.minX,o=r.maxX;n<=o;++n)for(var s=r.minY,a=r.maxY;s<=a;++s)i([e,n,s])},q.prototype.forEachTileCoordParentTileRange=function(t,e,i,r,n){var o,s,a,h=null,c=t[0]-1;for(2===this.zoomFactor_?(s=t[1],a=t[2]):h=this.getTileCoordExtent(t,n);c>=this.minZoom;){if(2===this.zoomFactor_?(s=Math.floor(s/2),a=Math.floor(a/2),o=Object(Y.a)(s,s,a,a,r)):o=this.getTileRangeForExtentAndZ(h,c,r),e.call(i,c,o))return!0;--c}return!1},q.prototype.getExtent=function(){return this.extent_},q.prototype.getMaxZoom=function(){return this.maxZoom},q.prototype.getMinZoom=function(){return this.minZoom},q.prototype.getOrigin=function(t){return this.origin_?this.origin_:this.origins_[t]},q.prototype.getResolution=function(t){return this.resolutions_[t]},q.prototype.getResolutions=function(){return this.resolutions_},q.prototype.getTileCoordChildTileRange=function(t,e,i){if(t[0]<this.maxZoom){if(2===this.zoomFactor_){var r=2*t[1],n=2*t[2];return Object(Y.a)(r,r+1,n,n+1,e)}var o=this.getTileCoordExtent(t,i);return this.getTileRangeForExtentAndZ(o,t[0]+1,e)}return null},q.prototype.getTileRangeExtent=function(t,e,i){var r=this.getOrigin(t),n=this.getResolution(t),o=Object(D.d)(this.getTileSize(t),this.tmpSize_),s=r[0]+e.minX*o[0]*n,a=r[0]+(e.maxX+1)*o[0]*n,h=r[1]+e.minY*o[1]*n,c=r[1]+(e.maxY+1)*o[1]*n;return Object(f.k)(s,h,a,c,i)},q.prototype.getTileRangeForExtentAndZ=function(t,e,i){var r=K;this.getTileCoordForXYAndZ_(t[0],t[1],e,!1,r);var n=r[1],o=r[2];return this.getTileCoordForXYAndZ_(t[2],t[3],e,!0,r),Object(Y.a)(n,r[1],o,r[2],i)},q.prototype.getTileCoordCenter=function(t){var e=this.getOrigin(t[0]),i=this.getResolution(t[0]),r=Object(D.d)(this.getTileSize(t[0]),this.tmpSize_);return[e[0]+(t[1]+.5)*r[0]*i,e[1]+(t[2]+.5)*r[1]*i]},q.prototype.getTileCoordExtent=function(t,e){var i=this.getOrigin(t[0]),r=this.getResolution(t[0]),n=Object(D.d)(this.getTileSize(t[0]),this.tmpSize_),o=i[0]+t[1]*n[0]*r,s=i[1]+t[2]*n[1]*r,a=o+n[0]*r,h=s+n[1]*r;return Object(f.k)(o,s,a,h,e)},q.prototype.getTileCoordForCoordAndResolution=function(t,e,i){return this.getTileCoordForXYAndResolution_(t[0],t[1],e,!1,i)},q.prototype.getTileCoordForXYAndResolution_=function(t,e,i,r,n){var s=this.getZForResolution(i),a=i/this.getResolution(s),h=this.getOrigin(s),c=Object(D.d)(this.getTileSize(s),this.tmpSize_),u=r?.5:0,l=r?0:.5,p=Math.floor((t-h[0])/i+u),d=Math.floor((e-h[1])/i+l),f=a*p/c[0],_=a*d/c[1];return r?(f=Math.ceil(f)-1,_=Math.ceil(_)-1):(f=Math.floor(f),_=Math.floor(_)),o(s,f,_,n)},q.prototype.getTileCoordForXYAndZ_=function(t,e,i,r,n){var s=this.getOrigin(i),a=this.getResolution(i),h=Object(D.d)(this.getTileSize(i),this.tmpSize_),c=r?.5:0,u=r?0:.5,l=Math.floor((t-s[0])/a+c),p=Math.floor((e-s[1])/a+u),d=l/h[0],f=p/h[1];return r?(d=Math.ceil(d)-1,f=Math.ceil(f)-1):(d=Math.floor(d),f=Math.floor(f)),o(i,d,f,n)},q.prototype.getTileCoordForCoordAndZ=function(t,e,i){return this.getTileCoordForXYAndZ_(t[0],t[1],e,!1,i)},q.prototype.getTileCoordResolution=function(t){return this.resolutions_[t[0]]},q.prototype.getTileSize=function(t){return this.tileSize_?this.tileSize_:this.tileSizes_[t]},q.prototype.getFullTileRange=function(t){return this.fullTileRanges_?this.fullTileRanges_[t]:null},q.prototype.getZForResolution=function(t,e){var i=Object(U.h)(this.resolutions_,t,e||0);return Object(n.a)(i,this.minZoom,this.maxZoom)},q.prototype.calculateTileRanges_=function(t){for(var e=this.resolutions_.length,i=new Array(e),r=this.minZoom;r<e;++r)i[r]=this.getTileRangeForExtentAndZ(t,r);this.fullTileRanges_=i};var W=q;function Z(t){var e=t.getDefaultTileGrid();return e||(e=J(t),t.setDefaultTileGrid(e)),e}function B(t){var e=t||{},i=e.extent||Object(m.d)("EPSG:3857").getExtent(),r={extent:i,minZoom:e.minZoom,tileSize:e.tileSize,resolutions:H(i,e.maxZoom,e.tileSize)};return new W(r)}function H(t,e,i){for(var r=void 0!==e?e:k.a,n=Object(f.A)(t),o=Object(f.E)(t),s=Object(D.d)(void 0!==i?i:k.b),a=Math.max(o/s[0],n/s[1]),h=r+1,c=new Array(h),u=0;u<h;++u)c[u]=a/Math.pow(2,u);return c}function J(t,e,i,r){return function(t,e,i,r){var n=void 0!==r?r:N.a.TOP_LEFT,o=H(t,e,i);return new W({extent:t,origin:Object(f.y)(t,n),resolutions:o,tileSize:i})}(V(t),e,i,r)}function V(t){var e=(t=Object(m.d)(t)).getExtent();if(!e){var i=180*m.a[z.b.DEGREES]/t.getMetersPerUnit();e=Object(f.k)(-i,-i,i,i)}return e}var Q=function(t){function e(e){t.call(this,{attributions:e.attributions,attributionsCollapsible:e.attributionsCollapsible,projection:e.projection,state:e.state,wrapX:e.wrapX}),this.opaque_=void 0!==e.opaque&&e.opaque,this.tilePixelRatio_=void 0!==e.tilePixelRatio?e.tilePixelRatio:1,this.tileGrid=void 0!==e.tileGrid?e.tileGrid:null,this.tileCache=new I(e.cacheSize),this.tmpSize=[0,0],this.key_=e.key||"",this.tileOptions={transition:e.transition}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.canExpireCache=function(){return this.tileCache.canExpireCache()},e.prototype.expireCache=function(t,e){var i=this.getTileCacheForProjection(t);i&&i.expireCache(e)},e.prototype.forEachLoadedTile=function(t,e,i,r){var n=this.getTileCacheForProjection(t);if(!n)return!1;for(var o,a,h,c=!0,u=i.minX;u<=i.maxX;++u)for(var l=i.minY;l<=i.maxY;++l)a=s(e,u,l),h=!1,n.containsKey(a)&&(h=(o=n.get(a)).getState()===b.a.LOADED)&&(h=!1!==r(o)),h||(c=!1);return c},e.prototype.getGutterForProjection=function(t){return 0},e.prototype.getKey=function(){return this.key_},e.prototype.setKey=function(t){this.key_!==t&&(this.key_=t,this.changed())},e.prototype.getOpaque=function(t){return this.opaque_},e.prototype.getResolutions=function(){return this.tileGrid.getResolutions()},e.prototype.getTile=function(t,e,i,r,n){return Object(_.b)()},e.prototype.getTileGrid=function(){return this.tileGrid},e.prototype.getTileGridForProjection=function(t){return this.tileGrid?this.tileGrid:Z(t)},e.prototype.getTileCacheForProjection=function(t){var e=this.getProjection();return e&&!Object(m.c)(e,t)?null:this.tileCache},e.prototype.getTilePixelRatio=function(t){return this.tilePixelRatio_},e.prototype.getTilePixelSize=function(t,e,i){var r=this.getTileGridForProjection(i),n=this.getTilePixelRatio(e),o=Object(D.d)(r.getTileSize(t),this.tmpSize);return 1==n?o:Object(D.c)(o,n,this.tmpSize)},e.prototype.getTileCoordForTileUrlFunction=function(t,e){var i=void 0!==e?e:this.getProjection(),r=this.getTileGridForProjection(i);return this.getWrapX()&&i.isGlobal()&&(t=function(t,e,i){var r=e[0],n=t.getTileCoordCenter(e),o=V(i);if(Object(f.f)(o,n))return e;var s=Object(f.E)(o),a=Math.ceil((o[0]-n[0])/s);return n[0]+=s*a,t.getTileCoordForCoordAndZ(n,r)}(r,t,i)),function(t,e){var i=t[0],r=t[1],n=t[2];if(e.getMinZoom()>i||i>e.getMaxZoom())return!1;var o,s=e.getExtent();return!(o=s?e.getTileRangeForExtentAndZ(s,i):e.getFullTileRange(i))||o.containsXY(r,n)}(t,r)?t:null},e.prototype.refresh=function(){this.tileCache.clear(),this.changed()},e.prototype.useTile=function(t,e,i,r){},e}(X.a),$=function(t){function e(e,i){t.call(this,e),this.tile=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(G.a),tt=Q,et="tileloadstart",it="tileloadend",rt="tileloaderror",nt=function(t){function e(e){t.call(this,{attributions:e.attributions,cacheSize:e.cacheSize,opaque:e.opaque,projection:e.projection,state:e.state,tileGrid:e.tileGrid,tilePixelRatio:e.tilePixelRatio,wrapX:e.wrapX,transition:e.transition,key:e.key,attributionsCollapsible:e.attributionsCollapsible}),this.generateTileUrlFunction_=!e.tileUrlFunction,this.tileLoadFunction=e.tileLoadFunction,this.tileUrlFunction=e.tileUrlFunction?e.tileUrlFunction.bind(this):p,this.urls=null,e.urls?this.setUrls(e.urls):e.url&&this.setUrl(e.url),e.tileUrlFunction&&this.setTileUrlFunction(e.tileUrlFunction,this.key_),this.tileLoadingKeys_={}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getTileLoadFunction=function(){return this.tileLoadFunction},e.prototype.getTileUrlFunction=function(){return this.tileUrlFunction},e.prototype.getUrls=function(){return this.urls},e.prototype.handleTileChange=function(t){var e,i=t.target,r=Object(_.c)(i),n=i.getState();n==b.a.LOADING?(this.tileLoadingKeys_[r]=!0,e=et):r in this.tileLoadingKeys_&&(delete this.tileLoadingKeys_[r],e=n==b.a.ERROR?rt:n==b.a.LOADED||n==b.a.ABORT?it:void 0),null!=e&&this.dispatchEvent(new $(e,i))},e.prototype.setTileLoadFunction=function(t){this.tileCache.clear(),this.tileLoadFunction=t,this.changed()},e.prototype.setTileUrlFunction=function(t,e){this.tileUrlFunction=t,this.tileCache.pruneExceptNewestZ(),void 0!==e?this.setKey(e):this.changed()},e.prototype.setUrl=function(t){var e=this.urls=d(t);this.setUrls(e)},e.prototype.setUrls=function(t){this.urls=t;var e=t.join("\n");this.generateTileUrlFunction_?this.setTileUrlFunction(u(t,this.tileGrid),e):this.setKey(e)},e.prototype.useTile=function(t,e,i){var r=s(t,e,i);this.tileCache.containsKey(r)&&this.tileCache.get(r)},e}(tt);function ot(t,e){t.getImage().src=e}var st=function(t){function e(e){t.call(this,{attributions:e.attributions,cacheSize:e.cacheSize,opaque:e.opaque,projection:e.projection,state:e.state,tileGrid:e.tileGrid,tileLoadFunction:e.tileLoadFunction?e.tileLoadFunction:ot,tilePixelRatio:e.tilePixelRatio,tileUrlFunction:e.tileUrlFunction,url:e.url,urls:e.urls,wrapX:e.wrapX,transition:e.transition,key:e.key,attributionsCollapsible:e.attributionsCollapsible}),this.crossOrigin=void 0!==e.crossOrigin?e.crossOrigin:null,this.tileClass=void 0!==e.tileClass?e.tileClass:C,this.tileCacheForProjection={},this.tileGridForProjection={},this.reprojectionErrorThreshold_=e.reprojectionErrorThreshold,this.renderReprojectionEdges_=!1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.canExpireCache=function(){if(!v.a)return t.prototype.canExpireCache.call(this);if(this.tileCache.canExpireCache())return!0;for(var e in this.tileCacheForProjection)if(this.tileCacheForProjection[e].canExpireCache())return!0;return!1},e.prototype.expireCache=function(e,i){if(v.a){var r=this.getTileCacheForProjection(e);for(var n in this.tileCache.expireCache(this.tileCache==r?i:{}),this.tileCacheForProjection){var o=this.tileCacheForProjection[n];o.expireCache(o==r?i:{})}}else t.prototype.expireCache.call(this,e,i)},e.prototype.getGutterForProjection=function(t){return v.a&&this.getProjection()&&t&&!Object(m.c)(this.getProjection(),t)?0:this.getGutter()},e.prototype.getGutter=function(){return 0},e.prototype.getOpaque=function(e){return!(v.a&&this.getProjection()&&e&&!Object(m.c)(this.getProjection(),e))&&t.prototype.getOpaque.call(this,e)},e.prototype.getTileGridForProjection=function(e){if(!v.a)return t.prototype.getTileGridForProjection.call(this,e);var i=this.getProjection();if(!this.tileGrid||i&&!Object(m.c)(i,e)){var r=Object(_.c)(e);return r in this.tileGridForProjection||(this.tileGridForProjection[r]=Z(e)),this.tileGridForProjection[r]}return this.tileGrid},e.prototype.getTileCacheForProjection=function(e){if(!v.a)return t.prototype.getTileCacheForProjection.call(this,e);var i=this.getProjection();if(!i||Object(m.c)(i,e))return this.tileCache;var r=Object(_.c)(e);return r in this.tileCacheForProjection||(this.tileCacheForProjection[r]=new I(this.tileCache.highWaterMark)),this.tileCacheForProjection[r]},e.prototype.createTile_=function(t,e,i,r,n,o){var s=[t,e,i],a=this.getTileCoordForTileUrlFunction(s,n),h=a?this.tileUrlFunction(a,r,n):void 0,c=new this.tileClass(s,void 0!==h?b.a.IDLE:b.a.EMPTY,void 0!==h?h:"",this.crossOrigin,this.tileLoadFunction,this.tileOptions);return c.key=o,Object(S.a)(c,j.a.CHANGE,this.handleTileChange,this),c},e.prototype.getTile=function(t,e,i,r,n){var o=this.getProjection();if(v.a&&o&&n&&!Object(m.c)(o,n)){var s,h=this.getTileCacheForProjection(n),c=[t,e,i],u=a(c);h.containsKey(u)&&(s=h.get(u));var l=this.getKey();if(s&&s.key==l)return s;var p=this.getTileGridForProjection(o),d=this.getTileGridForProjection(n),f=this.getTileCoordForTileUrlFunction(c,n),_=new M(o,p,n,d,c,f,this.getTilePixelRatio(r),this.getGutter(),function(t,e,i,r){return this.getTileInternal(t,e,i,r,o)}.bind(this),this.reprojectionErrorThreshold_,this.renderReprojectionEdges_);return _.key=l,s?(_.interimTile=s,_.refreshInterimChain(),h.replace(u,_)):h.set(u,_),_}return this.getTileInternal(t,e,i,r,o||n)},e.prototype.getTileInternal=function(t,e,i,r,n){var o=null,a=s(t,e,i),h=this.getKey();if(this.tileCache.containsKey(a)){if((o=this.tileCache.get(a)).key!=h){var c=o;o=this.createTile_(t,e,i,r,n,h),c.getState()==b.a.IDLE?o.interimTile=c.interimTile:o.interimTile=c,o.refreshInterimChain(),this.tileCache.replace(a,o)}}else o=this.createTile_(t,e,i,r,n,h),this.tileCache.set(a,o);return o},e.prototype.setRenderReprojectionEdges=function(t){if(v.a&&this.renderReprojectionEdges_!=t){for(var e in this.renderReprojectionEdges_=t,this.tileCacheForProjection)this.tileCacheForProjection[e].clear();this.changed()}},e.prototype.setTileGridForProjection=function(t,e){if(v.a){var i=Object(m.d)(t);if(i){var r=Object(_.c)(i);r in this.tileGridForProjection||(this.tileGridForProjection[r]=e)}}},e}(nt),at=function(t){function e(e){var i=void 0!==e.hidpi&&e.hidpi;t.call(this,{cacheSize:e.cacheSize,crossOrigin:"anonymous",opaque:!0,projection:Object(m.d)("EPSG:3857"),reprojectionErrorThreshold:e.reprojectionErrorThreshold,state:y.a.LOADING,tileLoadFunction:e.tileLoadFunction,tilePixelRatio:i?2:1,wrapX:void 0===e.wrapX||e.wrapX,transition:e.transition}),this.hidpi_=i,this.culture_=void 0!==e.culture?e.culture:"en-us",this.maxZoom_=void 0!==e.maxZoom?e.maxZoom:-1,this.apiKey_=e.key,this.imagerySet_=e.imagerySet,g("https://dev.virtualearth.net/REST/v1/Imagery/Metadata/"+this.imagerySet_+"?uriScheme=https&include=ImageryProviders&key="+this.apiKey_+"&c="+this.culture_,this.handleImageryMetadataResponse.bind(this),void 0,"jsonp")}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getApiKey=function(){return this.apiKey_},e.prototype.getImagerySet=function(){return this.imagerySet_},e.prototype.handleImageryMetadataResponse=function(t){if(200==t.statusCode&&"OK"==t.statusDescription&&"ValidCredentials"==t.authenticationResultCode&&1==t.resourceSets.length&&1==t.resourceSets[0].resources.length){var e=t.resourceSets[0].resources[0],i=-1==this.maxZoom_?e.zoomMax:this.maxZoom_,r=V(this.getProjection()),n=this.hidpi_?2:1,s=e.imageWidth==e.imageHeight?e.imageWidth/n:[e.imageWidth/n,e.imageHeight/n],a=B({extent:r,minZoom:e.zoomMin,maxZoom:i,tileSize:s});this.tileGrid=a;var h=this.culture_,c=this.hidpi_;if(this.tileUrlFunction=l(e.imageUrlSubdomains.map(function(t){var i=[0,0,0],r=e.imageUrl.replace("{subdomain}",t).replace("{culture}",h);return function(t,e,n){if(t){o(t[0],t[1],-t[2]-1,i);var s=r;return c&&(s+="&dpi=d1&device=mobile"),s.replace("{quadkey}",function(t){var e,i,r=t[0],n=new Array(r),o=1<<r-1;for(e=0;e<r;++e)i=48,t[1]&o&&(i+=1),t[2]&o&&(i+=2),n[e]=String.fromCharCode(i),o>>=1;return n.join("")}(i))}}})),e.imageryProviders){var u=Object(m.g)(Object(m.d)("EPSG:4326"),this.getProjection());this.setAttributions(function(t){var i=[],r=t.viewState,n=this.getTileGrid().getTileCoordForCoordAndResolution(r.center,r.resolution)[0];return e.imageryProviders.map(function(e){for(var r=!1,o=e.coverageAreas,s=0,a=o.length;s<a;++s){var h=o[s];if(n>=h.zoomMin&&n<=h.zoomMax){var c=h.bbox,l=[c[1],c[0],c[3],c[2]],p=Object(f.a)(l,u);if(Object(f.F)(p,t.extent)){r=!0;break}}}r&&i.push(e.attribution)}),i.push('<a class="ol-attribution-bing-tos" href="https://www.microsoft.com/maps/product/terms.html">Terms of Use</a>'),i}.bind(this))}this.setState(y.a.READY)}else this.setState(y.a.ERROR)},e}(st),ht=i(5),ct=function(t){function e(e){var i=e||{},r=void 0!==i.projection?i.projection:"EPSG:3857",n=void 0!==i.tileGrid?i.tileGrid:B({extent:V(r),maxZoom:i.maxZoom,minZoom:i.minZoom,tileSize:i.tileSize});t.call(this,{attributions:i.attributions,cacheSize:i.cacheSize,crossOrigin:i.crossOrigin,opaque:i.opaque,projection:r,reprojectionErrorThreshold:i.reprojectionErrorThreshold,tileGrid:n,tileLoadFunction:i.tileLoadFunction,tilePixelRatio:i.tilePixelRatio,tileUrlFunction:i.tileUrlFunction,url:i.url,urls:i.urls,wrapX:void 0===i.wrapX||i.wrapX,transition:i.transition,attributionsCollapsible:i.attributionsCollapsible})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(st),ut=function(t){function e(e){t.call(this,{attributions:e.attributions,cacheSize:e.cacheSize,crossOrigin:e.crossOrigin,maxZoom:void 0!==e.maxZoom?e.maxZoom:18,minZoom:e.minZoom,projection:e.projection,wrapX:e.wrapX}),this.account_=e.account,this.mapId_=e.map||"",this.config_=e.config||{},this.templateCache_={},this.initializeMap_()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getConfig=function(){return this.config_},e.prototype.updateConfig=function(t){Object(ht.a)(this.config_,t),this.initializeMap_()},e.prototype.setConfig=function(t){this.config_=t||{},this.initializeMap_()},e.prototype.initializeMap_=function(){var t=JSON.stringify(this.config_);if(this.templateCache_[t])this.applyTemplate_(this.templateCache_[t]);else{var e="https://"+this.account_+".carto.com/api/v1/map";this.mapId_&&(e+="/named/"+this.mapId_);var i=new XMLHttpRequest;i.addEventListener("load",this.handleInitResponse_.bind(this,t)),i.addEventListener("error",this.handleInitError_.bind(this)),i.open("POST",e),i.setRequestHeader("Content-type","application/json"),i.send(JSON.stringify(this.config_))}},e.prototype.handleInitResponse_=function(t,e){var i=e.target;if(!i.status||i.status>=200&&i.status<300){var r;try{r=JSON.parse(i.responseText)}catch(t){return void this.setState(y.a.ERROR)}this.applyTemplate_(r),this.templateCache_[t]=r,this.setState(y.a.READY)}else this.setState(y.a.ERROR)},e.prototype.handleInitError_=function(t){this.setState(y.a.ERROR)},e.prototype.applyTemplate_=function(t){var e="https://"+t.cdn_url.https+"/"+this.account_+"/api/v1/map/"+t.layergroupid+"/{z}/{x}/{y}.png";this.setUrl(e)},e}(ct),lt=i(48),pt=i(10),dt=i(18),ft=i(42),_t=i(39),gt=function(t){function e(e){t.call(this,{attributions:e.attributions,wrapX:e.wrapX}),this.resolution=void 0,this.distance=void 0!==e.distance?e.distance:20,this.features=[],this.geometryFunction=e.geometryFunction||function(t){var e=t.getGeometry();return Object(r.a)(e.getType()==pt.a.POINT,10),e},this.source=e.source,Object(S.a)(this.source,j.a.CHANGE,this.refresh,this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getDistance=function(){return this.distance},e.prototype.getSource=function(){return this.source},e.prototype.loadFeatures=function(t,e,i){this.source.loadFeatures(t,e,i),e!==this.resolution&&(this.clear(),this.resolution=e,this.cluster(),this.addFeatures(this.features))},e.prototype.setDistance=function(t){this.distance=t,this.refresh()},e.prototype.refresh=function(){this.clear(),this.cluster(),this.addFeatures(this.features),t.prototype.refresh.call(this)},e.prototype.cluster=function(){if(void 0!==this.resolution){this.features.length=0;for(var t=Object(f.j)(),e=this.distance*this.resolution,i=this.source.getFeatures(),r={},n=0,o=i.length;n<o;n++){var s=i[n];if(!(Object(_.c)(s)in r)){var a=this.geometryFunction(s);if(a){var h=a.getCoordinates();Object(f.m)(h,t),Object(f.c)(t,e,t);var c=this.source.getFeaturesInExtent(t);c=c.filter(function(t){var e=Object(_.c)(t);return!(e in r)&&(r[e]=!0,!0)}),this.features.push(this.createCluster(c))}}}}},e.prototype.createCluster=function(t){for(var e=[0,0],i=t.length-1;i>=0;--i){var r=this.geometryFunction(t[i]);r?Object(dt.a)(e,r.getCoordinates()):t.splice(i,1)}Object(dt.g)(e,1/t.length);var n=new lt.default(new ft.default(e));return n.set("features",t),n},e}(_t.a),mt=i(30),yt=i(80),vt=function(t){function e(e,i,r,n,o,s){var a=e.getExtent(),h=i.getExtent(),c=h?Object(f.B)(r,h):r,u=F(e,i,Object(f.x)(c),n),l=v.b,p=new P(e,i,c,a,u*l),d=s(p.calculateSourceExtent(),u,o),_=mt.a.LOADED;d&&(_=mt.a.IDLE);var g=d?d.getPixelRatio():1;t.call(this,r,n,g,_),this.targetProj_=i,this.maxSourceExtent_=a,this.triangulation_=p,this.targetResolution_=n,this.targetExtent_=r,this.sourceImage_=d,this.sourcePixelRatio_=g,this.canvas_=null,this.sourceListenerKey_=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.disposeInternal=function(){this.state==mt.a.LOADING&&this.unlistenSource_(),t.prototype.disposeInternal.call(this)},e.prototype.getImage=function(){return this.canvas_},e.prototype.getProjection=function(){return this.targetProj_},e.prototype.reproject_=function(){var t=this.sourceImage_.getState();if(t==mt.a.LOADED){var e=Object(f.E)(this.targetExtent_)/this.targetResolution_,i=Object(f.A)(this.targetExtent_)/this.targetResolution_;this.canvas_=L(e,i,this.sourcePixelRatio_,this.sourceImage_.getResolution(),this.maxSourceExtent_,this.targetResolution_,this.targetExtent_,this.triangulation_,[{extent:this.sourceImage_.getExtent(),image:this.sourceImage_.getImage()}],0)}this.state=t,this.changed()},e.prototype.load=function(){if(this.state==mt.a.IDLE){this.state=mt.a.LOADING,this.changed();var t=this.sourceImage_.getState();t==mt.a.LOADED||t==mt.a.ERROR?this.reproject_():(this.sourceListenerKey_=Object(S.a)(this.sourceImage_,j.a.CHANGE,function(t){var e=this.sourceImage_.getState();e!=mt.a.LOADED&&e!=mt.a.ERROR||(this.unlistenSource_(),this.reproject_())},this),this.sourceImage_.load())}},e.prototype.unlistenSource_=function(){Object(S.e)(this.sourceListenerKey_),this.sourceListenerKey_=null},e}(yt.a),bt="imageloadstart",Ot="imageloadend",xt="imageloaderror",jt=function(t){function e(e,i){t.call(this,e),this.image=i}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(G.a);function Et(t,e){t.getImage().src=e}var Tt=function(t){function e(e){t.call(this,{attributions:e.attributions,projection:e.projection,state:e.state}),this.resolutions_=void 0!==e.resolutions?e.resolutions:null,this.reprojectedImage_=null,this.reprojectedRevision_=0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getResolutions=function(){return this.resolutions_},e.prototype.findNearestResolution=function(t){if(this.resolutions_){var e=Object(U.h)(this.resolutions_,t,0);t=this.resolutions_[e]}return t},e.prototype.getImage=function(t,e,i,r){var n=this.getProjection();if(v.a&&n&&r&&!Object(m.c)(n,r)){if(this.reprojectedImage_){if(this.reprojectedRevision_==this.getRevision()&&Object(m.c)(this.reprojectedImage_.getProjection(),r)&&this.reprojectedImage_.getResolution()==e&&Object(f.p)(this.reprojectedImage_.getExtent(),t))return this.reprojectedImage_;this.reprojectedImage_.dispose(),this.reprojectedImage_=null}return this.reprojectedImage_=new vt(n,r,t,e,i,function(t,e,i){return this.getImageInternal(t,e,i,n)}.bind(this)),this.reprojectedRevision_=this.getRevision(),this.reprojectedImage_}return n&&(r=n),this.getImageInternal(t,e,i,r)},e.prototype.getImageInternal=function(t,e,i,r){return Object(_.b)()},e.prototype.handleImageChange=function(t){var e=t.target;switch(e.getState()){case mt.a.LOADING:this.loading=!0,this.dispatchEvent(new jt(bt,e));break;case mt.a.LOADED:this.loading=!1,this.dispatchEvent(new jt(Ot,e));break;case mt.a.ERROR:this.loading=!1,this.dispatchEvent(new jt(xt,e))}},e}(X.a),St=function(t){function e(e,i,r,n,o,s){t.call(this,e,i,r,mt.a.IDLE),this.src_=n,this.image_=new Image,null!==o&&(this.image_.crossOrigin=o),this.imageListenerKeys_=null,this.state=mt.a.IDLE,this.imageLoadFunction_=s}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getImage=function(){return this.image_},e.prototype.handleImageError_=function(){this.state=mt.a.ERROR,this.unlistenImage_(),this.changed()},e.prototype.handleImageLoad_=function(){void 0===this.resolution&&(this.resolution=Object(f.A)(this.extent)/this.image_.height),this.state=mt.a.LOADED,this.unlistenImage_(),this.changed()},e.prototype.load=function(){this.state!=mt.a.IDLE&&this.state!=mt.a.ERROR||(this.state=mt.a.LOADING,this.changed(),this.imageListenerKeys_=[Object(S.b)(this.image_,j.a.ERROR,this.handleImageError_,this),Object(S.b)(this.image_,j.a.LOAD,this.handleImageLoad_,this)],this.imageLoadFunction_(this,this.src_))},e.prototype.setImage=function(t){this.image_=t},e.prototype.unlistenImage_=function(){this.imageListenerKeys_.forEach(S.e),this.imageListenerKeys_=null},e}(yt.a);function Rt(t,e){var i=[];Object.keys(e).forEach(function(t){null!==e[t]&&void 0!==e[t]&&i.push(t+"="+encodeURIComponent(e[t]))});var r=i.join("&");return(t=-1===(t=t.replace(/[?&]$/,"")).indexOf("?")?t+"?":t+"&")+r}var Ct=function(t){function e(e){var i=e||{};t.call(this,{attributions:i.attributions,projection:i.projection,resolutions:i.resolutions}),this.crossOrigin_=void 0!==i.crossOrigin?i.crossOrigin:null,this.hidpi_=void 0===i.hidpi||i.hidpi,this.url_=i.url,this.imageLoadFunction_=void 0!==i.imageLoadFunction?i.imageLoadFunction:Et,this.params_=i.params||{},this.image_=null,this.imageSize_=[0,0],this.renderedRevision_=0,this.ratio_=void 0!==i.ratio?i.ratio:1.5}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getParams=function(){return this.params_},e.prototype.getImageInternal=function(t,e,i,r){if(void 0===this.url_)return null;e=this.findNearestResolution(e),i=this.hidpi_?i:1;var n=this.image_;if(n&&this.renderedRevision_==this.getRevision()&&n.getResolution()==e&&n.getPixelRatio()==i&&Object(f.g)(n.getExtent(),t))return n;var o={F:"image",FORMAT:"PNG32",TRANSPARENT:!0};Object(ht.a)(o,this.params_);var s=((t=t.slice())[0]+t[2])/2,a=(t[1]+t[3])/2;if(1!=this.ratio_){var h=this.ratio_*Object(f.E)(t)/2,c=this.ratio_*Object(f.A)(t)/2;t[0]=s-h,t[1]=a-c,t[2]=s+h,t[3]=a+c}var u=e/i,l=Math.ceil(Object(f.E)(t)/u),p=Math.ceil(Object(f.A)(t)/u);t[0]=s-u*l/2,t[2]=s+u*l/2,t[1]=a-u*p/2,t[3]=a+u*p/2,this.imageSize_[0]=l,this.imageSize_[1]=p;var d=this.getRequestUrl_(t,this.imageSize_,i,r,o);return this.image_=new St(t,e,i,d,this.crossOrigin_,this.imageLoadFunction_),this.renderedRevision_=this.getRevision(),Object(S.a)(this.image_,j.a.CHANGE,this.handleImageChange,this),this.image_},e.prototype.getImageLoadFunction=function(){return this.imageLoadFunction_},e.prototype.getRequestUrl_=function(t,e,i,n,o){var s=n.getCode().split(":").pop();o.SIZE=e[0]+","+e[1],o.BBOX=t.join(","),o.BBOXSR=s,o.IMAGESR=s,o.DPI=Math.round(90*i);var a=this.url_,h=a.replace(/MapServer\/?$/,"MapServer/export").replace(/ImageServer\/?$/,"ImageServer/exportImage");return h==a&&Object(r.a)(!1,50),Rt(h,o)},e.prototype.getUrl=function(){return this.url_},e.prototype.setImageLoadFunction=function(t){this.image_=null,this.imageLoadFunction_=t,this.changed()},e.prototype.setUrl=function(t){t!=this.url_&&(this.url_=t,this.image_=null,this.changed())},e.prototype.updateParams=function(t){Object(ht.a)(this.params_,t),this.image_=null,this.changed()},e}(Tt),It=i(79),Ft=function(t){function e(e){var i=e||{};t.call(this,{attributions:i.attributions,projection:i.projection,resolutions:i.resolutions,state:i.state}),this.canvasFunction_=i.canvasFunction,this.canvas_=null,this.renderedRevision_=0,this.ratio_=void 0!==i.ratio?i.ratio:1.5}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getImageInternal=function(t,e,i,r){e=this.findNearestResolution(e);var n=this.canvas_;if(n&&this.renderedRevision_==this.getRevision()&&n.getResolution()==e&&n.getPixelRatio()==i&&Object(f.g)(n.getExtent(),t))return n;t=t.slice(),Object(f.J)(t,this.ratio_);var o=[Object(f.E)(t)/e*i,Object(f.A)(t)/e*i],s=this.canvasFunction_.call(this,t,e,i,o,r);return s&&(n=new It.a(t,e,i,s)),this.canvas_=n,this.renderedRevision_=this.getRevision(),n},e}(Tt);var wt=function(t){function e(e){t.call(this,{projection:e.projection,resolutions:e.resolutions}),this.crossOrigin_=void 0!==e.crossOrigin?e.crossOrigin:null,this.displayDpi_=void 0!==e.displayDpi?e.displayDpi:96,this.params_=e.params||{},this.url_=e.url,this.imageLoadFunction_=void 0!==e.imageLoadFunction?e.imageLoadFunction:Et,this.hidpi_=void 0===e.hidpi||e.hidpi,this.metersPerUnit_=void 0!==e.metersPerUnit?e.metersPerUnit:1,this.ratio_=void 0!==e.ratio?e.ratio:1,this.useOverlay_=void 0!==e.useOverlay&&e.useOverlay,this.image_=null,this.renderedRevision_=0}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getParams=function(){return this.params_},e.prototype.getImageInternal=function(t,e,i,r){e=this.findNearestResolution(e),i=this.hidpi_?i:1;var n=this.image_;if(n&&this.renderedRevision_==this.getRevision()&&n.getResolution()==e&&n.getPixelRatio()==i&&Object(f.g)(n.getExtent(),t))return n;1!=this.ratio_&&(t=t.slice(),Object(f.J)(t,this.ratio_));var o=[Object(f.E)(t)/e*i,Object(f.A)(t)/e*i];if(void 0!==this.url_){var s=this.getUrl(this.url_,this.params_,t,o,r);n=new St(t,e,i,s,this.crossOrigin_,this.imageLoadFunction_),Object(S.a)(n,j.a.CHANGE,this.handleImageChange,this)}else n=null;return this.image_=n,this.renderedRevision_=this.getRevision(),n},e.prototype.getImageLoadFunction=function(){return this.imageLoadFunction_},e.prototype.updateParams=function(t){Object(ht.a)(this.params_,t),this.changed()},e.prototype.getUrl=function(t,e,i,r,n){var o=function(t,e,i,r){var n=Object(f.E)(t),o=Object(f.A)(t),s=e[0],a=e[1],h=.0254/r;return a*n>s*o?n*i/(s*h):o*i/(a*h)}(i,r,this.metersPerUnit_,this.displayDpi_),s=Object(f.x)(i),a={OPERATION:this.useOverlay_?"GETDYNAMICMAPOVERLAYIMAGE":"GETMAPIMAGE",VERSION:"2.0.0",LOCALE:"en",CLIENTAGENT:"ol/source/ImageMapGuide source",CLIP:"1",SETDISPLAYDPI:this.displayDpi_,SETDISPLAYWIDTH:Math.round(r[0]),SETDISPLAYHEIGHT:Math.round(r[1]),SETVIEWSCALE:o,SETVIEWCENTERX:s[0],SETVIEWCENTERY:s[1]};return Object(ht.a)(a,e),Rt(t,a)},e.prototype.setImageLoadFunction=function(t){this.image_=null,this.imageLoadFunction_=t,this.changed()},e}(Tt),Lt=function(t){function e(e){var i=void 0!==e.crossOrigin?e.crossOrigin:null,r=void 0!==e.imageLoadFunction?e.imageLoadFunction:Et;t.call(this,{attributions:e.attributions,projection:Object(m.d)(e.projection)}),this.url_=e.url,this.imageExtent_=e.imageExtent,this.image_=new St(this.imageExtent_,void 0,1,this.url_,i,r),this.imageSize_=e.imageSize?e.imageSize:null,Object(S.a)(this.image_,j.a.CHANGE,this.handleImageChange,this)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getImageExtent=function(){return this.imageExtent_},e.prototype.getImageInternal=function(t,e,i,r){return Object(f.F)(t,this.image_.getExtent())?this.image_:null},e.prototype.getUrl=function(){return this.url_},e.prototype.handleImageChange=function(e){if(this.image_.getState()==mt.a.LOADED){var i,r,n=this.image_.getExtent(),o=this.image_.getImage();this.imageSize_?(i=this.imageSize_[0],r=this.imageSize_[1]):(i=o.width,r=o.height);var s=Object(f.A)(n)/r,a=Math.ceil(Object(f.E)(n)/s);if(a!=i){var h=Object(T.a)(a,r),c=h.canvas;h.drawImage(o,0,0,i,r,0,0,c.width,c.height),this.image_.setImage(c)}}t.prototype.handleImageChange.call(this,e)},e}(Tt),At="1.3.0",Pt="carmentaserver",Mt="geoserver",Gt="mapserver",Dt="qgis",Xt=i(51),kt=[101,101],Nt=function(t){function e(e){var i=e||{};t.call(this,{attributions:i.attributions,projection:i.projection,resolutions:i.resolutions}),this.crossOrigin_=void 0!==i.crossOrigin?i.crossOrigin:null,this.url_=i.url,this.imageLoadFunction_=void 0!==i.imageLoadFunction?i.imageLoadFunction:Et,this.params_=i.params||{},this.v13_=!0,this.updateV13_(),this.serverType_=i.serverType,this.hidpi_=void 0===i.hidpi||i.hidpi,this.image_=null,this.imageSize_=[0,0],this.renderedRevision_=0,this.ratio_=void 0!==i.ratio?i.ratio:1.5}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getGetFeatureInfoUrl=function(t,e,i,r){if(void 0!==this.url_){var n=Object(m.d)(i),o=this.getProjection();o&&o!==n&&(e=F(o,n,t,e),t=Object(m.i)(t,n,o));var s=Object(f.z)(t,e,0,kt),a={SERVICE:"WMS",VERSION:At,REQUEST:"GetFeatureInfo",FORMAT:"image/png",TRANSPARENT:!0,QUERY_LAYERS:this.params_.LAYERS};Object(ht.a)(a,this.params_,r);var h=Math.floor((t[0]-s[0])/e),c=Math.floor((s[3]-t[1])/e);return a[this.v13_?"I":"X"]=h,a[this.v13_?"J":"Y"]=c,this.getRequestUrl_(s,kt,1,o||n,a)}},e.prototype.getParams=function(){return this.params_},e.prototype.getImageInternal=function(t,e,i,r){if(void 0===this.url_)return null;e=this.findNearestResolution(e),1==i||this.hidpi_&&void 0!==this.serverType_||(i=1);var n=e/i,o=Object(f.x)(t),s=Math.ceil(Object(f.E)(t)/n),a=Math.ceil(Object(f.A)(t)/n),h=Object(f.z)(o,n,0,[s,a]),c=Math.ceil(this.ratio_*Object(f.E)(t)/n),u=Math.ceil(this.ratio_*Object(f.A)(t)/n),l=Object(f.z)(o,n,0,[c,u]),p=this.image_;if(p&&this.renderedRevision_==this.getRevision()&&p.getResolution()==e&&p.getPixelRatio()==i&&Object(f.g)(p.getExtent(),h))return p;var d={SERVICE:"WMS",VERSION:At,REQUEST:"GetMap",FORMAT:"image/png",TRANSPARENT:!0};Object(ht.a)(d,this.params_),this.imageSize_[0]=Math.round(Object(f.E)(l)/n),this.imageSize_[1]=Math.round(Object(f.A)(l)/n);var _=this.getRequestUrl_(l,this.imageSize_,i,r,d);return this.image_=new St(l,e,i,_,this.crossOrigin_,this.imageLoadFunction_),this.renderedRevision_=this.getRevision(),Object(S.a)(this.image_,j.a.CHANGE,this.handleImageChange,this),this.image_},e.prototype.getImageLoadFunction=function(){return this.imageLoadFunction_},e.prototype.getRequestUrl_=function(t,e,i,n,o){if(Object(r.a)(void 0!==this.url_,9),o[this.v13_?"CRS":"SRS"]=n.getCode(),"STYLES"in this.params_||(o.STYLES=""),1!=i)switch(this.serverType_){case Mt:var s=90*i+.5|0;"FORMAT_OPTIONS"in o?o.FORMAT_OPTIONS+=";dpi:"+s:o.FORMAT_OPTIONS="dpi:"+s;break;case Gt:o.MAP_RESOLUTION=90*i;break;case Pt:case Dt:o.DPI=90*i;break;default:Object(r.a)(!1,8)}o.WIDTH=e[0],o.HEIGHT=e[1];var a,h=n.getAxisOrientation();return a=this.v13_&&"ne"==h.substr(0,2)?[t[1],t[0],t[3],t[2]]:t,o.BBOX=a.join(","),Rt(this.url_,o)},e.prototype.getUrl=function(){return this.url_},e.prototype.setImageLoadFunction=function(t){this.image_=null,this.imageLoadFunction_=t,this.changed()},e.prototype.setUrl=function(t){t!=this.url_&&(this.url_=t,this.image_=null,this.changed())},e.prototype.updateParams=function(t){Object(ht.a)(this.params_,t),this.updateV13_(),this.image_=null,this.changed()},e.prototype.updateV13_=function(){var t=this.params_.VERSION||At;this.v13_=Object(Xt.a)(t,"1.3")>=0},e}(Tt),zt='&#169; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors.',Yt=function(t){function e(e){var i,r=e||{};i=void 0!==r.attributions?r.attributions:[zt];var n=void 0!==r.crossOrigin?r.crossOrigin:"anonymous",o=void 0!==r.url?r.url:"https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png";t.call(this,{attributions:i,cacheSize:r.cacheSize,crossOrigin:n,opaque:void 0===r.opaque||r.opaque,maxZoom:void 0!==r.maxZoom?r.maxZoom:19,reprojectionErrorThreshold:r.reprojectionErrorThreshold,tileLoadFunction:r.tileLoadFunction,url:o,wrapX:r.wrapX,attributionsCollapsible:!1})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(ct),Ut=i(104),Kt=i(112),qt=i(29),Wt=i(105),Zt=i(106),Bt=i(101),Ht=i(91),Jt=i(17),Vt="beforeoperations",Qt="afteroperations",$t={PIXEL:"pixel",IMAGE:"image"},te=function(t){function e(e,i,r){t.call(this,e),this.extent=i.extent,this.resolution=i.viewState.resolution/i.pixelRatio,this.data=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(G.a),ee=null;function ie(t,e,i){if(!t.prepareFrame(e,i))return null;var r=e.size[0],n=e.size[1];if(ee){var o=ee.canvas;o.width!==r||o.height!==n?ee=Object(T.a)(r,n):ee.clearRect(0,0,r,n)}else ee=Object(T.a)(r,n);return t.composeFrame(e,i,ee),ee.getImageData(0,0,r,n)}function re(t){var e=t,i=t,r=t,n=null;return"function"==typeof e.getTile?n=function(t){var e=new Zt.a({source:t});return new Ht.a(e)}(e):"function"==typeof i.getImage?n=function(t){var e=new Wt.a({source:t});return new Bt.a(e)}(i):r.getType()===qt.a.TILE?n=new Ht.a(r):r.getType()!=qt.a.IMAGE&&r.getType()!=qt.a.VECTOR||(n=new Bt.a(r)),n}var ne=function(t){function e(e){t.call(this,{projection:null}),this.worker_=null,this.operationType_=void 0!==e.operationType?e.operationType:$t.PIXEL,this.threads_=void 0!==e.threads?e.threads:1,this.renderers_=function(t){for(var e=t.length,i=new Array(e),r=0;r<e;++r)i[r]=re(t[r]);return i}(e.sources);for(var i=0,r=this.renderers_.length;i<r;++i)Object(S.a)(this.renderers_[i],j.a.CHANGE,this.changed,this);this.tileQueue_=new Ut.a(function(){return 1},this.changed.bind(this));for(var n=this.renderers_.map(function(t){return t.getLayer().getLayerState()}),o={},s=0,a=n.length;s<a;++s)o[Object(_.c)(n[s].layer)]=n[s];this.requestedFrameState_,this.renderedImageCanvas_=null,this.renderedRevision_,this.frameState_={animate:!1,coordinateToPixelTransform:Object(Jt.c)(),extent:null,focus:null,index:0,layerStates:o,layerStatesArray:n,pixelRatio:1,pixelToCoordinateTransform:Object(Jt.c)(),postRenderFunctions:[],size:[0,0],skippedFeatureUids:{},tileQueue:this.tileQueue_,time:Date.now(),usedTiles:{},viewState:{rotation:0},viewHints:[],wantedTiles:{}},void 0!==e.operation&&this.setOperation(e.operation,e.lib)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setOperation=function(t,e){this.worker_=new Kt.Processor({operation:t,imageOps:this.operationType_===$t.IMAGE,queue:1,lib:e,threads:this.threads_}),this.changed()},e.prototype.updateFrameState_=function(t,e,i){var r=Object(ht.a)({},this.frameState_);r.viewState=Object(ht.a)({},r.viewState);var n=Object(f.x)(t);r.extent=t.slice(),r.focus=n,r.size[0]=Math.round(Object(f.E)(t)/e),r.size[1]=Math.round(Object(f.A)(t)/e),r.time=Date.now(),r.animate=!1;var o=r.viewState;return o.center=n,o.projection=i,o.resolution=e,r},e.prototype.allSourcesReady_=function(){for(var t=!0,e=0,i=this.renderers_.length;e<i;++e)if(this.renderers_[e].getLayer().getSource().getState()!==y.a.READY){t=!1;break}return t},e.prototype.getImage=function(t,e,i,r){if(!this.allSourcesReady_())return null;var n=this.updateFrameState_(t,e,r);if(this.requestedFrameState_=n,this.renderedImageCanvas_){var o=this.renderedImageCanvas_.getResolution(),s=this.renderedImageCanvas_.getExtent();e===o&&Object(f.p)(t,s)||(this.renderedImageCanvas_=null)}return this.renderedImageCanvas_&&this.getRevision()===this.renderedRevision_||this.processSources_(),n.tileQueue.loadMoreTiles(16,16),n.animate&&requestAnimationFrame(this.changed.bind(this)),this.renderedImageCanvas_},e.prototype.processSources_=function(){for(var t=this.requestedFrameState_,e=this.renderers_.length,i=new Array(e),r=0;r<e;++r){var n=ie(this.renderers_[r],t,t.layerStatesArray[r]);if(!n)return;i[r]=n}var o={};this.dispatchEvent(new te(Vt,t,o)),this.worker_.process(i,o,this.onWorkerComplete_.bind(this,t))},e.prototype.onWorkerComplete_=function(t,e,i,r){if(!e&&i){var n=t.extent,o=t.viewState.resolution;if(o===this.requestedFrameState_.viewState.resolution&&Object(f.p)(n,this.requestedFrameState_.extent)){var s;if(this.renderedImageCanvas_)s=this.renderedImageCanvas_.getImage().getContext("2d");else{var a=Math.round(Object(f.E)(n)/o),h=Math.round(Object(f.A)(n)/o);s=Object(T.a)(a,h),this.renderedImageCanvas_=new It.a(n,o,1,s.canvas)}s.putImageData(i,0,0),this.changed(),this.renderedRevision_=this.getRevision(),this.dispatchEvent(new te(Qt,t,r))}}},e.prototype.getImageInternal=function(){return null},e}(Tt),oe=['Map tiles by <a href="https://stamen.com/">Stamen Design</a>, under <a href="https://creativecommons.org/licenses/by/3.0/">CC BY 3.0</a>.',zt],se={terrain:{extension:"jpg",opaque:!0},"terrain-background":{extension:"jpg",opaque:!0},"terrain-labels":{extension:"png",opaque:!1},"terrain-lines":{extension:"png",opaque:!1},"toner-background":{extension:"png",opaque:!0},toner:{extension:"png",opaque:!0},"toner-hybrid":{extension:"png",opaque:!1},"toner-labels":{extension:"png",opaque:!1},"toner-lines":{extension:"png",opaque:!1},"toner-lite":{extension:"png",opaque:!0},watercolor:{extension:"jpg",opaque:!0}},ae={terrain:{minZoom:4,maxZoom:18},toner:{minZoom:0,maxZoom:20},watercolor:{minZoom:1,maxZoom:16}},he=function(t){function e(e){var i=e.layer.indexOf("-"),r=-1==i?e.layer:e.layer.slice(0,i),n=ae[r],o=se[e.layer],s=void 0!==e.url?e.url:"https://stamen-tiles-{a-d}.a.ssl.fastly.net/"+e.layer+"/{z}/{x}/{y}."+o.extension;t.call(this,{attributions:oe,cacheSize:e.cacheSize,crossOrigin:"anonymous",maxZoom:null!=e.maxZoom?e.maxZoom:n.maxZoom,minZoom:null!=e.minZoom?e.minZoom:n.minZoom,opaque:o.opaque,reprojectionErrorThreshold:e.reprojectionErrorThreshold,tileLoadFunction:e.tileLoadFunction,url:s,wrapX:e.wrapX})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(ct);function ce(t,e,i){var r=this.getTileGrid();if(r||(r=this.getTileGridForProjection(i)),!(r.getResolutions().length<=t[0])){var n=r.getTileCoordExtent(t,this.tmpExtent_),o=Object(D.d)(r.getTileSize(t[0]),this.tmpSize);1!=e&&(o=Object(D.c)(o,e,this.tmpSize));var s={F:"image",FORMAT:"PNG32",TRANSPARENT:!0};return Object(ht.a)(s,this.params_),this.getRequestUrl_(t,o,n,e,i,s)}}var ue=function(t){function e(e){var i=e||{};t.call(this,{attributions:i.attributions,cacheSize:i.cacheSize,crossOrigin:i.crossOrigin,projection:i.projection,reprojectionErrorThreshold:i.reprojectionErrorThreshold,tileGrid:i.tileGrid,tileLoadFunction:i.tileLoadFunction,tileUrlFunction:ce,url:i.url,urls:i.urls,wrapX:void 0===i.wrapX||i.wrapX,transition:i.transition}),this.params_=i.params||{},this.tmpExtent_=Object(f.j)(),this.setKey(this.getKeyForParams_())}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getKeyForParams_=function(){var t=0,e=[];for(var i in this.params_)e[t++]=i+"-"+this.params_[i];return e.join("/")},e.prototype.getParams=function(){return this.params_},e.prototype.getRequestUrl_=function(t,e,i,r,o,s){var a=this.urls;if(a){var c,u=o.getCode().split(":").pop();if(s.SIZE=e[0]+","+e[1],s.BBOX=i.join(","),s.BBOXSR=u,s.IMAGESR=u,s.DPI=Math.round(s.DPI?s.DPI*r:90*r),1==a.length)c=a[0];else c=a[Object(n.d)(h(t),a.length)];return Rt(c.replace(/MapServer\/?$/,"MapServer/export").replace(/ImageServer\/?$/,"ImageServer/exportImage"),s)}},e.prototype.getTilePixelRatio=function(t){return t},e.prototype.updateParams=function(t){Object(ht.a)(this.params_,t),this.setKey(this.getKeyForParams_())},e}(st),le=function(t){function e(e,i,r){t.call(this,e,b.a.LOADED),this.tileSize_=i,this.text_=r,this.canvas_=null}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getImage=function(){if(this.canvas_)return this.canvas_;var t=this.tileSize_,e=Object(T.a)(t[0],t[1]);return e.strokeStyle="black",e.strokeRect(.5,.5,t[0]+.5,t[1]+.5),e.fillStyle="black",e.textAlign="center",e.textBaseline="middle",e.font="24px sans-serif",e.fillText(this.text_,t[0]/2,t[1]/2),this.canvas_=e.canvas,e.canvas},e.prototype.load=function(){},e}(E),pe=function(t){function e(e){t.call(this,{opaque:!1,projection:e.projection,tileGrid:e.tileGrid,wrapX:void 0===e.wrapX||e.wrapX})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getTile=function(t,e,i){var r=s(t,e,i);if(this.tileCache.containsKey(r))return this.tileCache.get(r);var n=Object(D.d)(this.tileGrid.getTileSize(t)),o=[t,e,i],a=this.getTileCoordForTileUrlFunction(o),h=a?this.getTileCoordForTileUrlFunction(a).toString():"",c=new le(o,n,h);return this.tileCache.set(r,c),c},e}(tt),de=function(t){function e(e){if(t.call(this,{attributions:e.attributions,cacheSize:e.cacheSize,crossOrigin:e.crossOrigin,projection:Object(m.d)("EPSG:3857"),reprojectionErrorThreshold:e.reprojectionErrorThreshold,state:y.a.LOADING,tileLoadFunction:e.tileLoadFunction,wrapX:void 0===e.wrapX||e.wrapX,transition:e.transition}),this.tileJSON_=null,e.url)if(e.jsonp)g(e.url,this.handleTileJSONResponse.bind(this),this.handleTileJSONError.bind(this));else{var i=new XMLHttpRequest;i.addEventListener("load",this.onXHRLoad_.bind(this)),i.addEventListener("error",this.onXHRError_.bind(this)),i.open("GET",e.url),i.send()}else e.tileJSON?this.handleTileJSONResponse(e.tileJSON):Object(r.a)(!1,51)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.onXHRLoad_=function(t){var e=t.target;if(!e.status||e.status>=200&&e.status<300){var i;try{i=JSON.parse(e.responseText)}catch(t){return void this.handleTileJSONError()}this.handleTileJSONResponse(i)}else this.handleTileJSONError()},e.prototype.onXHRError_=function(t){this.handleTileJSONError()},e.prototype.getTileJSON=function(){return this.tileJSON_},e.prototype.handleTileJSONResponse=function(t){var e,i=Object(m.d)("EPSG:4326"),r=this.getProjection();if(void 0!==t.bounds){var n=Object(m.g)(i,r);e=Object(f.a)(t.bounds,n)}var o=t.minzoom||0,s=t.maxzoom||22,a=B({extent:V(r),maxZoom:s,minZoom:o});if(this.tileGrid=a,this.tileUrlFunction=u(t.tiles,a),void 0!==t.attribution&&!this.getAttributions()){var h=void 0!==e?e:i.getExtent();this.setAttributions(function(e){return Object(f.F)(h,e.extent)?[t.attribution]:null})}this.tileJSON_=t,this.setState(y.a.READY)},e.prototype.handleTileJSONError=function(){this.setState(y.a.ERROR)},e}(st);function fe(t,e,i){var r=this.getTileGrid();if(r||(r=this.getTileGridForProjection(i)),!(r.getResolutions().length<=t[0])){1==e||this.hidpi_&&void 0!==this.serverType_||(e=1);var n=r.getResolution(t[0]),o=r.getTileCoordExtent(t,this.tmpExtent_),s=Object(D.d)(r.getTileSize(t[0]),this.tmpSize),a=this.gutter_;0!==a&&(s=Object(D.a)(s,a,this.tmpSize),o=Object(f.c)(o,n*a,o)),1!=e&&(s=Object(D.c)(s,e,this.tmpSize));var h={SERVICE:"WMS",VERSION:At,REQUEST:"GetMap",FORMAT:"image/png",TRANSPARENT:!0};return Object(ht.a)(h,this.params_),this.getRequestUrl_(t,s,o,e,i,h)}}var _e=function(t){function e(e){var i=e||{},r=i.params||{},n=!("TRANSPARENT"in r)||r.TRANSPARENT;t.call(this,{attributions:i.attributions,cacheSize:i.cacheSize,crossOrigin:i.crossOrigin,opaque:!n,projection:i.projection,reprojectionErrorThreshold:i.reprojectionErrorThreshold,tileClass:i.tileClass,tileGrid:i.tileGrid,tileLoadFunction:i.tileLoadFunction,tileUrlFunction:fe,url:i.url,urls:i.urls,wrapX:void 0===i.wrapX||i.wrapX,transition:i.transition}),this.gutter_=void 0!==i.gutter?i.gutter:0,this.params_=r,this.v13_=!0,this.serverType_=i.serverType,this.hidpi_=void 0===i.hidpi||i.hidpi,this.tmpExtent_=Object(f.j)(),this.updateV13_(),this.setKey(this.getKeyForParams_())}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getGetFeatureInfoUrl=function(t,e,i,r){var n=Object(m.d)(i),o=this.getProjection(),s=this.getTileGrid();s||(s=this.getTileGridForProjection(n));var a=s.getTileCoordForCoordAndResolution(t,e);if(!(s.getResolutions().length<=a[0])){var h=s.getResolution(a[0]),c=s.getTileCoordExtent(a,this.tmpExtent_),u=Object(D.d)(s.getTileSize(a[0]),this.tmpSize),l=this.gutter_;0!==l&&(u=Object(D.a)(u,l,this.tmpSize),c=Object(f.c)(c,h*l,c)),o&&o!==n&&(h=F(o,n,t,h),c=Object(m.j)(c,n,o),t=Object(m.i)(t,n,o));var p={SERVICE:"WMS",VERSION:At,REQUEST:"GetFeatureInfo",FORMAT:"image/png",TRANSPARENT:!0,QUERY_LAYERS:this.params_.LAYERS};Object(ht.a)(p,this.params_,r);var d=Math.floor((t[0]-c[0])/h),_=Math.floor((c[3]-t[1])/h);return p[this.v13_?"I":"X"]=d,p[this.v13_?"J":"Y"]=_,this.getRequestUrl_(a,u,c,1,o||n,p)}},e.prototype.getGutter=function(){return this.gutter_},e.prototype.getParams=function(){return this.params_},e.prototype.getRequestUrl_=function(t,e,i,o,s,a){var c=this.urls;if(c){if(a.WIDTH=e[0],a.HEIGHT=e[1],a[this.v13_?"CRS":"SRS"]=s.getCode(),"STYLES"in this.params_||(a.STYLES=""),1!=o)switch(this.serverType_){case Mt:var u=90*o+.5|0;"FORMAT_OPTIONS"in a?a.FORMAT_OPTIONS+=";dpi:"+u:a.FORMAT_OPTIONS="dpi:"+u;break;case Gt:a.MAP_RESOLUTION=90*o;break;case Pt:case Dt:a.DPI=90*o;break;default:Object(r.a)(!1,52)}var l,p,d=s.getAxisOrientation(),f=i;if(this.v13_&&"ne"==d.substr(0,2))l=i[0],f[0]=i[1],f[1]=l,l=i[2],f[2]=i[3],f[3]=l;if(a.BBOX=f.join(","),1==c.length)p=c[0];else p=c[Object(n.d)(h(t),c.length)];return Rt(p,a)}},e.prototype.getTilePixelRatio=function(t){return this.hidpi_&&void 0!==this.serverType_?t:1},e.prototype.getKeyForParams_=function(){var t=0,e=[];for(var i in this.params_)e[t++]=i+"-"+this.params_[i];return e.join("/")},e.prototype.updateParams=function(t){Object(ht.a)(this.params_,t),this.updateV13_(),this.setKey(this.getKeyForParams_())},e.prototype.updateV13_=function(){var t=this.params_.VERSION||At;this.v13_=Object(Xt.a)(t,"1.3")>=0},e}(st),ge=function(t){function e(e,i,r,n,o,s){t.call(this,e,i),this.src_=r,this.extent_=n,this.preemptive_=o,this.grid_=null,this.keys_=null,this.data_=null,this.jsonp_=s}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getImage=function(){return null},e.prototype.getData=function(t){if(!this.grid_||!this.keys_)return null;var e=(t[0]-this.extent_[0])/(this.extent_[2]-this.extent_[0]),i=(t[1]-this.extent_[1])/(this.extent_[3]-this.extent_[1]),r=this.grid_[Math.floor((1-i)*this.grid_.length)];if("string"!=typeof r)return null;var n=r.charCodeAt(Math.floor(e*r.length));n>=93&&n--,n>=35&&n--;var o=null;if((n-=32)in this.keys_){var s=this.keys_[n];o=this.data_&&s in this.data_?this.data_[s]:s}return o},e.prototype.forDataAtCoordinate=function(t,e,i,r){this.state==b.a.IDLE&&!0===r?(Object(S.b)(this,j.a.CHANGE,function(r){e.call(i,this.getData(t))},this),this.loadInternal_()):!0===r?setTimeout(function(){e.call(i,this.getData(t))}.bind(this),0):e.call(i,this.getData(t))},e.prototype.getKey=function(){return this.src_},e.prototype.handleError_=function(){this.state=b.a.ERROR,this.changed()},e.prototype.handleLoad_=function(t){this.grid_=t.grid,this.keys_=t.keys,this.data_=t.data,this.state=b.a.EMPTY,this.changed()},e.prototype.loadInternal_=function(){if(this.state==b.a.IDLE)if(this.state=b.a.LOADING,this.jsonp_)g(this.src_,this.handleLoad_.bind(this),this.handleError_.bind(this));else{var t=new XMLHttpRequest;t.addEventListener("load",this.onXHRLoad_.bind(this)),t.addEventListener("error",this.onXHRError_.bind(this)),t.open("GET",this.src_),t.send()}},e.prototype.onXHRLoad_=function(t){var e=t.target;if(!e.status||e.status>=200&&e.status<300){var i;try{i=JSON.parse(e.responseText)}catch(t){return void this.handleError_()}this.handleLoad_(i)}else this.handleError_()},e.prototype.onXHRError_=function(t){this.handleError_()},e.prototype.load=function(){this.preemptive_&&this.loadInternal_()},e}(E),me=function(t){function e(e){if(t.call(this,{projection:Object(m.d)("EPSG:3857"),state:y.a.LOADING}),this.preemptive_=void 0===e.preemptive||e.preemptive,this.tileUrlFunction_=p,this.template_=void 0,this.jsonp_=e.jsonp||!1,e.url)if(this.jsonp_)g(e.url,this.handleTileJSONResponse.bind(this),this.handleTileJSONError.bind(this));else{var i=new XMLHttpRequest;i.addEventListener("load",this.onXHRLoad_.bind(this)),i.addEventListener("error",this.onXHRError_.bind(this)),i.open("GET",e.url),i.send()}else e.tileJSON?this.handleTileJSONResponse(e.tileJSON):Object(r.a)(!1,51)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.onXHRLoad_=function(t){var e=t.target;if(!e.status||e.status>=200&&e.status<300){var i;try{i=JSON.parse(e.responseText)}catch(t){return void this.handleTileJSONError()}this.handleTileJSONResponse(i)}else this.handleTileJSONError()},e.prototype.onXHRError_=function(t){this.handleTileJSONError()},e.prototype.getTemplate=function(){return this.template_},e.prototype.forDataAtCoordinateAndResolution=function(t,e,i,r){if(this.tileGrid){var n=this.tileGrid.getTileCoordForCoordAndResolution(t,e);this.getTile(n[0],n[1],n[2],1,this.getProjection()).forDataAtCoordinate(t,i,null,r)}else!0===r?setTimeout(function(){i(null)},0):i(null)},e.prototype.handleTileJSONError=function(){this.setState(y.a.ERROR)},e.prototype.handleTileJSONResponse=function(t){var e,i=Object(m.d)("EPSG:4326"),r=this.getProjection();if(void 0!==t.bounds){var n=Object(m.g)(i,r);e=Object(f.a)(t.bounds,n)}var o=t.minzoom||0,s=t.maxzoom||22,a=B({extent:V(r),maxZoom:s,minZoom:o});this.tileGrid=a,this.template_=t.template;var h=t.grids;if(h){if(this.tileUrlFunction_=u(h,a),void 0!==t.attribution){var c=void 0!==e?e:i.getExtent();this.setAttributions(function(e){return Object(f.F)(c,e.extent)?[t.attribution]:null})}this.setState(y.a.READY)}else this.setState(y.a.ERROR)},e.prototype.getTile=function(t,e,i,r,n){var o=s(t,e,i);if(this.tileCache.containsKey(o))return this.tileCache.get(o);var a=[t,e,i],h=this.getTileCoordForTileUrlFunction(a,n),c=this.tileUrlFunction_(h,r,n),u=new ge(a,void 0!==c?b.a.IDLE:b.a.EMPTY,void 0!==c?c:"",this.tileGrid.getTileCoordExtent(a),this.preemptive_,this.jsonp_);return this.tileCache.set(o,u),u},e.prototype.useTile=function(t,e,i){var r=s(t,e,i);this.tileCache.containsKey(r)&&this.tileCache.get(r)},e}(tt),ye=i(72),ve=i(8),be=function(t){function e(i,r,n,o,s,a,h,c,u,l,p,d,_,g,m){if(t.call(this,i,r,{transition:0}),this.context_={},this.loader_,this.replayState_={},this.sourceTiles_=l,this.tileKeys=[],this.extent=null,this.sourceRevision_=n,this.wrappedTileCoord=a,this.loadListenerKeys_=[],this.sourceTileListenerKeys_=[],a){var y=this.extent=u.getTileCoordExtent(a),v=u.getResolution(m),O=c.getZForResolution(v),x=m!=i[0],E=0;if(c.forEachTileCoord(y,O,function(t){var e=Object(f.B)(y,c.getTileCoordExtent(t)),i=c.getExtent();if(i&&(e=Object(f.B)(e,i,e)),Object(f.E)(e)/v>=.5&&Object(f.A)(e)/v>=.5){++E;var r=t.toString(),n=l[r];if(!n&&!x){var a=h(t,p,d);n=l[r]=new _(t,null==a?b.a.EMPTY:b.a.IDLE,null==a?"":a,o,s),this.sourceTileListenerKeys_.push(Object(S.a)(n,j.a.CHANGE,g))}!n||x&&n.getState()!=b.a.LOADED||(n.consumers++,this.tileKeys.push(r))}}.bind(this)),x&&E==this.tileKeys.length&&this.finishLoading_(),m<=i[0]&&this.state!=b.a.LOADED)for(;m>u.getMinZoom();){var T=new e(i,r,n,o,s,a,h,c,u,l,p,d,_,ve.c,--m);if(T.state==b.a.LOADED){this.interimTile=T;break}}}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.disposeInternal=function(){this.state=b.a.ABORT,this.changed(),this.interimTile&&this.interimTile.dispose();for(var e=0,i=this.tileKeys.length;e<i;++e){var r=this.tileKeys[e],n=this.getTile(r);n.consumers--,0==n.consumers&&(delete this.sourceTiles_[r],n.dispose())}this.tileKeys.length=0,this.sourceTiles_=null,this.loadListenerKeys_.forEach(S.e),this.loadListenerKeys_.length=0,this.sourceTileListenerKeys_.forEach(S.e),this.sourceTileListenerKeys_.length=0,t.prototype.disposeInternal.call(this)},e.prototype.getContext=function(t){var e=Object(_.c)(t);return e in this.context_||(this.context_[e]=Object(T.a)()),this.context_[e]},e.prototype.getImage=function(t){return-1==this.getReplayState(t).renderedTileRevision?null:this.getContext(t).canvas},e.prototype.getReplayState=function(t){var e=Object(_.c)(t);return e in this.replayState_||(this.replayState_[e]={dirty:!1,renderedRenderOrder:null,renderedRevision:-1,renderedTileRevision:-1}),this.replayState_[e]},e.prototype.getKey=function(){return this.tileKeys.join("/")+"-"+this.sourceRevision_},e.prototype.getTile=function(t){return this.sourceTiles_[t]},e.prototype.load=function(){var t=0,e={};this.state==b.a.IDLE&&this.setState(b.a.LOADING),this.state==b.a.LOADING&&this.tileKeys.forEach(function(i){var r=this.getTile(i);if(r.state==b.a.IDLE&&(r.setLoader(this.loader_),r.load()),r.state==b.a.LOADING){var n=Object(S.a)(r,j.a.CHANGE,function(i){var n=r.getState();if(n==b.a.LOADED||n==b.a.ERROR){var o=Object(_.c)(r);n==b.a.ERROR?e[o]=!0:(--t,delete e[o]),t-Object.keys(e).length==0&&this.finishLoading_()}}.bind(this));this.loadListenerKeys_.push(n),++t}}.bind(this)),t-Object.keys(e).length==0&&setTimeout(this.finishLoading_.bind(this),0)},e.prototype.finishLoading_=function(){for(var t=this.tileKeys.length,e=0,i=t-1;i>=0;--i){var r=this.getTile(this.tileKeys[i]).getState();r!=b.a.LOADED&&--t,r==b.a.EMPTY&&++e}t==this.tileKeys.length?(this.loadListenerKeys_.forEach(S.e),this.loadListenerKeys_.length=0,this.setState(b.a.LOADED)):this.setState(e==this.tileKeys.length?b.a.EMPTY:b.a.ERROR)},e}(E);function Oe(t,e){var i=Object(ye.a)(e,t.getFormat(),t.onLoad.bind(t),t.onError.bind(t));t.setLoader(i)}var xe=[0,0,4096,4096],je=function(t){function e(e,i,r,n,o,s){t.call(this,e,i,s),this.consumers=0,this.extent_=null,this.format_=n,this.features_=null,this.loader_,this.projection_=null,this.replayGroups_={},this.tileLoadFunction_=o,this.url_=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.disposeInternal=function(){this.features_=null,this.replayGroups_={},this.state=b.a.ABORT,this.changed(),t.prototype.disposeInternal.call(this)},e.prototype.getExtent=function(){return this.extent_||xe},e.prototype.getFormat=function(){return this.format_},e.prototype.getFeatures=function(){return this.features_},e.prototype.getKey=function(){return this.url_},e.prototype.getProjection=function(){return this.projection_},e.prototype.getReplayGroup=function(t,e){return this.replayGroups_[Object(_.c)(t)+","+e]},e.prototype.load=function(){this.state==b.a.IDLE&&(this.setState(b.a.LOADING),this.tileLoadFunction_(this,this.url_),this.loader_(null,NaN,null))},e.prototype.onLoad=function(t,e,i){this.setProjection(e),this.setFeatures(t),this.setExtent(i)},e.prototype.onError=function(){this.setState(b.a.ERROR)},e.prototype.setExtent=function(t){this.extent_=t},e.prototype.setFeatures=function(t){this.features_=t,this.setState(b.a.LOADED)},e.prototype.setProjection=function(t){this.projection_=t},e.prototype.setReplayGroup=function(t,e,i){this.replayGroups_[Object(_.c)(t)+","+e]=i},e.prototype.setLoader=function(t){this.loader_=t},e}(E),Ee=function(t){function e(e){var i=e.projection||"EPSG:3857",r=e.extent||V(i),n=e.tileGrid||B({extent:r,maxZoom:e.maxZoom||22,minZoom:e.minZoom,tileSize:e.tileSize||512});t.call(this,{attributions:e.attributions,cacheSize:void 0!==e.cacheSize?e.cacheSize:128,opaque:!1,projection:i,state:e.state,tileGrid:n,tileLoadFunction:e.tileLoadFunction?e.tileLoadFunction:Oe,tileUrlFunction:e.tileUrlFunction,url:e.url,urls:e.urls,wrapX:void 0===e.wrapX||e.wrapX,transition:e.transition}),this.format_=e.format?e.format:null,this.sourceTiles_={},this.overlaps_=null==e.overlaps||e.overlaps,this.tileClass=e.tileClass?e.tileClass:je,this.tileGrids_={}}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getOverlaps=function(){return this.overlaps_},e.prototype.clear=function(){this.tileCache.clear(),this.sourceTiles_={}},e.prototype.getTile=function(t,e,i,r,n){var o=s(t,e,i);if(this.tileCache.containsKey(o))return this.tileCache.get(o);var a=[t,e,i],h=this.getTileCoordForTileUrlFunction(a,n),c=new be(a,null!==h?b.a.IDLE:b.a.EMPTY,this.getRevision(),this.format_,this.tileLoadFunction,h,this.tileUrlFunction,this.tileGrid,this.getTileGridForProjection(n),this.sourceTiles_,r,n,this.tileClass,this.handleTileChange.bind(this),a[0]);return this.tileCache.set(o,c),c},e.prototype.getTileGridForProjection=function(t){var e=t.getCode(),i=this.tileGrids_[e];if(!i){var r=this.tileGrid;i=this.tileGrids_[e]=J(t,void 0,r?r.getTileSize(r.getMinZoom()):void 0)}return i},e.prototype.getTilePixelRatio=function(t){return t},e.prototype.getTilePixelSize=function(t,e,i){var r=this.getTileGridForProjection(i),n=Object(D.d)(r.getTileSize(t),this.tmpSize);return[Math.round(n[0]*e),Math.round(n[1]*e)]},e}(nt),Te={KVP:"KVP",REST:"REST"};var Se=function(t){function e(e){var i=void 0!==e.requestEncoding?e.requestEncoding:Te.KVP,r=e.tileGrid,n=e.urls;void 0===n&&void 0!==e.url&&(n=d(e.url)),t.call(this,{attributions:e.attributions,cacheSize:e.cacheSize,crossOrigin:e.crossOrigin,projection:e.projection,reprojectionErrorThreshold:e.reprojectionErrorThreshold,tileClass:e.tileClass,tileGrid:r,tileLoadFunction:e.tileLoadFunction,tilePixelRatio:e.tilePixelRatio,tileUrlFunction:p,urls:n,wrapX:void 0!==e.wrapX&&e.wrapX,transition:e.transition}),this.version_=void 0!==e.version?e.version:"1.0.0",this.format_=void 0!==e.format?e.format:"image/jpeg",this.dimensions_=void 0!==e.dimensions?e.dimensions:{},this.layer_=e.layer,this.matrixSet_=e.matrixSet,this.style_=e.style,this.requestEncoding_=i,this.setKey(this.getKeyForDimensions_()),n&&n.length>0&&(this.tileUrlFunction=l(n.map(Re.bind(this))))}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setUrls=function(t){this.urls=t;var e=t.join("\n");this.setTileUrlFunction(l(t.map(Re.bind(this))),e)},e.prototype.getDimensions=function(){return this.dimensions_},e.prototype.getFormat=function(){return this.format_},e.prototype.getLayer=function(){return this.layer_},e.prototype.getMatrixSet=function(){return this.matrixSet_},e.prototype.getRequestEncoding=function(){return this.requestEncoding_},e.prototype.getStyle=function(){return this.style_},e.prototype.getVersion=function(){return this.version_},e.prototype.getKeyForDimensions_=function(){var t=0,e=[];for(var i in this.dimensions_)e[t++]=i+"-"+this.dimensions_[i];return e.join("/")},e.prototype.updateDimensions=function(t){Object(ht.a)(this.dimensions_,t),this.setKey(this.getKeyForDimensions_())},e}(st);function Re(t){var e=this.requestEncoding_,i={layer:this.layer_,style:this.style_,tilematrixset:this.matrixSet_};e==Te.KVP&&Object(ht.a)(i,{Service:"WMTS",Request:"GetTile",Version:this.version_,Format:this.format_}),t=e==Te.KVP?Rt(t,i):t.replace(/\{(\w+?)\}/g,function(t,e){return e.toLowerCase()in i?i[e.toLowerCase()]:t});var r=this.tileGrid,n=this.dimensions_;return function(i,o,s){if(i){var a={TileMatrix:r.getMatrixId(i[0]),TileCol:i[1],TileRow:-i[2]-1};Object(ht.a)(a,n);var h=t;return h=e==Te.KVP?Rt(h,a):h.replace(/\{(\w+?)\}/g,function(t,e){return a[e]})}}}var Ce={DEFAULT:"default",TRUNCATED:"truncated"},Ie=function(t){function e(e,i,r,n,o,s,a){t.call(this,i,r,n,o,s,a),this.zoomifyImage_=null,this.tileSize_=Object(D.d)(e.getTileSize(i[0]))}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getImage=function(){if(this.zoomifyImage_)return this.zoomifyImage_;var e=t.prototype.getImage.call(this);if(this.state==b.a.LOADED){var i=this.tileSize_;if(e.width==i[0]&&e.height==i[1])return this.zoomifyImage_=e,e;var r=Object(T.a)(i[0],i[1]);return r.drawImage(e,0,0),this.zoomifyImage_=r.canvas,r.canvas}return e},e}(C),Fe=function(t){function e(e){var i=e||{},n=i.size,o=void 0!==i.tierSizeCalculation?i.tierSizeCalculation:Ce.DEFAULT,s=n[0],a=n[1],h=i.extent||[0,-n[1],n[0],0],c=[],u=i.tileSize||k.b,p=u;switch(o){case Ce.DEFAULT:for(;s>p||a>p;)c.push([Math.ceil(s/p),Math.ceil(a/p)]),p+=p;break;case Ce.TRUNCATED:for(var _=s,g=a;_>p||g>p;)c.push([Math.ceil(_/p),Math.ceil(g/p)]),_>>=1,g>>=1;break;default:Object(r.a)(!1,53)}c.push([1,1]),c.reverse();for(var m=[1],y=[0],v=1,b=c.length;v<b;v++)m.push(1<<v),y.push(c[v-1][0]*c[v-1][1]+y[v-1]);m.reverse();var O=new W({tileSize:u,extent:h,origin:Object(f.C)(h),resolutions:m}),x=i.url;x&&-1==x.indexOf("{TileGroup}")&&-1==x.indexOf("{tileIndex}")&&(x+="{TileGroup}/{z}-{x}-{y}.jpg");var j=l(d(x).map(function(t){return function(e,i,r){if(e){var n=e[0],o=e[1],s=-e[2]-1,a=o+s*c[n][0],h=O.getTileSize(n),u=Array.isArray(h)?h[0]:h,l={z:n,x:o,y:s,tileIndex:a,TileGroup:"TileGroup"+((a+y[n])/u|0)};return t.replace(/\{(\w+?)\}/g,function(t,e){return l[e]})}}})),E=Ie.bind(null,O);t.call(this,{attributions:i.attributions,cacheSize:i.cacheSize,crossOrigin:i.crossOrigin,projection:i.projection,reprojectionErrorThreshold:i.reprojectionErrorThreshold,tileClass:E,tileGrid:O,tileUrlFunction:j,transition:i.transition})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(st);i.d(e,"BingMaps",function(){return at}),i.d(e,"CartoDB",function(){return ut}),i.d(e,"Cluster",function(){return gt}),i.d(e,"Image",function(){return Tt}),i.d(e,"ImageArcGISRest",function(){return Ct}),i.d(e,"ImageCanvas",function(){return Ft}),i.d(e,"ImageMapGuide",function(){return wt}),i.d(e,"ImageStatic",function(){return Lt}),i.d(e,"ImageWMS",function(){return Nt}),i.d(e,"OSM",function(){return Yt}),i.d(e,"Raster",function(){return ne}),i.d(e,"Source",function(){return X.a}),i.d(e,"Stamen",function(){return he}),i.d(e,"Tile",function(){return tt}),i.d(e,"TileArcGISRest",function(){return ue}),i.d(e,"TileDebug",function(){return pe}),i.d(e,"TileImage",function(){return st}),i.d(e,"TileJSON",function(){return de}),i.d(e,"TileWMS",function(){return _e}),i.d(e,"UrlTile",function(){return nt}),i.d(e,"UTFGrid",function(){return me}),i.d(e,"Vector",function(){return _t.a}),i.d(e,"VectorTile",function(){return Ee}),i.d(e,"WMTS",function(){return Se}),i.d(e,"XYZ",function(){return ct}),i.d(e,"Zoomify",function(){return Fe})}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,