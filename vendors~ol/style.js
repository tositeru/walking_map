(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{102:function(t,i,e){"use strict";i.a={POINT:"point",LINE:"line"}},118:function(t,i,e){"use strict";e.r(i);var n=e(13),o=function(t,i){this.space_=i,this.emptyBlocks_=[{x:0,y:0,width:t,height:t}],this.entries_={},this.context_=Object(n.a)(t,t),this.canvas_=this.context_.canvas};o.prototype.get=function(t){return this.entries_[t]||null},o.prototype.add=function(t,i,e,n,o){for(var r=0,s=this.emptyBlocks_.length;r<s;++r){var a=this.emptyBlocks_[r];if(a.width>=i+this.space_&&a.height>=e+this.space_){var h={offsetX:a.x+this.space_,offsetY:a.y+this.space_,image:this.canvas_};return this.entries_[t]=h,n.call(o,this.context_,a.x+this.space_,a.y+this.space_),this.split_(r,a,i+this.space_,e+this.space_),h}}return null},o.prototype.split_=function(t,i,e,n){var o,r;i.width-e>i.height-n?(o={x:i.x+e,y:i.y,width:i.width-e,height:i.height},r={x:i.x,y:i.y+n,width:e,height:i.height-n},this.updateBlocks_(t,o,r)):(o={x:i.x+e,y:i.y,width:i.width-e,height:n},r={x:i.x,y:i.y+n,width:i.width,height:i.height-n},this.updateBlocks_(t,o,r))},o.prototype.updateBlocks_=function(t,i,e){var n=[t,1];i.width>0&&i.height>0&&n.push(i),e.width>0&&e.height>0&&n.push(e),this.emptyBlocks_.splice.apply(this.emptyBlocks_,n)};var r=o,s=e(65),a=e(8),h=function(t){var i=t||{};this.currentSize_=void 0!==i.initialSize?i.initialSize:256,this.maxSize_=void 0!==i.maxSize?i.maxSize:void 0!==s.a?s.a:2048,this.space_=void 0!==i.space?i.space:1,this.atlases_=[new r(this.currentSize_,this.space_)],this.currentHitSize_=this.currentSize_,this.hitAtlases_=[new r(this.currentHitSize_,this.space_)]};h.prototype.getInfo=function(t){var i=this.getInfo_(this.atlases_,t);if(!i)return null;var e=this.getInfo_(this.hitAtlases_,t);return this.mergeInfos_(i,e)},h.prototype.getInfo_=function(t,i){for(var e=0,n=t.length;e<n;++e){var o=t[e].get(i);if(o)return o}return null},h.prototype.mergeInfos_=function(t,i){return{offsetX:t.offsetX,offsetY:t.offsetY,image:t.image,hitImage:i.image}},h.prototype.add=function(t,i,e,n,o,r){if(i+this.space_>this.maxSize_||e+this.space_>this.maxSize_)return null;var s=this.add_(!1,t,i,e,n,r);if(!s)return null;var h=void 0!==o?o:a.c,c=this.add_(!0,t,i,e,h,r);return this.mergeInfos_(s,c)},h.prototype.add_=function(t,i,e,n,o,s){var a,h,c,_,g=t?this.hitAtlases_:this.atlases_;for(c=0,_=g.length;c<_;++c){if(h=(a=g[c]).add(i,e,n,o,s))return h;if(!h&&c===_-1){var l=void 0;t?(l=Math.min(2*this.currentHitSize_,this.maxSize_),this.currentHitSize_=l):(l=Math.min(2*this.currentSize_,this.maxSize_),this.currentSize_=l),a=new r(l,this.space_),g.push(a),++_}}return null};var c=h,_=e(99),g=e(85),l=e(95),u=e(82),f=e(74),p=e(100),d=e(98),m=e(35),y=e(102),v=function(t){var i=t||{};this.font_=i.font,this.rotation_=i.rotation,this.rotateWithView_=i.rotateWithView,this.scale_=i.scale,this.text_=i.text,this.textAlign_=i.textAlign,this.textBaseline_=i.textBaseline,this.fill_=void 0!==i.fill?i.fill:new g.a({color:"#333"}),this.maxAngle_=void 0!==i.maxAngle?i.maxAngle:Math.PI/4,this.placement_=void 0!==i.placement?i.placement:y.a.POINT,this.overflow_=!!i.overflow,this.stroke_=void 0!==i.stroke?i.stroke:null,this.offsetX_=void 0!==i.offsetX?i.offsetX:0,this.offsetY_=void 0!==i.offsetY?i.offsetY:0,this.backgroundFill_=i.backgroundFill?i.backgroundFill:null,this.backgroundStroke_=i.backgroundStroke?i.backgroundStroke:null,this.padding_=void 0===i.padding?null:i.padding};v.prototype.clone=function(){return new v({font:this.getFont(),placement:this.getPlacement(),maxAngle:this.getMaxAngle(),overflow:this.getOverflow(),rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),scale:this.getScale(),text:this.getText(),textAlign:this.getTextAlign(),textBaseline:this.getTextBaseline(),fill:this.getFill()?this.getFill().clone():void 0,stroke:this.getStroke()?this.getStroke().clone():void 0,offsetX:this.getOffsetX(),offsetY:this.getOffsetY(),backgroundFill:this.getBackgroundFill()?this.getBackgroundFill().clone():void 0,backgroundStroke:this.getBackgroundStroke()?this.getBackgroundStroke().clone():void 0})},v.prototype.getOverflow=function(){return this.overflow_},v.prototype.getFont=function(){return this.font_},v.prototype.getMaxAngle=function(){return this.maxAngle_},v.prototype.getPlacement=function(){return this.placement_},v.prototype.getOffsetX=function(){return this.offsetX_},v.prototype.getOffsetY=function(){return this.offsetY_},v.prototype.getFill=function(){return this.fill_},v.prototype.getRotateWithView=function(){return this.rotateWithView_},v.prototype.getRotation=function(){return this.rotation_},v.prototype.getScale=function(){return this.scale_},v.prototype.getStroke=function(){return this.stroke_},v.prototype.getText=function(){return this.text_},v.prototype.getTextAlign=function(){return this.textAlign_},v.prototype.getTextBaseline=function(){return this.textBaseline_},v.prototype.getBackgroundFill=function(){return this.backgroundFill_},v.prototype.getBackgroundStroke=function(){return this.backgroundStroke_},v.prototype.getPadding=function(){return this.padding_},v.prototype.setOverflow=function(t){this.overflow_=t},v.prototype.setFont=function(t){this.font_=t},v.prototype.setMaxAngle=function(t){this.maxAngle_=t},v.prototype.setOffsetX=function(t){this.offsetX_=t},v.prototype.setOffsetY=function(t){this.offsetY_=t},v.prototype.setPlacement=function(t){this.placement_=t},v.prototype.setFill=function(t){this.fill_=t},v.prototype.setRotation=function(t){this.rotation_=t},v.prototype.setScale=function(t){this.scale_=t},v.prototype.setStroke=function(t){this.stroke_=t},v.prototype.setText=function(t){this.text_=t},v.prototype.setTextAlign=function(t){this.textAlign_=t},v.prototype.setTextBaseline=function(t){this.textBaseline_=t},v.prototype.setBackgroundFill=function(t){this.backgroundFill_=t},v.prototype.setBackgroundStroke=function(t){this.backgroundStroke_=t},v.prototype.setPadding=function(t){this.padding_=t};var O=v;e.d(i,"Atlas",function(){return r}),e.d(i,"AtlasManager",function(){return c}),e.d(i,"Circle",function(){return _.a}),e.d(i,"Fill",function(){return g.a}),e.d(i,"Icon",function(){return l.a}),e.d(i,"IconImage",function(){return u.a}),e.d(i,"Image",function(){return f.a}),e.d(i,"RegularShape",function(){return p.a}),e.d(i,"Stroke",function(){return d.a}),e.d(i,"Style",function(){return m.c}),e.d(i,"Text",function(){return O})},65:function(t,i,e){"use strict";e.d(i,"a",function(){return o});var n=["experimental-webgl","webgl","webkit-3d","moz-webgl"];var o;if("undefined"!=typeof window&&"WebGLRenderingContext"in window)try{var r=function(t,i){for(var e=n.length,o=0;o<e;++o)try{var r=t.getContext(n[o],i);if(r)return r}catch(t){}return null}(document.createElement("canvas"),{failIfMajorPerformanceCaveat:!0});r&&(!0,o=r.getParameter(r.MAX_TEXTURE_SIZE),r.getSupportedExtensions())}catch(t){}},71:function(t,i,e){"use strict";e.d(i,"a",function(){return s});var n=e(44),o=function(){this.cache_={},this.cacheSize_=0,this.maxCacheSize_=32};function r(t,i,e){return i+":"+t+":"+(e?Object(n.b)(e):"null")}o.prototype.clear=function(){this.cache_={},this.cacheSize_=0},o.prototype.expire=function(){if(this.cacheSize_>this.maxCacheSize_){var t=0;for(var i in this.cache_){var e=this.cache_[i];0!=(3&t++)||e.hasListener()||(delete this.cache_[i],--this.cacheSize_)}}},o.prototype.get=function(t,i,e){var n=r(t,i,e);return n in this.cache_?this.cache_[n]:null},o.prototype.set=function(t,i,e,n){var o=r(t,i,e);this.cache_[o]=n,++this.cacheSize_},o.prototype.setSize=function(t){this.maxCacheSize_=t,this.expire()};var s=new o},82:function(t,i,e){"use strict";e.d(i,"b",function(){return _});var n=e(13),o=e(4),r=e(40),s=e(2),a=e(30),h=e(71),c=function(t){function i(i,e,n,o,r,s){t.call(this),this.hitDetectionImage_=null,this.image_=i||new Image,null!==o&&(this.image_.crossOrigin=o),this.canvas_=s?document.createElement("canvas"):null,this.color_=s,this.imageListenerKeys_=null,this.imageState_=r,this.size_=n,this.src_=e,this.tainted_}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.isTainted_=function(){if(void 0===this.tainted_&&this.imageState_===a.a.LOADED){this.tainted_=!1;var t=Object(n.a)(1,1);try{t.drawImage(this.image_,0,0),t.getImageData(0,0,1,1)}catch(t){this.tainted_=!0}}return!0===this.tainted_},i.prototype.dispatchChangeEvent_=function(){this.dispatchEvent(s.a.CHANGE)},i.prototype.handleImageError_=function(){this.imageState_=a.a.ERROR,this.unlistenImage_(),this.dispatchChangeEvent_()},i.prototype.handleImageLoad_=function(){this.imageState_=a.a.LOADED,this.size_&&(this.image_.width=this.size_[0],this.image_.height=this.size_[1]),this.size_=[this.image_.width,this.image_.height],this.unlistenImage_(),this.replaceColor_(),this.dispatchChangeEvent_()},i.prototype.getImage=function(t){return this.canvas_?this.canvas_:this.image_},i.prototype.getImageState=function(){return this.imageState_},i.prototype.getHitDetectionImage=function(t){if(!this.hitDetectionImage_)if(this.isTainted_()){var i=this.size_[0],e=this.size_[1],o=Object(n.a)(i,e);o.fillRect(0,0,i,e),this.hitDetectionImage_=o.canvas}else this.hitDetectionImage_=this.image_;return this.hitDetectionImage_},i.prototype.getSize=function(){return this.size_},i.prototype.getSrc=function(){return this.src_},i.prototype.load=function(){if(this.imageState_==a.a.IDLE){this.imageState_=a.a.LOADING,this.imageListenerKeys_=[Object(o.b)(this.image_,s.a.ERROR,this.handleImageError_,this),Object(o.b)(this.image_,s.a.LOAD,this.handleImageLoad_,this)];try{this.image_.src=this.src_}catch(t){this.handleImageError_()}}},i.prototype.replaceColor_=function(){if(this.color_&&!this.isTainted_()){this.canvas_.width=this.image_.width,this.canvas_.height=this.image_.height;var t=this.canvas_.getContext("2d");t.drawImage(this.image_,0,0);for(var i=t.getImageData(0,0,this.image_.width,this.image_.height),e=i.data,n=this.color_[0]/255,o=this.color_[1]/255,r=this.color_[2]/255,s=0,a=e.length;s<a;s+=4)e[s]*=n,e[s+1]*=o,e[s+2]*=r;t.putImageData(i,0,0)}},i.prototype.unlistenImage_=function(){this.imageListenerKeys_.forEach(o.e),this.imageListenerKeys_=null},i}(r.a);function _(t,i,e,n,o,r){var s=h.a.get(i,n,r);return s||(s=new c(t,i,e,n,o,r),h.a.set(i,n,r,s)),s}i.a=c},95:function(t,i,e){"use strict";var n=e(3),o=e(30),r=e(9),s=e(44),a=e(4),h=e(2),c={FRACTION:"fraction",PIXELS:"pixels"},_=e(82),g={BOTTOM_LEFT:"bottom-left",BOTTOM_RIGHT:"bottom-right",TOP_LEFT:"top-left",TOP_RIGHT:"top-right"},l=function(t){function i(i){var e=i||{},a=void 0!==e.opacity?e.opacity:1,h=void 0!==e.rotation?e.rotation:0,l=void 0!==e.scale?e.scale:1,u=void 0!==e.rotateWithView&&e.rotateWithView;t.call(this,{opacity:a,rotation:h,scale:l,rotateWithView:u}),this.anchor_=void 0!==e.anchor?e.anchor:[.5,.5],this.normalizedAnchor_=null,this.anchorOrigin_=void 0!==e.anchorOrigin?e.anchorOrigin:g.TOP_LEFT,this.anchorXUnits_=void 0!==e.anchorXUnits?e.anchorXUnits:c.FRACTION,this.anchorYUnits_=void 0!==e.anchorYUnits?e.anchorYUnits:c.FRACTION,this.crossOrigin_=void 0!==e.crossOrigin?e.crossOrigin:null;var f=void 0!==e.img?e.img:null,p=void 0!==e.imgSize?e.imgSize:null,d=e.src;Object(r.a)(!(void 0!==d&&f),4),Object(r.a)(!f||f&&p,5),void 0!==d&&0!==d.length||!f||(d=f.src||Object(n.c)(f)),Object(r.a)(void 0!==d&&d.length>0,6);var m=void 0!==e.src?o.a.IDLE:o.a.LOADED;this.color_=void 0!==e.color?Object(s.a)(e.color):null,this.iconImage_=Object(_.b)(f,d,p,this.crossOrigin_,m,this.color_),this.offset_=void 0!==e.offset?e.offset:[0,0],this.offsetOrigin_=void 0!==e.offsetOrigin?e.offsetOrigin:g.TOP_LEFT,this.origin_=null,this.size_=void 0!==e.size?e.size:null}return t&&(i.__proto__=t),i.prototype=Object.create(t&&t.prototype),i.prototype.constructor=i,i.prototype.clone=function(){return new i({anchor:this.anchor_.slice(),anchorOrigin:this.anchorOrigin_,anchorXUnits:this.anchorXUnits_,anchorYUnits:this.anchorYUnits_,crossOrigin:this.crossOrigin_,color:this.color_&&this.color_.slice?this.color_.slice():this.color_||void 0,src:this.getSrc(),offset:this.offset_.slice(),offsetOrigin:this.offsetOrigin_,size:null!==this.size_?this.size_.slice():void 0,opacity:this.getOpacity(),scale:this.getScale(),rotation:this.getRotation(),rotateWithView:this.getRotateWithView()})},i.prototype.getAnchor=function(){if(this.normalizedAnchor_)return this.normalizedAnchor_;var t=this.anchor_,i=this.getSize();if(this.anchorXUnits_==c.FRACTION||this.anchorYUnits_==c.FRACTION){if(!i)return null;t=this.anchor_.slice(),this.anchorXUnits_==c.FRACTION&&(t[0]*=i[0]),this.anchorYUnits_==c.FRACTION&&(t[1]*=i[1])}if(this.anchorOrigin_!=g.TOP_LEFT){if(!i)return null;t===this.anchor_&&(t=this.anchor_.slice()),this.anchorOrigin_!=g.TOP_RIGHT&&this.anchorOrigin_!=g.BOTTOM_RIGHT||(t[0]=-t[0]+i[0]),this.anchorOrigin_!=g.BOTTOM_LEFT&&this.anchorOrigin_!=g.BOTTOM_RIGHT||(t[1]=-t[1]+i[1])}return this.normalizedAnchor_=t,this.normalizedAnchor_},i.prototype.setAnchor=function(t){this.anchor_=t,this.normalizedAnchor_=null},i.prototype.getColor=function(){return this.color_},i.prototype.getImage=function(t){return this.iconImage_.getImage(t)},i.prototype.getImageSize=function(){return this.iconImage_.getSize()},i.prototype.getHitDetectionImageSize=function(){return this.getImageSize()},i.prototype.getImageState=function(){return this.iconImage_.getImageState()},i.prototype.getHitDetectionImage=function(t){return this.iconImage_.getHitDetectionImage(t)},i.prototype.getOrigin=function(){if(this.origin_)return this.origin_;var t=this.offset_;if(this.offsetOrigin_!=g.TOP_LEFT){var i=this.getSize(),e=this.iconImage_.getSize();if(!i||!e)return null;t=t.slice(),this.offsetOrigin_!=g.TOP_RIGHT&&this.offsetOrigin_!=g.BOTTOM_RIGHT||(t[0]=e[0]-i[0]-t[0]),this.offsetOrigin_!=g.BOTTOM_LEFT&&this.offsetOrigin_!=g.BOTTOM_RIGHT||(t[1]=e[1]-i[1]-t[1])}return this.origin_=t,this.origin_},i.prototype.getSrc=function(){return this.iconImage_.getSrc()},i.prototype.getSize=function(){return this.size_?this.size_:this.iconImage_.getSize()},i.prototype.listenImageChange=function(t,i){return Object(a.a)(this.iconImage_,h.a.CHANGE,t,i)},i.prototype.load=function(){this.iconImage_.load()},i.prototype.unlistenImageChange=function(t,i){Object(a.c)(this.iconImage_,h.a.CHANGE,t,i)},i}(e(74).a);i.a=l}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,