(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{105:function(t,e,r){"use strict";var o=r(29),i=function(t){function e(e){var r=e||{};t.call(this,r),this.type=o.a.IMAGE}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(r(32).a);i.prototype.getSource,e.a=i},106:function(t,e,r){"use strict";var o=r(29),i=r(32),n=r(109),s=r(5),a=function(t){function e(e){var r=e||{},i=Object(s.a)({},r);delete i.preload,delete i.useInterimTilesOnError,t.call(this,i),this.setPreload(void 0!==r.preload?r.preload:0),this.setUseInterimTilesOnError(void 0===r.useInterimTilesOnError||r.useInterimTilesOnError),this.type=o.a.TILE}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getPreload=function(){return this.get(n.a.PRELOAD)},e.prototype.setPreload=function(t){this.set(n.a.PRELOAD,t)},e.prototype.getUseInterimTilesOnError=function(){return this.get(n.a.USE_INTERIM_TILES_ON_ERROR)},e.prototype.setUseInterimTilesOnError=function(t){this.set(n.a.USE_INTERIM_TILES_ON_ERROR,t)},e}(i.a);a.prototype.getSource,e.a=a},109:function(t,e,r){"use strict";e.a={PRELOAD:"preload",USE_INTERIM_TILES_ON_ERROR:"useInterimTilesOnError"}},16:function(t,e,r){"use strict";e.a={UNDEFINED:"undefined",LOADING:"loading",READY:"ready",ERROR:"error"}},21:function(t,e,r){"use strict";e.a={ADD:"add",REMOVE:"remove"}},25:function(t,e,r){"use strict";var o=r(67),i=r(21),n=r(12),s=r(11),a="length",c=function(t){function e(e,r){t.call(this,e),this.element=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e}(s.a),u=function(t){function e(e,r){t.call(this);var o=r||{};if(this.unique_=!!o.unique,this.array_=e||[],this.unique_)for(var i=0,n=this.array_.length;i<n;++i)this.assertUnique_(this.array_[i],i);this.updateLength_()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.clear=function(){for(;this.getLength()>0;)this.pop()},e.prototype.extend=function(t){for(var e=0,r=t.length;e<r;++e)this.push(t[e]);return this},e.prototype.forEach=function(t){for(var e=this.array_,r=0,o=e.length;r<o;++r)t(e[r],r,e)},e.prototype.getArray=function(){return this.array_},e.prototype.item=function(t){return this.array_[t]},e.prototype.getLength=function(){return this.get(a)},e.prototype.insertAt=function(t,e){this.unique_&&this.assertUnique_(e),this.array_.splice(t,0,e),this.updateLength_(),this.dispatchEvent(new c(i.a.ADD,e))},e.prototype.pop=function(){return this.removeAt(this.getLength()-1)},e.prototype.push=function(t){this.unique_&&this.assertUnique_(t);var e=this.getLength();return this.insertAt(e,t),this.getLength()},e.prototype.remove=function(t){for(var e=this.array_,r=0,o=e.length;r<o;++r)if(e[r]===t)return this.removeAt(r)},e.prototype.removeAt=function(t){var e=this.array_[t];return this.array_.splice(t,1),this.updateLength_(),this.dispatchEvent(new c(i.a.REMOVE,e)),e},e.prototype.setAt=function(t,e){var r=this.getLength();if(t<r){this.unique_&&this.assertUnique_(e,t);var o=this.array_[t];this.array_[t]=e,this.dispatchEvent(new c(i.a.REMOVE,o)),this.dispatchEvent(new c(i.a.ADD,e))}else{for(var n=r;n<t;++n)this.insertAt(n,void 0);this.insertAt(t,e)}},e.prototype.updateLength_=function(){this.set(a,this.array_.length)},e.prototype.assertUnique_=function(t,e){for(var r=0,i=this.array_.length;r<i;++r)if(this.array_[r]===t&&r!==e)throw new o.a(58)},e}(n.a);e.a=u},29:function(t,e,r){"use strict";e.a={IMAGE:"IMAGE",TILE:"TILE",VECTOR_TILE:"VECTOR_TILE",VECTOR:"VECTOR"}},32:function(t,e,r){"use strict";r.d(e,"b",function(){return _});var o=r(4),i=r(2),n=r(3),s=r(12),a=r(58),c=r(56),u=r(5),p=r(41),h=r(16),y=function(t){function e(e){var r=Object(u.a)({},e);delete r.source,t.call(this,r),this.mapPrecomposeKey_=null,this.mapRenderKey_=null,this.sourceChangeKey_=null,e.map&&this.setMap(e.map),Object(o.a)(this,Object(s.b)(c.a.SOURCE),this.handleSourcePropertyChange_,this);var i=e.source?e.source:null;this.setSource(i)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getLayersArray=function(t){var e=t||[];return e.push(this),e},e.prototype.getLayerStatesArray=function(t){var e=t||[];return e.push(this.getLayerState()),e},e.prototype.getSource=function(){return this.get(c.a.SOURCE)||null},e.prototype.getSourceState=function(){var t=this.getSource();return t?t.getState():h.a.UNDEFINED},e.prototype.handleSourceChange_=function(){this.changed()},e.prototype.handleSourcePropertyChange_=function(){this.sourceChangeKey_&&(Object(o.e)(this.sourceChangeKey_),this.sourceChangeKey_=null);var t=this.getSource();t&&(this.sourceChangeKey_=Object(o.a)(t,i.a.CHANGE,this.handleSourceChange_,this)),this.changed()},e.prototype.setMap=function(t){this.mapPrecomposeKey_&&(Object(o.e)(this.mapPrecomposeKey_),this.mapPrecomposeKey_=null),t||this.changed(),this.mapRenderKey_&&(Object(o.e)(this.mapRenderKey_),this.mapRenderKey_=null),t&&(this.mapPrecomposeKey_=Object(o.a)(t,p.a.PRECOMPOSE,function(t){var e=t,r=this.getLayerState();r.managed=!1,void 0===this.getZIndex()&&(r.zIndex=1/0),e.frameState.layerStatesArray.push(r),e.frameState.layerStates[Object(n.c)(this)]=r},this),this.mapRenderKey_=Object(o.a)(this,i.a.CHANGE,t.render,t),this.changed())},e.prototype.setSource=function(t){this.set(c.a.SOURCE,t)},e}(a.a);function _(t,e){return t.visible&&e>=t.minResolution&&e<t.maxResolution}e.a=y},41:function(t,e,r){"use strict";e.a={POSTCOMPOSE:"postcompose",PRECOMPOSE:"precompose",RENDER:"render",RENDERCOMPLETE:"rendercomplete"}},56:function(t,e,r){"use strict";e.a={OPACITY:"opacity",VISIBLE:"visible",EXTENT:"extent",Z_INDEX:"zIndex",MAX_RESOLUTION:"maxResolution",MIN_RESOLUTION:"minResolution",SOURCE:"source"}},58:function(t,e,r){"use strict";var o=r(3),i=r(12),n=r(56),s=r(6),a=r(5),c=function(t){function e(e){t.call(this);var r=Object(a.a)({},e);r[n.a.OPACITY]=void 0!==e.opacity?e.opacity:1,r[n.a.VISIBLE]=void 0===e.visible||e.visible,r[n.a.Z_INDEX]=e.zIndex,r[n.a.MAX_RESOLUTION]=void 0!==e.maxResolution?e.maxResolution:1/0,r[n.a.MIN_RESOLUTION]=void 0!==e.minResolution?e.minResolution:0,this.setProperties(r),this.state_=null,this.type}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getType=function(){return this.type},e.prototype.getLayerState=function(){var t=this.state_||{layer:this,managed:!0};return t.opacity=Object(s.a)(this.getOpacity(),0,1),t.sourceState=this.getSourceState(),t.visible=this.getVisible(),t.extent=this.getExtent(),t.zIndex=this.getZIndex()||0,t.maxResolution=this.getMaxResolution(),t.minResolution=Math.max(this.getMinResolution(),0),this.state_=t,t},e.prototype.getLayersArray=function(t){return Object(o.b)()},e.prototype.getLayerStatesArray=function(t){return Object(o.b)()},e.prototype.getExtent=function(){return this.get(n.a.EXTENT)},e.prototype.getMaxResolution=function(){return this.get(n.a.MAX_RESOLUTION)},e.prototype.getMinResolution=function(){return this.get(n.a.MIN_RESOLUTION)},e.prototype.getOpacity=function(){return this.get(n.a.OPACITY)},e.prototype.getSourceState=function(){return Object(o.b)()},e.prototype.getVisible=function(){return this.get(n.a.VISIBLE)},e.prototype.getZIndex=function(){return this.get(n.a.Z_INDEX)},e.prototype.setExtent=function(t){this.set(n.a.EXTENT,t)},e.prototype.setMaxResolution=function(t){this.set(n.a.MAX_RESOLUTION,t)},e.prototype.setMinResolution=function(t){this.set(n.a.MIN_RESOLUTION,t)},e.prototype.setOpacity=function(t){this.set(n.a.OPACITY,t)},e.prototype.setVisible=function(t){this.set(n.a.VISIBLE,t)},e.prototype.setZIndex=function(t){this.set(n.a.Z_INDEX,t)},e}(i.a);e.a=c},61:function(t,e,r){"use strict";e.a={IMAGE:"image",VECTOR:"vector"}},71:function(t,e,r){"use strict";r.d(e,"a",function(){return s});var o=r(44),i=function(){this.cache_={},this.cacheSize_=0,this.maxCacheSize_=32};function n(t,e,r){return e+":"+t+":"+(r?Object(o.b)(r):"null")}i.prototype.clear=function(){this.cache_={},this.cacheSize_=0},i.prototype.expire=function(){if(this.cacheSize_>this.maxCacheSize_){var t=0;for(var e in this.cache_){var r=this.cache_[e];0!=(3&t++)||r.hasListener()||(delete this.cache_[e],--this.cacheSize_)}}},i.prototype.get=function(t,e,r){var o=n(t,e,r);return o in this.cache_?this.cache_[o]:null},i.prototype.set=function(t,e,r,o){var i=n(t,e,r);this.cache_[i]=o,++this.cacheSize_},i.prototype.setSize=function(t){this.maxCacheSize_=t,this.expire()};var s=new i}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,