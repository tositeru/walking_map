!function(e){function o(o){for(var t,r,l=o[0],i=o[1],a=0,s=[];a<l.length;a++)r=l[a],n[r]&&s.push(n[r][0]),n[r]=0;for(t in i)Object.prototype.hasOwnProperty.call(i,t)&&(e[t]=i[t]);for(c&&c(o);s.length;)s.shift()()}var t={},n={6:0};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.e=function(e){var o=[],t=n[e];if(0!==t)if(t)o.push(t[2]);else{var l=new Promise(function(o,r){t=n[e]=[o,r]});o.push(t[2]=l);var i,a=document.createElement("script");a.charset="utf-8",a.timeout=120,r.nc&&a.setAttribute("nonce",r.nc),a.src=function(e){return r.p+""+({0:"vendors~ol/Geolocation~ol/Map~ol/View~ol/geom/Point~ol/interaction~ol/layer~ol/source~ol/style",1:"vendors~ol/Geolocation~ol/Map~ol/View~ol/geom/Point~ol/interaction~ol/layer~ol/source",2:"vendors~ol/Geolocation~ol/Map~ol/View~ol/geom/Point~ol/interaction~ol/source",3:"vendors~ol/Map~ol/interaction~ol/layer~ol/style",4:"vendors~ol/Geolocation~ol/View",5:"vendors~ol/layer~ol/source",7:"ol/Feature",8:"ol/Geolocation",9:"ol/Map",10:"ol/View",11:"ol/interaction",12:"ol/layer",13:"ol/source",14:"vendors~ol/style"}[e]||e)+".js"}(e),i=function(o){a.onerror=a.onload=null,clearTimeout(c);var t=n[e];if(0!==t){if(t){var r=o&&("load"===o.type?"missing":o.type),l=o&&o.target&&o.target.src,i=new Error("Loading chunk "+e+" failed.\n("+r+": "+l+")");i.type=r,i.request=l,t[1](i)}n[e]=void 0}};var c=setTimeout(function(){i({type:"timeout",target:a})},12e4);a.onerror=a.onload=i,document.head.appendChild(a)}return Promise.all(o)},r.m=e,r.c=t,r.d=function(e,o,t){r.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,o){if(1&o&&(e=r(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var n in e)r.d(t,n,function(o){return e[o]}.bind(null,n));return t},r.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(o,"a",o),o},r.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},r.p="",r.oe=function(e){throw console.error(e),e};var l=window.webpackJsonp=window.webpackJsonp||[],i=l.push.bind(l);l.push=o,l=l.slice();for(var a=0;a<l.length;a++)o(l[a]);var c=i;r(r.s=0)}([function(e,o,t){"use strict";function n(e,o){let t=e;for(const e of o.split("/")){if(!t[e])throw new Error(`Access unknown property name... path=${o}`);t=t[e]}return t}function r(e,o,t){const n=(e,o,t)=>{const r=o[0];1===o.length?e[r]=t:n(e[r]?e[r]:e[r]={},o.slice(1),t)};n(e,o.split("/"),t)}t.r(o);var l={imports:async function(e){const o=[];for(const t of e){const e=n(this,t);o.push(e())}const t=await Promise.all(o),l={};for(let o=0;o<e.length;++o)r(l,e[o],t[o]);return l},Map:()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(9)]).then(t.bind(null,117)),View:()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(4),t.e(10)]).then(t.bind(null,111)),layer:()=>Promise.all([t.e(0),t.e(1),t.e(3),t.e(5),t.e(12)]).then(t.bind(null,119)),source:()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(5),t.e(13)]).then(t.bind(null,116)),Feature:()=>t.e(7).then(t.bind(null,48)),Geolocation:()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(4),t.e(8)]).then(t.bind(null,115)),interaction:()=>Promise.all([t.e(0),t.e(1),t.e(2),t.e(3),t.e(11)]).then(t.bind(null,110)),style:()=>Promise.all([t.e(0),t.e(3),t.e(14)]).then(t.bind(null,118)),geom:{Point:()=>Promise.all([t.e(0),t.e(1),t.e(2)]).then(t.bind(null,42))}};!async function(){try{const o=await l.imports(["Map","View","layer","source","Feature","Geolocation","interaction","style","geom/Point"]),t=new o.layer.Tile({source:new o.source.OSM}),n=new o.source.Vector,r=new o.layer.Vector({source:n,style:new o.style.Style({fill:new o.style.Fill({color:"rgba(255, 255, 255, 0.2)"}),image:new o.style.Circle({fill:new o.style.Fill({color:"#ffcc33"}),radius:7}),stroke:new o.style.Stroke({color:"#ffcc33",width:2})})}),i=new o.View.default({center:[-11e6,46e5],maxZoom:28,minZoom:3,zoom:17}),a=new o.Map.default({layers:[t,r],target:"map",view:i}),c=new o.interaction.Modify({source:n});let s,u;a.addInteraction(c);const f=document.getElementById("type");function e(){s=new o.interaction.Draw({source:n,type:f.value}),a.addInteraction(s),u=new o.interaction.Snap({source:n}),a.addInteraction(u)}f.onchange=(()=>{a.removeInteraction(s),a.removeInteraction(u),e()});const d=new o.Feature.default;d.setStyle(new o.style.Style({image:new o.style.Circle({fill:new o.style.Fill({color:"#33CC99"}),radius:6,stroke:new o.style.Stroke({color:"#fff",width:2})})})),e();const y=new o.Geolocation.default({projection:i.getProjection(),trackingOptions:{enableHighAccuracy:!0}});y.setTracking(!0),y.on("change:position",()=>{const e=y.getPosition();d.setGeometry(e?new o.geom.Point.default(e):null),i.animate({center:e,duration:1e3})});const p=new o.Feature.default;y.on("change:accuracyGeometry",()=>{p.setGeometry(y.getAccuracyGeometry())}),new o.layer.Vector({map:a,source:new o.source.Vector({features:[p,d]})})}catch(e){console.error(e)}}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,